
servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a758  0800a758  0000b758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a774  0800a774  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a774  0800a774  0000b774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a77c  0800a77c  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a77c  0800a77c  0000b77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a780  0800a780  0000b780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a784  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000a6c  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae8  20000ae8  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ef9  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f28  00000000  00000000  00025fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c8  00000000  00000000  00029ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001197  00000000  00000000  0002b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245bd  00000000  00000000  0002c72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002100e  00000000  00000000  00050cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d408c  00000000  00000000  00071cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145d86  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064fc  00000000  00000000  00145dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0014c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a740 	.word	0x0800a740

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a740 	.word	0x0800a740

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000d48:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <DWT_Delay_Init+0x58>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	4a13      	ldr	r2, [pc, #76]	@ (8000d9c <DWT_Delay_Init+0x58>)
 8000d4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000d52:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <DWT_Delay_Init+0x58>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	4a10      	ldr	r2, [pc, #64]	@ (8000d9c <DWT_Delay_Init+0x58>)
 8000d5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d5e:	60d3      	str	r3, [r2, #12]
     
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <DWT_Delay_Init+0x5c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0e      	ldr	r2, [pc, #56]	@ (8000da0 <DWT_Delay_Init+0x5c>)
 8000d66:	f023 0301 	bic.w	r3, r3, #1
 8000d6a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <DWT_Delay_Init+0x5c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0b      	ldr	r2, [pc, #44]	@ (8000da0 <DWT_Delay_Init+0x5c>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6013      	str	r3, [r2, #0]
     
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <DWT_Delay_Init+0x5c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
     
     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000d7e:	bf00      	nop
     __ASM volatile ("NOP");
 8000d80:	bf00      	nop
  __ASM volatile ("NOP");
 8000d82:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <DWT_Delay_Init+0x5c>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	e000      	b.n	8000d92 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000d90:	2301      	movs	r3, #1
  }
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000edf0 	.word	0xe000edf0
 8000da0:	e0001000 	.word	0xe0001000

08000da4 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <DWT_Delay_us+0x40>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000db2:	f004 fccd 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <DWT_Delay_us+0x44>)
 8000dba:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbe:	0c9b      	lsrs	r3, r3, #18
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	fb02 f303 	mul.w	r3, r2, r3
 8000dc6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000dc8:	bf00      	nop
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <DWT_Delay_us+0x40>)
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	1ad2      	subs	r2, r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d3f8      	bcc.n	8000dca <DWT_Delay_us+0x26>
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	e0001000 	.word	0xe0001000
 8000de8:	431bde83 	.word	0x431bde83

08000dec <Read_HCSR04.0>:
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint32_t Read_HCSR04(void){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	f8c7 c004 	str.w	ip, [r7, #4]
	  		  uint32_t localTime=0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]


	  	  	  HAL_GPIO_WritePin(outp_GPIO_Port, outp_Pin, 1);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4813      	ldr	r0, [pc, #76]	@ (8000e4c <Read_HCSR04.0+0x60>)
 8000e00:	f001 f92a 	bl	8002058 <HAL_GPIO_WritePin>
	  	  	  DWT_Delay_us(10);
 8000e04:	200a      	movs	r0, #10
 8000e06:	f7ff ffcd 	bl	8000da4 <DWT_Delay_us>
	  	  	  HAL_GPIO_WritePin(outp_GPIO_Port, outp_Pin, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	480f      	ldr	r0, [pc, #60]	@ (8000e4c <Read_HCSR04.0+0x60>)
 8000e10:	f001 f922 	bl	8002058 <HAL_GPIO_WritePin>

	  	  	  while(HAL_GPIO_ReadPin(inp_GPIO_Port,inp_Pin)==0);
 8000e14:	bf00      	nop
 8000e16:	2108      	movs	r1, #8
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <Read_HCSR04.0+0x60>)
 8000e1a:	f001 f905 	bl	8002028 <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0f8      	beq.n	8000e16 <Read_HCSR04.0+0x2a>

	  	  	  while(HAL_GPIO_ReadPin(inp_GPIO_Port,inp_Pin)==1){
 8000e24:	e005      	b.n	8000e32 <Read_HCSR04.0+0x46>
	  	  		  localTime++;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
	  	  		  DWT_Delay_us(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f7ff ffb9 	bl	8000da4 <DWT_Delay_us>
	  	  	  while(HAL_GPIO_ReadPin(inp_GPIO_Port,inp_Pin)==1){
 8000e32:	2108      	movs	r1, #8
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <Read_HCSR04.0+0x60>)
 8000e36:	f001 f8f7 	bl	8002028 <HAL_GPIO_ReadPin>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d0f2      	beq.n	8000e26 <Read_HCSR04.0+0x3a>
	  	  	  }
	  	  	  return localTime;
 8000e40:	68fb      	ldr	r3, [r7, #12]
	  	  }
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40020000 	.word	0x40020000

08000e50 <main>:
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
int main(void)
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000e5c:	f000 fda0 	bl	80019a0 <HAL_Init>
  DWT_Delay_Init();
 8000e60:	f7ff ff70 	bl	8000d44 <DWT_Delay_Init>
  SystemClock_Config();
 8000e64:	f000 f8c6 	bl	8000ff4 <SystemClock_Config>
  MX_GPIO_Init();
 8000e68:	f000 fa38 	bl	80012dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e6c:	f000 f92c 	bl	80010c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000e70:	f000 f958 	bl	8001124 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e74:	f000 f986 	bl	8001184 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000e78:	f009 f80c 	bl	8009e94 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000e7c:	f000 f9b8 	bl	80011f0 <MX_TIM2_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e80:	2104      	movs	r1, #4
 8000e82:	4859      	ldr	r0, [pc, #356]	@ (8000fe8 <main+0x198>)
 8000e84:	f004 fef8 	bl	8005c78 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,75);
 8000e88:	4b57      	ldr	r3, [pc, #348]	@ (8000fe8 <main+0x198>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	224b      	movs	r2, #75	@ 0x4b
 8000e8e:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_Delay(3000);
 8000e90:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e94:	f000 fdf6 	bl	8001a84 <HAL_Delay>
  float z=0;
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
	      /* USER CODE END WHILE */
	  	  time= Read_HCSR04();
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	469c      	mov	ip, r3
 8000ea2:	f7ff ffa3 	bl	8000dec <Read_HCSR04.0>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a50      	ldr	r2, [pc, #320]	@ (8000fec <main+0x19c>)
 8000eaa:	6013      	str	r3, [r2, #0]
	  	 	     distance=time*0.034/2;
 8000eac:	4b4f      	ldr	r3, [pc, #316]	@ (8000fec <main+0x19c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff facb 	bl	800044c <__aeabi_ui2d>
 8000eb6:	a348      	add	r3, pc, #288	@ (adr r3, 8000fd8 <main+0x188>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	f7ff fb40 	bl	8000540 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ed0:	f7ff fc60 	bl	8000794 <__aeabi_ddiv>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f7ff fd42 	bl	8000964 <__aeabi_d2iz>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a43      	ldr	r2, [pc, #268]	@ (8000ff0 <main+0x1a0>)
 8000ee4:	6013      	str	r3, [r2, #0]

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ee6:	f008 fffb 	bl	8009ee0 <MX_USB_HOST_Process>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000eea:	2104      	movs	r1, #4
 8000eec:	483e      	ldr	r0, [pc, #248]	@ (8000fe8 <main+0x198>)
 8000eee:	f004 fec3 	bl	8005c78 <HAL_TIM_PWM_Start>
       int i=75;
 8000ef2:	234b      	movs	r3, #75	@ 0x4b
 8000ef4:	60bb      	str	r3, [r7, #8]
       for(i=75;i<=125;i++){
 8000ef6:	234b      	movs	r3, #75	@ 0x4b
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	e019      	b.n	8000f30 <main+0xe0>
         __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,i);
 8000efc:	4b3a      	ldr	r3, [pc, #232]	@ (8000fe8 <main+0x198>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	639a      	str	r2, [r3, #56]	@ 0x38
         HAL_Delay(15);
 8000f04:	200f      	movs	r0, #15
 8000f06:	f000 fdbd 	bl	8001a84 <HAL_Delay>
         z=z+0.2;
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f7ff fac0 	bl	8000490 <__aeabi_f2d>
 8000f10:	a333      	add	r3, pc, #204	@ (adr r3, 8000fe0 <main+0x190>)
 8000f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f16:	f7ff f95d 	bl	80001d4 <__adddf3>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff fd47 	bl	80009b4 <__aeabi_d2f>
 8000f26:	4603      	mov	r3, r0
 8000f28:	60fb      	str	r3, [r7, #12]
       for(i=75;i<=125;i++){
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f34:	dde2      	ble.n	8000efc <main+0xac>
       }
       z=0;
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
       HAL_Delay(500);
 8000f3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f40:	f000 fda0 	bl	8001a84 <HAL_Delay>
       for(i=125;i>=25;i--){
 8000f44:	237d      	movs	r3, #125	@ 0x7d
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	e019      	b.n	8000f7e <main+0x12e>

            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,i);
 8000f4a:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <main+0x198>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_Delay(15);
 8000f52:	200f      	movs	r0, #15
 8000f54:	f000 fd96 	bl	8001a84 <HAL_Delay>
            z=z+0.2;
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f7ff fa99 	bl	8000490 <__aeabi_f2d>
 8000f5e:	a320      	add	r3, pc, #128	@ (adr r3, 8000fe0 <main+0x190>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff f936 	bl	80001d4 <__adddf3>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f7ff fd20 	bl	80009b4 <__aeabi_d2f>
 8000f74:	4603      	mov	r3, r0
 8000f76:	60fb      	str	r3, [r7, #12]
       for(i=125;i>=25;i--){
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b18      	cmp	r3, #24
 8000f82:	dce2      	bgt.n	8000f4a <main+0xfa>
          }
       z=0;
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
       HAL_Delay(500);
 8000f8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f8e:	f000 fd79 	bl	8001a84 <HAL_Delay>
       for(i=25;i<=75;i++){
 8000f92:	2319      	movs	r3, #25
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	e019      	b.n	8000fcc <main+0x17c>

       	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,i);
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <main+0x198>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	639a      	str	r2, [r3, #56]	@ 0x38
       	      HAL_Delay(15);
 8000fa0:	200f      	movs	r0, #15
 8000fa2:	f000 fd6f 	bl	8001a84 <HAL_Delay>
       	      z=z+0.2;
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f7ff fa72 	bl	8000490 <__aeabi_f2d>
 8000fac:	a30c      	add	r3, pc, #48	@ (adr r3, 8000fe0 <main+0x190>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff f90f 	bl	80001d4 <__adddf3>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fcf9 	bl	80009b4 <__aeabi_d2f>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	60fb      	str	r3, [r7, #12]
       for(i=25;i<=75;i++){
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2b4b      	cmp	r3, #75	@ 0x4b
 8000fd0:	dde2      	ble.n	8000f98 <main+0x148>
  {
 8000fd2:	e764      	b.n	8000e9e <main+0x4e>
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	b020c49c 	.word	0xb020c49c
 8000fdc:	3fa16872 	.word	0x3fa16872
 8000fe0:	9999999a 	.word	0x9999999a
 8000fe4:	3fc99999 	.word	0x3fc99999
 8000fe8:	2000018c 	.word	0x2000018c
 8000fec:	200001d4 	.word	0x200001d4
 8000ff0:	200001d8 	.word	0x200001d8

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b094      	sub	sp, #80	@ 0x50
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	2230      	movs	r2, #48	@ 0x30
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f009 fb0e 	bl	800a624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <SystemClock_Config+0xcc>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	4a27      	ldr	r2, [pc, #156]	@ (80010c0 <SystemClock_Config+0xcc>)
 8001022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	@ 0x40
 8001028:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <SystemClock_Config+0xcc>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <SystemClock_Config+0xd0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <SystemClock_Config+0xd0>)
 800103e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <SystemClock_Config+0xd0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001050:	2301      	movs	r3, #1
 8001052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001054:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001064:	2308      	movs	r3, #8
 8001066:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001068:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800106c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800106e:	2302      	movs	r3, #2
 8001070:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001072:	2307      	movs	r3, #7
 8001074:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	4618      	mov	r0, r3
 800107c:	f003 ff04 	bl	8004e88 <HAL_RCC_OscConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001086:	f000 fa39 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108a:	230f      	movs	r3, #15
 800108c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108e:	2302      	movs	r3, #2
 8001090:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001096:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800109a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800109c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2105      	movs	r1, #5
 80010a8:	4618      	mov	r0, r3
 80010aa:	f004 f965 	bl	8005378 <HAL_RCC_ClockConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010b4:	f000 fa22 	bl	80014fc <Error_Handler>
  }
}
 80010b8:	bf00      	nop
 80010ba:	3750      	adds	r7, #80	@ 0x50
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_I2C1_Init+0x50>)
 80010ce:	4a13      	ldr	r2, [pc, #76]	@ (800111c <MX_I2C1_Init+0x54>)
 80010d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_I2C1_Init+0x50>)
 80010d4:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <MX_I2C1_Init+0x58>)
 80010d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_I2C1_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <MX_I2C1_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <MX_I2C1_Init+0x50>)
 80010e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <MX_I2C1_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <MX_I2C1_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	@ (8001118 <MX_I2C1_Init+0x50>)
 8001106:	f003 f8db 	bl	80042c0 <HAL_I2C_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001110:	f000 f9f4 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000098 	.word	0x20000098
 800111c:	40005400 	.word	0x40005400
 8001120:	000186a0 	.word	0x000186a0

08001124 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001128:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <MX_I2S3_Init+0x54>)
 800112a:	4a14      	ldr	r2, [pc, #80]	@ (800117c <MX_I2S3_Init+0x58>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <MX_I2S3_Init+0x54>)
 8001130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001134:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <MX_I2S3_Init+0x54>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800113c:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_I2S3_Init+0x54>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001142:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <MX_I2S3_Init+0x54>)
 8001144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001148:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_I2S3_Init+0x54>)
 800114c:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <MX_I2S3_Init+0x5c>)
 800114e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_I2S3_Init+0x54>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_I2S3_Init+0x54>)
 8001158:	2200      	movs	r2, #0
 800115a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_I2S3_Init+0x54>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_I2S3_Init+0x54>)
 8001164:	f003 f9f0 	bl	8004548 <HAL_I2S_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800116e:	f000 f9c5 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200000ec 	.word	0x200000ec
 800117c:	40003c00 	.word	0x40003c00
 8001180:	00017700 	.word	0x00017700

08001184 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <MX_SPI1_Init+0x64>)
 800118a:	4a18      	ldr	r2, [pc, #96]	@ (80011ec <MX_SPI1_Init+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <MX_SPI1_Init+0x64>)
 8001190:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001194:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <MX_SPI1_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <MX_SPI1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011d0:	220a      	movs	r2, #10
 80011d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011d6:	f004 fc1d 	bl	8005a14 <HAL_SPI_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011e0:	f000 f98c 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000134 	.word	0x20000134
 80011ec:	40013000 	.word	0x40013000

080011f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	@ 0x38
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	f107 0320 	add.w	r3, r7, #32
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	615a      	str	r2, [r3, #20]
 800121e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001220:	4b2d      	ldr	r3, [pc, #180]	@ (80012d8 <MX_TIM2_Init+0xe8>)
 8001222:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001226:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8001228:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <MX_TIM2_Init+0xe8>)
 800122a:	f240 628f 	movw	r2, #1679	@ 0x68f
 800122e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <MX_TIM2_Init+0xe8>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001236:	4b28      	ldr	r3, [pc, #160]	@ (80012d8 <MX_TIM2_Init+0xe8>)
 8001238:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800123c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123e:	4b26      	ldr	r3, [pc, #152]	@ (80012d8 <MX_TIM2_Init+0xe8>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <MX_TIM2_Init+0xe8>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124a:	4823      	ldr	r0, [pc, #140]	@ (80012d8 <MX_TIM2_Init+0xe8>)
 800124c:	f004 fc6b 	bl	8005b26 <HAL_TIM_Base_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001256:	f000 f951 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001260:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001264:	4619      	mov	r1, r3
 8001266:	481c      	ldr	r0, [pc, #112]	@ (80012d8 <MX_TIM2_Init+0xe8>)
 8001268:	f004 ff80 	bl	800616c <HAL_TIM_ConfigClockSource>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001272:	f000 f943 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001276:	4818      	ldr	r0, [pc, #96]	@ (80012d8 <MX_TIM2_Init+0xe8>)
 8001278:	f004 fca4 	bl	8005bc4 <HAL_TIM_PWM_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001282:	f000 f93b 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	4619      	mov	r1, r3
 8001294:	4810      	ldr	r0, [pc, #64]	@ (80012d8 <MX_TIM2_Init+0xe8>)
 8001296:	f005 fb7f 	bl	8006998 <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012a0:	f000 f92c 	bl	80014fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a4:	2360      	movs	r3, #96	@ 0x60
 80012a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2204      	movs	r2, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <MX_TIM2_Init+0xe8>)
 80012bc:	f004 fe94 	bl	8005fe8 <HAL_TIM_PWM_ConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80012c6:	f000 f919 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012ca:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <MX_TIM2_Init+0xe8>)
 80012cc:	f000 fa7a 	bl	80017c4 <HAL_TIM_MspPostInit>

}
 80012d0:	bf00      	nop
 80012d2:	3738      	adds	r7, #56	@ 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000018c 	.word	0x2000018c

080012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	@ 0x30
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	4b7b      	ldr	r3, [pc, #492]	@ (80014e4 <MX_GPIO_Init+0x208>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a7a      	ldr	r2, [pc, #488]	@ (80014e4 <MX_GPIO_Init+0x208>)
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b78      	ldr	r3, [pc, #480]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	4b74      	ldr	r3, [pc, #464]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a73      	ldr	r2, [pc, #460]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b71      	ldr	r3, [pc, #452]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b6d      	ldr	r3, [pc, #436]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a6c      	ldr	r2, [pc, #432]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b6a      	ldr	r3, [pc, #424]	@ (80014e4 <MX_GPIO_Init+0x208>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b66      	ldr	r3, [pc, #408]	@ (80014e4 <MX_GPIO_Init+0x208>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a65      	ldr	r2, [pc, #404]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b63      	ldr	r3, [pc, #396]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b5f      	ldr	r3, [pc, #380]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a5e      	ldr	r2, [pc, #376]	@ (80014e4 <MX_GPIO_Init+0x208>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b5c      	ldr	r3, [pc, #368]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b58      	ldr	r3, [pc, #352]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a57      	ldr	r2, [pc, #348]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b55      	ldr	r3, [pc, #340]	@ (80014e4 <MX_GPIO_Init+0x208>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2108      	movs	r1, #8
 800139e:	4852      	ldr	r0, [pc, #328]	@ (80014e8 <MX_GPIO_Init+0x20c>)
 80013a0:	f000 fe5a 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2101      	movs	r1, #1
 80013a8:	4850      	ldr	r0, [pc, #320]	@ (80014ec <MX_GPIO_Init+0x210>)
 80013aa:	f000 fe55 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, outp_Pin|inp_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	210c      	movs	r1, #12
 80013b2:	484f      	ldr	r0, [pc, #316]	@ (80014f0 <MX_GPIO_Init+0x214>)
 80013b4:	f000 fe50 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013b8:	2200      	movs	r2, #0
 80013ba:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80013be:	484d      	ldr	r0, [pc, #308]	@ (80014f4 <MX_GPIO_Init+0x218>)
 80013c0:	f000 fe4a 	bl	8002058 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80013c4:	2308      	movs	r3, #8
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	4843      	ldr	r0, [pc, #268]	@ (80014e8 <MX_GPIO_Init+0x20c>)
 80013dc:	f000 fc88 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	483d      	ldr	r0, [pc, #244]	@ (80014ec <MX_GPIO_Init+0x210>)
 80013f8:	f000 fc7a 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013fc:	2308      	movs	r3, #8
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800140c:	2305      	movs	r3, #5
 800140e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4835      	ldr	r0, [pc, #212]	@ (80014ec <MX_GPIO_Init+0x210>)
 8001418:	f000 fc6a 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800141c:	2301      	movs	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001420:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	482f      	ldr	r0, [pc, #188]	@ (80014f0 <MX_GPIO_Init+0x214>)
 8001432:	f000 fc5d 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : outp_Pin inp_Pin */
  GPIO_InitStruct.Pin = outp_Pin|inp_Pin;
 8001436:	230c      	movs	r3, #12
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	4828      	ldr	r0, [pc, #160]	@ (80014f0 <MX_GPIO_Init+0x214>)
 800144e:	f000 fc4f 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001452:	2304      	movs	r3, #4
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4824      	ldr	r0, [pc, #144]	@ (80014f8 <MX_GPIO_Init+0x21c>)
 8001466:	f000 fc43 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800146a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800147c:	2305      	movs	r3, #5
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	481c      	ldr	r0, [pc, #112]	@ (80014f8 <MX_GPIO_Init+0x21c>)
 8001488:	f000 fc32 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800148c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001490:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4813      	ldr	r0, [pc, #76]	@ (80014f4 <MX_GPIO_Init+0x218>)
 80014a6:	f000 fc23 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014aa:	2320      	movs	r3, #32
 80014ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	480d      	ldr	r0, [pc, #52]	@ (80014f4 <MX_GPIO_Init+0x218>)
 80014be:	f000 fc17 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014c6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <MX_GPIO_Init+0x20c>)
 80014d8:	f000 fc0a 	bl	8001cf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014dc:	bf00      	nop
 80014de:	3730      	adds	r7, #48	@ 0x30
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020c00 	.word	0x40020c00
 80014f8:	40020400 	.word	0x40020400

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <Error_Handler+0x8>

08001508 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a0f      	ldr	r2, [pc, #60]	@ (8001554 <HAL_MspInit+0x4c>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <HAL_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <HAL_MspInit+0x4c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	@ 0x40
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_MspInit+0x4c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001546:	2007      	movs	r0, #7
 8001548:	f000 fb90 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <HAL_I2C_MspInit+0x84>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12c      	bne.n	80015d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <HAL_I2C_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a17      	ldr	r2, [pc, #92]	@ (80015e0 <HAL_I2C_MspInit+0x88>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <HAL_I2C_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001596:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159c:	2312      	movs	r3, #18
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a8:	2304      	movs	r3, #4
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	480c      	ldr	r0, [pc, #48]	@ (80015e4 <HAL_I2C_MspInit+0x8c>)
 80015b4:	f000 fb9c 	bl	8001cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_I2C_MspInit+0x88>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	4a07      	ldr	r2, [pc, #28]	@ (80015e0 <HAL_I2C_MspInit+0x88>)
 80015c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <HAL_I2C_MspInit+0x88>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	@ 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40005400 	.word	0x40005400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020400 	.word	0x40020400

080015e8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08e      	sub	sp, #56	@ 0x38
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a31      	ldr	r2, [pc, #196]	@ (80016d8 <HAL_I2S_MspInit+0xf0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d15a      	bne.n	80016ce <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001618:	2301      	movs	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800161c:	23c0      	movs	r3, #192	@ 0xc0
 800161e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4618      	mov	r0, r3
 800162a:	f004 f8b1 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001634:	f7ff ff62 	bl	80014fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	4a26      	ldr	r2, [pc, #152]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 8001642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001646:	6413      	str	r3, [r2, #64]	@ 0x40
 8001648:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165c:	4a1f      	ldr	r2, [pc, #124]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6313      	str	r3, [r2, #48]	@ 0x30
 8001664:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001678:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001680:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800168c:	2310      	movs	r3, #16
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800169c:	2306      	movs	r3, #6
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a4:	4619      	mov	r1, r3
 80016a6:	480e      	ldr	r0, [pc, #56]	@ (80016e0 <HAL_I2S_MspInit+0xf8>)
 80016a8:	f000 fb22 	bl	8001cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80016ac:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016be:	2306      	movs	r3, #6
 80016c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <HAL_I2S_MspInit+0xfc>)
 80016ca:	f000 fb11 	bl	8001cf0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80016ce:	bf00      	nop
 80016d0:	3738      	adds	r7, #56	@ 0x38
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40003c00 	.word	0x40003c00
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020800 	.word	0x40020800

080016e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	@ 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a19      	ldr	r2, [pc, #100]	@ (800176c <HAL_SPI_MspInit+0x84>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d12b      	bne.n	8001762 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <HAL_SPI_MspInit+0x88>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	4a17      	ldr	r2, [pc, #92]	@ (8001770 <HAL_SPI_MspInit+0x88>)
 8001714:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001718:	6453      	str	r3, [r2, #68]	@ 0x44
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_SPI_MspInit+0x88>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <HAL_SPI_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a10      	ldr	r2, [pc, #64]	@ (8001770 <HAL_SPI_MspInit+0x88>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_SPI_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001742:	23e0      	movs	r3, #224	@ 0xe0
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001752:	2305      	movs	r3, #5
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	@ (8001774 <HAL_SPI_MspInit+0x8c>)
 800175e:	f000 fac7 	bl	8001cf0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	@ 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40013000 	.word	0x40013000
 8001770:	40023800 	.word	0x40023800
 8001774:	40020000 	.word	0x40020000

08001778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001788:	d115      	bne.n	80017b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <HAL_TIM_Base_MspInit+0x48>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	4a0b      	ldr	r2, [pc, #44]	@ (80017c0 <HAL_TIM_Base_MspInit+0x48>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6413      	str	r3, [r2, #64]	@ 0x40
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_TIM_Base_MspInit+0x48>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	201c      	movs	r0, #28
 80017ac:	f000 fa69 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017b0:	201c      	movs	r0, #28
 80017b2:	f000 fa82 	bl	8001cba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800

080017c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e4:	d11d      	bne.n	8001822 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <HAL_TIM_MspPostInit+0x68>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a0f      	ldr	r2, [pc, #60]	@ (800182c <HAL_TIM_MspPostInit+0x68>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <HAL_TIM_MspPostInit+0x68>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001802:	2302      	movs	r3, #2
 8001804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001812:	2301      	movs	r3, #1
 8001814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4619      	mov	r1, r3
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <HAL_TIM_MspPostInit+0x6c>)
 800181e:	f000 fa67 	bl	8001cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <NMI_Handler+0x4>

0800183c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <MemManage_Handler+0x4>

0800184c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <UsageFault_Handler+0x4>

0800185c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188a:	f000 f8db 	bl	8001a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <TIM2_IRQHandler+0x10>)
 800189a:	f004 fab5 	bl	8005e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000018c 	.word	0x2000018c

080018a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <OTG_FS_IRQHandler+0x10>)
 80018ae:	f000 fecd 	bl	800264c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200005c0 	.word	0x200005c0

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	@ (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f008 feb2 	bl	800a654 <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	@ (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20020000 	.word	0x20020000
 800191c:	00000400 	.word	0x00000400
 8001920:	200001dc 	.word	0x200001dc
 8001924:	20000ae8 	.word	0x20000ae8

08001928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <SystemInit+0x20>)
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001932:	4a05      	ldr	r2, [pc, #20]	@ (8001948 <SystemInit+0x20>)
 8001934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800194c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001984 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001950:	f7ff ffea 	bl	8001928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001954:	480c      	ldr	r0, [pc, #48]	@ (8001988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001956:	490d      	ldr	r1, [pc, #52]	@ (800198c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001958:	4a0d      	ldr	r2, [pc, #52]	@ (8001990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800195c:	e002      	b.n	8001964 <LoopCopyDataInit>

0800195e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001962:	3304      	adds	r3, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001968:	d3f9      	bcc.n	800195e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196a:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800196c:	4c0a      	ldr	r4, [pc, #40]	@ (8001998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001970:	e001      	b.n	8001976 <LoopFillZerobss>

08001972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001974:	3204      	adds	r2, #4

08001976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001978:	d3fb      	bcc.n	8001972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197a:	f008 fe71 	bl	800a660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197e:	f7ff fa67 	bl	8000e50 <main>
  bx  lr    
 8001982:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001990:	0800a784 	.word	0x0800a784
  ldr r2, =_sbss
 8001994:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001998:	20000ae8 	.word	0x20000ae8

0800199c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC_IRQHandler>
	...

080019a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019a4:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0d      	ldr	r2, [pc, #52]	@ (80019e0 <HAL_Init+0x40>)
 80019aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0a      	ldr	r2, [pc, #40]	@ (80019e0 <HAL_Init+0x40>)
 80019b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a07      	ldr	r2, [pc, #28]	@ (80019e0 <HAL_Init+0x40>)
 80019c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c8:	2003      	movs	r0, #3
 80019ca:	f000 f94f 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f000 f808 	bl	80019e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d4:	f7ff fd98 	bl	8001508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023c00 	.word	0x40023c00

080019e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ec:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_InitTick+0x54>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <HAL_InitTick+0x58>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f967 	bl	8001cd6 <HAL_SYSTICK_Config>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00e      	b.n	8001a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b0f      	cmp	r3, #15
 8001a16:	d80a      	bhi.n	8001a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f000 f92f 	bl	8001c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a24:	4a06      	ldr	r2, [pc, #24]	@ (8001a40 <HAL_InitTick+0x5c>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e000      	b.n	8001a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	20000004 	.word	0x20000004

08001a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_IncTick+0x20>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_IncTick+0x24>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	4a04      	ldr	r2, [pc, #16]	@ (8001a68 <HAL_IncTick+0x24>)
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008
 8001a68:	200001e0 	.word	0x200001e0

08001a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a70:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <HAL_GetTick+0x14>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	200001e0 	.word	0x200001e0

08001a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff ffee 	bl	8001a6c <HAL_GetTick>
 8001a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9c:	d005      	beq.n	8001aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_Delay+0x44>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aaa:	bf00      	nop
 8001aac:	f7ff ffde 	bl	8001a6c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d8f7      	bhi.n	8001aac <HAL_Delay+0x28>
  {
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008

08001acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db0b      	blt.n	8001b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4907      	ldr	r1, [pc, #28]	@ (8001b68 <__NVIC_EnableIRQ+0x38>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2001      	movs	r0, #1
 8001b52:	fa00 f202 	lsl.w	r2, r0, r2
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000e100 	.word	0xe000e100

08001b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	@ (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	@ (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
         );
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c38:	d301      	bcc.n	8001c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00f      	b.n	8001c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <SysTick_Config+0x40>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c46:	210f      	movs	r1, #15
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f7ff ff8e 	bl	8001b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <SysTick_Config+0x40>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c56:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <SysTick_Config+0x40>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000e010 	.word	0xe000e010

08001c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff29 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff3e 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ff8e 	bl	8001bc0 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff5d 	bl	8001b6c <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff31 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ffa2 	bl	8001c28 <SysTick_Config>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e16b      	b.n	8001fe4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 815a 	bne.w	8001fde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d005      	beq.n	8001d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d017      	beq.n	8001de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80b4 	beq.w	8001fde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b60      	ldr	r3, [pc, #384]	@ (8001ffc <HAL_GPIO_Init+0x30c>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	4a5f      	ldr	r2, [pc, #380]	@ (8001ffc <HAL_GPIO_Init+0x30c>)
 8001e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e86:	4b5d      	ldr	r3, [pc, #372]	@ (8001ffc <HAL_GPIO_Init+0x30c>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e92:	4a5b      	ldr	r2, [pc, #364]	@ (8002000 <HAL_GPIO_Init+0x310>)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a52      	ldr	r2, [pc, #328]	@ (8002004 <HAL_GPIO_Init+0x314>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d02b      	beq.n	8001f16 <HAL_GPIO_Init+0x226>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a51      	ldr	r2, [pc, #324]	@ (8002008 <HAL_GPIO_Init+0x318>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d025      	beq.n	8001f12 <HAL_GPIO_Init+0x222>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a50      	ldr	r2, [pc, #320]	@ (800200c <HAL_GPIO_Init+0x31c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d01f      	beq.n	8001f0e <HAL_GPIO_Init+0x21e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8002010 <HAL_GPIO_Init+0x320>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d019      	beq.n	8001f0a <HAL_GPIO_Init+0x21a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4e      	ldr	r2, [pc, #312]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_GPIO_Init+0x216>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4d      	ldr	r2, [pc, #308]	@ (8002018 <HAL_GPIO_Init+0x328>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00d      	beq.n	8001f02 <HAL_GPIO_Init+0x212>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800201c <HAL_GPIO_Init+0x32c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <HAL_GPIO_Init+0x20e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8002020 <HAL_GPIO_Init+0x330>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_GPIO_Init+0x20a>
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	e00e      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001efa:	2308      	movs	r3, #8
 8001efc:	e00c      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001efe:	2306      	movs	r3, #6
 8001f00:	e00a      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001f02:	2305      	movs	r3, #5
 8001f04:	e008      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001f06:	2304      	movs	r3, #4
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e004      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e002      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x228>
 8001f16:	2300      	movs	r3, #0
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	f002 0203 	and.w	r2, r2, #3
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	4093      	lsls	r3, r2
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f28:	4935      	ldr	r1, [pc, #212]	@ (8002000 <HAL_GPIO_Init+0x310>)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f36:	4b3b      	ldr	r3, [pc, #236]	@ (8002024 <HAL_GPIO_Init+0x334>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5a:	4a32      	ldr	r2, [pc, #200]	@ (8002024 <HAL_GPIO_Init+0x334>)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f60:	4b30      	ldr	r3, [pc, #192]	@ (8002024 <HAL_GPIO_Init+0x334>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f84:	4a27      	ldr	r2, [pc, #156]	@ (8002024 <HAL_GPIO_Init+0x334>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f8a:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <HAL_GPIO_Init+0x334>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fae:	4a1d      	ldr	r2, [pc, #116]	@ (8002024 <HAL_GPIO_Init+0x334>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_GPIO_Init+0x334>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd8:	4a12      	ldr	r2, [pc, #72]	@ (8002024 <HAL_GPIO_Init+0x334>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	f67f ae90 	bls.w	8001d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3724      	adds	r7, #36	@ 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40013800 	.word	0x40013800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400
 800200c:	40020800 	.word	0x40020800
 8002010:	40020c00 	.word	0x40020c00
 8002014:	40021000 	.word	0x40021000
 8002018:	40021400 	.word	0x40021400
 800201c:	40021800 	.word	0x40021800
 8002020:	40021c00 	.word	0x40021c00
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e001      	b.n	800204a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002068:	787b      	ldrb	r3, [r7, #1]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002074:	e003      	b.n	800207e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	041a      	lsls	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	619a      	str	r2, [r3, #24]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af02      	add	r7, sp, #8
 8002090:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e059      	b.n	8002150 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f007 ff4a 	bl	8009f50 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2203      	movs	r2, #3
 80020c0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ca:	d102      	bne.n	80020d2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f004 fd63 	bl	8006ba2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7c1a      	ldrb	r2, [r3, #16]
 80020e4:	f88d 2000 	strb.w	r2, [sp]
 80020e8:	3304      	adds	r3, #4
 80020ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ec:	f004 fce4 	bl	8006ab8 <USB_CoreInit>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e026      	b.n	8002150 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2101      	movs	r1, #1
 8002108:	4618      	mov	r0, r3
 800210a:	f004 fd5b 	bl	8006bc4 <USB_SetCurrentMode>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e017      	b.n	8002150 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7c1a      	ldrb	r2, [r3, #16]
 8002128:	f88d 2000 	strb.w	r2, [sp]
 800212c:	3304      	adds	r3, #4
 800212e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002130:	f004 fefe 	bl	8006f30 <USB_HostInit>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e004      	b.n	8002150 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b08b      	sub	sp, #44	@ 0x2c
 800215c:	af04      	add	r7, sp, #16
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4603      	mov	r3, r0
 8002168:	70fb      	strb	r3, [r7, #3]
 800216a:	460b      	mov	r3, r1
 800216c:	70bb      	strb	r3, [r7, #2]
 800216e:	4613      	mov	r3, r2
 8002170:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002172:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002174:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_HCD_HC_Init+0x2c>
 8002180:	2302      	movs	r3, #2
 8002182:	e09d      	b.n	80022c0 <HAL_HCD_HC_Init+0x168>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3319      	adds	r3, #25
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3314      	adds	r3, #20
 80021b0:	787a      	ldrb	r2, [r7, #1]
 80021b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3315      	adds	r3, #21
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	3326      	adds	r3, #38	@ 0x26
 80021d8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80021dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	78bb      	ldrb	r3, [r7, #2]
 80021e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021e6:	b2d8      	uxtb	r0, r3
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	3316      	adds	r3, #22
 80021f6:	4602      	mov	r2, r0
 80021f8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	4619      	mov	r1, r3
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fbc8 	bl	8002994 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002204:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002208:	2b00      	cmp	r3, #0
 800220a:	da0a      	bge.n	8002222 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	3317      	adds	r3, #23
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e009      	b.n	8002236 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	3317      	adds	r3, #23
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f004 ffdc 	bl	80071f8 <USB_GetHostSpeed>
 8002240:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002242:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002246:	2b01      	cmp	r3, #1
 8002248:	d10b      	bne.n	8002262 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800224a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <HAL_HCD_HC_Init+0x10a>
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d104      	bne.n	8002262 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2bbc      	cmp	r3, #188	@ 0xbc
 800225c:	d901      	bls.n	8002262 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800225e:	23bc      	movs	r3, #188	@ 0xbc
 8002260:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	3318      	adds	r3, #24
 8002272:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002276:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	b298      	uxth	r0, r3
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3328      	adds	r3, #40	@ 0x28
 800228c:	4602      	mov	r2, r0
 800228e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	b29b      	uxth	r3, r3
 8002298:	787c      	ldrb	r4, [r7, #1]
 800229a:	78ba      	ldrb	r2, [r7, #2]
 800229c:	78f9      	ldrb	r1, [r7, #3]
 800229e:	9302      	str	r3, [sp, #8]
 80022a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	4623      	mov	r3, r4
 80022ae:	f004 ffcb 	bl	8007248 <USB_HC_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80022be:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}

080022c8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_HCD_HC_Halt+0x1e>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e00f      	b.n	8002306 <HAL_HCD_HC_Halt+0x3e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f005 fb5d 	bl	80079b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4603      	mov	r3, r0
 8002320:	70fb      	strb	r3, [r7, #3]
 8002322:	460b      	mov	r3, r1
 8002324:	70bb      	strb	r3, [r7, #2]
 8002326:	4613      	mov	r3, r2
 8002328:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	3317      	adds	r3, #23
 800233a:	78ba      	ldrb	r2, [r7, #2]
 800233c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	3326      	adds	r3, #38	@ 0x26
 800234e:	787a      	ldrb	r2, [r7, #1]
 8002350:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002352:	7c3b      	ldrb	r3, [r7, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d114      	bne.n	8002382 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	332a      	adds	r3, #42	@ 0x2a
 8002368:	2203      	movs	r2, #3
 800236a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	3319      	adds	r3, #25
 800237c:	7f3a      	ldrb	r2, [r7, #28]
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e009      	b.n	8002396 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	332a      	adds	r3, #42	@ 0x2a
 8002392:	2202      	movs	r2, #2
 8002394:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002396:	787b      	ldrb	r3, [r7, #1]
 8002398:	2b03      	cmp	r3, #3
 800239a:	f200 8102 	bhi.w	80025a2 <HAL_HCD_HC_SubmitRequest+0x292>
 800239e:	a201      	add	r2, pc, #4	@ (adr r2, 80023a4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	0800258d 	.word	0x0800258d
 80023ac:	08002479 	.word	0x08002479
 80023b0:	08002503 	.word	0x08002503
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80023b4:	7c3b      	ldrb	r3, [r7, #16]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	f040 80f5 	bne.w	80025a6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80023bc:	78bb      	ldrb	r3, [r7, #2]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d12d      	bne.n	800241e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80023c2:	8b3b      	ldrh	r3, [r7, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d109      	bne.n	80023dc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	333d      	adds	r3, #61	@ 0x3d
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	333d      	adds	r3, #61	@ 0x3d
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10a      	bne.n	8002408 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	332a      	adds	r3, #42	@ 0x2a
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002406:	e0ce      	b.n	80025a6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	332a      	adds	r3, #42	@ 0x2a
 8002418:	2202      	movs	r2, #2
 800241a:	701a      	strb	r2, [r3, #0]
      break;
 800241c:	e0c3      	b.n	80025a6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	331a      	adds	r3, #26
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	f040 80b8 	bne.w	80025a6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	333c      	adds	r3, #60	@ 0x3c
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	332a      	adds	r3, #42	@ 0x2a
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
      break;
 8002460:	e0a1      	b.n	80025a6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	332a      	adds	r3, #42	@ 0x2a
 8002472:	2202      	movs	r2, #2
 8002474:	701a      	strb	r2, [r3, #0]
      break;
 8002476:	e096      	b.n	80025a6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002478:	78bb      	ldrb	r3, [r7, #2]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d120      	bne.n	80024c0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	333d      	adds	r3, #61	@ 0x3d
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	332a      	adds	r3, #42	@ 0x2a
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024a8:	e07e      	b.n	80025a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	332a      	adds	r3, #42	@ 0x2a
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]
      break;
 80024be:	e073      	b.n	80025a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	333c      	adds	r3, #60	@ 0x3c
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10a      	bne.n	80024ec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	332a      	adds	r3, #42	@ 0x2a
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
      break;
 80024ea:	e05d      	b.n	80025a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	332a      	adds	r3, #42	@ 0x2a
 80024fc:	2202      	movs	r2, #2
 80024fe:	701a      	strb	r2, [r3, #0]
      break;
 8002500:	e052      	b.n	80025a8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002502:	78bb      	ldrb	r3, [r7, #2]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d120      	bne.n	800254a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	333d      	adds	r3, #61	@ 0x3d
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10a      	bne.n	8002534 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	332a      	adds	r3, #42	@ 0x2a
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002532:	e039      	b.n	80025a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	332a      	adds	r3, #42	@ 0x2a
 8002544:	2202      	movs	r2, #2
 8002546:	701a      	strb	r2, [r3, #0]
      break;
 8002548:	e02e      	b.n	80025a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	333c      	adds	r3, #60	@ 0x3c
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10a      	bne.n	8002576 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	332a      	adds	r3, #42	@ 0x2a
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
      break;
 8002574:	e018      	b.n	80025a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	332a      	adds	r3, #42	@ 0x2a
 8002586:	2202      	movs	r2, #2
 8002588:	701a      	strb	r2, [r3, #0]
      break;
 800258a:	e00d      	b.n	80025a8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	332a      	adds	r3, #42	@ 0x2a
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
      break;
 80025a0:	e002      	b.n	80025a8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80025a2:	bf00      	nop
 80025a4:	e000      	b.n	80025a8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80025a6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	332c      	adds	r3, #44	@ 0x2c
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	8b39      	ldrh	r1, [r7, #24]
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4403      	add	r3, r0
 80025cc:	3334      	adds	r3, #52	@ 0x34
 80025ce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	334c      	adds	r3, #76	@ 0x4c
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	3338      	adds	r3, #56	@ 0x38
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	3315      	adds	r3, #21
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	334d      	adds	r3, #77	@ 0x4d
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	3310      	adds	r3, #16
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	1d19      	adds	r1, r3, #4
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	799b      	ldrb	r3, [r3, #6]
 800263a:	461a      	mov	r2, r3
 800263c:	f004 ff30 	bl	80074a0 <USB_HC_StartXfer>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop

0800264c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f004 fc24 	bl	8006eb0 <USB_GetMode>
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	f040 80fb 	bne.w	8002866 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f004 fbe7 	bl	8006e48 <USB_ReadInterrupts>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80f1 	beq.w	8002864 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fbde 	bl	8006e48 <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002692:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002696:	d104      	bne.n	80026a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80026a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fbce 	bl	8006e48 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026b6:	d104      	bne.n	80026c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80026c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 fbbe 	bl	8006e48 <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026d6:	d104      	bne.n	80026e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80026e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 fbae 	bl	8006e48 <USB_ReadInterrupts>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d103      	bne.n	80026fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2202      	movs	r2, #2
 80026fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f004 fba0 	bl	8006e48 <USB_ReadInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800270e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002712:	d120      	bne.n	8002756 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800271c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d113      	bne.n	8002756 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800272e:	2110      	movs	r1, #16
 8002730:	6938      	ldr	r0, [r7, #16]
 8002732:	f004 fa93 	bl	8006c5c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002736:	6938      	ldr	r0, [r7, #16]
 8002738:	f004 fac2 	bl	8006cc0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7a5b      	ldrb	r3, [r3, #9]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d105      	bne.n	8002750 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2101      	movs	r1, #1
 800274a:	4618      	mov	r0, r3
 800274c:	f004 fcb4 	bl	80070b8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f007 fc7b 	bl	800a04c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f004 fb74 	bl	8006e48 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002766:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800276a:	d102      	bne.n	8002772 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f001 fd33 	bl	80041d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f004 fb66 	bl	8006e48 <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b08      	cmp	r3, #8
 8002784:	d106      	bne.n	8002794 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f007 fc44 	bl	800a014 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2208      	movs	r2, #8
 8002792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f004 fb55 	bl	8006e48 <USB_ReadInterrupts>
 800279e:	4603      	mov	r3, r0
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027a8:	d139      	bne.n	800281e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f005 f8f0 	bl	8007994 <USB_HC_ReadInterrupt>
 80027b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	e025      	b.n	8002808 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d018      	beq.n	8002802 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027e6:	d106      	bne.n	80027f6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f905 	bl	80029fe <HCD_HC_IN_IRQHandler>
 80027f4:	e005      	b.n	8002802 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4619      	mov	r1, r3
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 ff67 	bl	80036d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3301      	adds	r3, #1
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	795b      	ldrb	r3, [r3, #5]
 800280c:	461a      	mov	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	4293      	cmp	r3, r2
 8002812:	d3d3      	bcc.n	80027bc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800281c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f004 fb10 	bl	8006e48 <USB_ReadInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b10      	cmp	r3, #16
 8002830:	d101      	bne.n	8002836 <HAL_HCD_IRQHandler+0x1ea>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_HCD_IRQHandler+0x1ec>
 8002836:	2300      	movs	r3, #0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d014      	beq.n	8002866 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0210 	bic.w	r2, r2, #16
 800284a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f001 fbe4 	bl	800401a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699a      	ldr	r2, [r3, #24]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0210 	orr.w	r2, r2, #16
 8002860:	619a      	str	r2, [r3, #24]
 8002862:	e000      	b.n	8002866 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002864:	bf00      	nop
    }
  }
}
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_HCD_Start+0x16>
 800287e:	2302      	movs	r3, #2
 8002880:	e013      	b.n	80028aa <HAL_HCD_Start+0x3e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2101      	movs	r1, #1
 8002890:	4618      	mov	r0, r3
 8002892:	f004 fc78 	bl	8007186 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f004 f970 	bl	8006b80 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_HCD_Stop+0x16>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e00d      	b.n	80028e4 <HAL_HCD_Stop+0x32>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f005 f9cb 	bl	8007c70 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 fc1a 	bl	8007132 <USB_ResetPort>
 80028fe:	4603      	mov	r3, r0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334c      	adds	r3, #76	@ 0x4c
 8002924:	781b      	ldrb	r3, [r3, #0]
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	3338      	adds	r3, #56	@ 0x38
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f004 fc5c 	bl	8007226 <USB_GetCurrentFrame>
 800296e:	4603      	mov	r3, r0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f004 fc37 	bl	80071f8 <USB_GetHostSpeed>
 800298a:	4603      	mov	r3, r0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	331a      	adds	r3, #26
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	331b      	adds	r3, #27
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3325      	adds	r3, #37	@ 0x25
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3324      	adds	r3, #36	@ 0x24
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 fa26 	bl	8006e6e <USB_ReadChInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d11a      	bne.n	8002a62 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	334d      	adds	r3, #77	@ 0x4d
 8002a4e:	2207      	movs	r2, #7
 8002a50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f004 ffab 	bl	80079b6 <USB_HC_Halt>
 8002a60:	e09e      	b.n	8002ba0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f004 f9ff 	bl	8006e6e <USB_ReadChInterrupts>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a7a:	d11b      	bne.n	8002ab4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	334d      	adds	r3, #77	@ 0x4d
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 ff82 	bl	80079b6 <USB_HC_Halt>
 8002ab2:	e075      	b.n	8002ba0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f004 f9d6 	bl	8006e6e <USB_ReadChInterrupts>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d11a      	bne.n	8002b02 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2308      	movs	r3, #8
 8002adc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	334d      	adds	r3, #77	@ 0x4d
 8002aee:	2206      	movs	r2, #6
 8002af0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f004 ff5b 	bl	80079b6 <USB_HC_Halt>
 8002b00:	e04e      	b.n	8002ba0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 f9af 	bl	8006e6e <USB_ReadChInterrupts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1a:	d11b      	bne.n	8002b54 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	334d      	adds	r3, #77	@ 0x4d
 8002b40:	2209      	movs	r2, #9
 8002b42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f004 ff32 	bl	80079b6 <USB_HC_Halt>
 8002b52:	e025      	b.n	8002ba0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 f986 	bl	8006e6e <USB_ReadChInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b68:	2b80      	cmp	r3, #128	@ 0x80
 8002b6a:	d119      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	334d      	adds	r3, #77	@ 0x4d
 8002b8e:	2207      	movs	r2, #7
 8002b90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 ff0b 	bl	80079b6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 f960 	bl	8006e6e <USB_ReadChInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bb8:	d112      	bne.n	8002be0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 fef7 	bl	80079b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bda:	6093      	str	r3, [r2, #8]
 8002bdc:	f000 bd75 	b.w	80036ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f004 f940 	bl	8006e6e <USB_ReadChInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	f040 8128 	bne.w	8002e4a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c06:	461a      	mov	r2, r3
 8002c08:	2320      	movs	r3, #32
 8002c0a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	331b      	adds	r3, #27
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d119      	bne.n	8002c56 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	331b      	adds	r3, #27
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	0151      	lsls	r1, r2, #5
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	440a      	add	r2, r1
 8002c4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c54:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	799b      	ldrb	r3, [r3, #6]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d01b      	beq.n	8002c96 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3330      	adds	r3, #48	@ 0x30
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	1ac9      	subs	r1, r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4403      	add	r3, r0
 8002c92:	3338      	adds	r3, #56	@ 0x38
 8002c94:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	334d      	adds	r3, #77	@ 0x4d
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3344      	adds	r3, #68	@ 0x44
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2301      	movs	r3, #1
 8002cce:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3326      	adds	r3, #38	@ 0x26
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3326      	adds	r3, #38	@ 0x26
 8002cf6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d110      	bne.n	8002d1e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 fe56 	bl	80079b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d16:	461a      	mov	r2, r3
 8002d18:	2310      	movs	r3, #16
 8002d1a:	6093      	str	r3, [r2, #8]
 8002d1c:	e03d      	b.n	8002d9a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3326      	adds	r3, #38	@ 0x26
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d00a      	beq.n	8002d4a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	3326      	adds	r3, #38	@ 0x26
 8002d44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d127      	bne.n	8002d9a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	0151      	lsls	r1, r2, #5
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	440a      	add	r2, r1
 8002d60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d68:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	334c      	adds	r3, #76	@ 0x4c
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	334c      	adds	r3, #76	@ 0x4c
 8002d8e:	781a      	ldrb	r2, [r3, #0]
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	4619      	mov	r1, r3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f007 f967 	bl	800a068 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	799b      	ldrb	r3, [r3, #6]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d13b      	bne.n	8002e1a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	3338      	adds	r3, #56	@ 0x38
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4403      	add	r3, r0
 8002dc2:	3328      	adds	r3, #40	@ 0x28
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	440b      	add	r3, r1
 8002dc8:	1e59      	subs	r1, r3, #1
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4403      	add	r3, r0
 8002dd8:	3328      	adds	r3, #40	@ 0x28
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8470 	beq.w	80036ca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	333c      	adds	r3, #60	@ 0x3c
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	f083 0301 	eor.w	r3, r3, #1
 8002e02:	b2d8      	uxtb	r0, r3
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	333c      	adds	r3, #60	@ 0x3c
 8002e12:	4602      	mov	r2, r0
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	f000 bc58 	b.w	80036ca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	333c      	adds	r3, #60	@ 0x3c
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	f083 0301 	eor.w	r3, r3, #1
 8002e32:	b2d8      	uxtb	r0, r3
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	333c      	adds	r3, #60	@ 0x3c
 8002e42:	4602      	mov	r2, r0
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	f000 bc40 	b.w	80036ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f004 f80b 	bl	8006e6e <USB_ReadChInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d131      	bne.n	8002ec6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2320      	movs	r3, #32
 8002e72:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	331a      	adds	r3, #26
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	f040 841f 	bne.w	80036ca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	331b      	adds	r3, #27
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	334d      	adds	r3, #77	@ 0x4d
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f004 fd7a 	bl	80079b6 <USB_HC_Halt>
 8002ec2:	f000 bc02 	b.w	80036ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 ffcd 	bl	8006e6e <USB_ReadChInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	f040 8305 	bne.w	80034ea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eec:	461a      	mov	r2, r3
 8002eee:	2302      	movs	r3, #2
 8002ef0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	334d      	adds	r3, #77	@ 0x4d
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d114      	bne.n	8002f32 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	334d      	adds	r3, #77	@ 0x4d
 8002f18:	2202      	movs	r2, #2
 8002f1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	334c      	adds	r3, #76	@ 0x4c
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e2cc      	b.n	80034cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	334d      	adds	r3, #77	@ 0x4d
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b06      	cmp	r3, #6
 8002f46:	d114      	bne.n	8002f72 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	334d      	adds	r3, #77	@ 0x4d
 8002f58:	2202      	movs	r2, #2
 8002f5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	334c      	adds	r3, #76	@ 0x4c
 8002f6c:	2205      	movs	r2, #5
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e2ac      	b.n	80034cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	334d      	adds	r3, #77	@ 0x4d
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b07      	cmp	r3, #7
 8002f86:	d00b      	beq.n	8002fa0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	334d      	adds	r3, #77	@ 0x4d
 8002f98:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f9a:	2b09      	cmp	r3, #9
 8002f9c:	f040 80a6 	bne.w	80030ec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	334d      	adds	r3, #77	@ 0x4d
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3344      	adds	r3, #68	@ 0x44
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	1c59      	adds	r1, r3, #1
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4403      	add	r3, r0
 8002fd4:	3344      	adds	r3, #68	@ 0x44
 8002fd6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3344      	adds	r3, #68	@ 0x44
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d943      	bls.n	8003076 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3344      	adds	r3, #68	@ 0x44
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	331a      	adds	r3, #26
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d123      	bne.n	8003060 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	331b      	adds	r3, #27
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	331c      	adds	r3, #28
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	0151      	lsls	r1, r2, #5
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	440a      	add	r2, r1
 8003056:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800305a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800305e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	334c      	adds	r3, #76	@ 0x4c
 8003070:	2204      	movs	r2, #4
 8003072:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003074:	e229      	b.n	80034ca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	334c      	adds	r3, #76	@ 0x4c
 8003086:	2202      	movs	r2, #2
 8003088:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	3326      	adds	r3, #38	@ 0x26
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3326      	adds	r3, #38	@ 0x26
 80030b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	f040 8209 	bne.w	80034ca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e4:	461a      	mov	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030ea:	e1ee      	b.n	80034ca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	334d      	adds	r3, #77	@ 0x4d
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b05      	cmp	r3, #5
 8003100:	f040 80c8 	bne.w	8003294 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	334d      	adds	r3, #77	@ 0x4d
 8003114:	2202      	movs	r2, #2
 8003116:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	331b      	adds	r3, #27
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	f040 81ce 	bne.w	80034cc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3326      	adds	r3, #38	@ 0x26
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b03      	cmp	r3, #3
 8003144:	d16b      	bne.n	800321e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3348      	adds	r3, #72	@ 0x48
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	1c59      	adds	r1, r3, #1
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4403      	add	r3, r0
 8003166:	3348      	adds	r3, #72	@ 0x48
 8003168:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3348      	adds	r3, #72	@ 0x48
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d943      	bls.n	8003208 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3348      	adds	r3, #72	@ 0x48
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	331b      	adds	r3, #27
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	3344      	adds	r3, #68	@ 0x44
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d809      	bhi.n	80031d2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	331c      	adds	r3, #28
 80031ce:	2201      	movs	r2, #1
 80031d0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	0151      	lsls	r1, r2, #5
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	440a      	add	r2, r1
 80031e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	334c      	adds	r3, #76	@ 0x4c
 8003202:	2204      	movs	r2, #4
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	e014      	b.n	8003232 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	334c      	adds	r3, #76	@ 0x4c
 8003218:	2202      	movs	r2, #2
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e009      	b.n	8003232 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	334c      	adds	r3, #76	@ 0x4c
 800322e:	2202      	movs	r2, #2
 8003230:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3326      	adds	r3, #38	@ 0x26
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00b      	beq.n	8003260 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	3326      	adds	r3, #38	@ 0x26
 8003258:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800325a:	2b02      	cmp	r3, #2
 800325c:	f040 8136 	bne.w	80034cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003276:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800327e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800328c:	461a      	mov	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e11b      	b.n	80034cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	334d      	adds	r3, #77	@ 0x4d
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	f040 8081 	bne.w	80033ae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	334d      	adds	r3, #77	@ 0x4d
 80032bc:	2202      	movs	r2, #2
 80032be:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	331b      	adds	r3, #27
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	f040 80fa 	bne.w	80034cc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	334c      	adds	r3, #76	@ 0x4c
 80032e8:	2202      	movs	r2, #2
 80032ea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	0151      	lsls	r1, r2, #5
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	440a      	add	r2, r1
 8003302:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	0151      	lsls	r1, r2, #5
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	440a      	add	r2, r1
 8003322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800332a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	0151      	lsls	r1, r2, #5
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	440a      	add	r2, r1
 8003342:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003346:	f023 0320 	bic.w	r3, r3, #32
 800334a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	3326      	adds	r3, #38	@ 0x26
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	3326      	adds	r3, #38	@ 0x26
 8003372:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003374:	2b02      	cmp	r3, #2
 8003376:	f040 80a9 	bne.w	80034cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003390:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003398:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a6:	461a      	mov	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	e08e      	b.n	80034cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	334d      	adds	r3, #77	@ 0x4d
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d143      	bne.n	800344c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	334d      	adds	r3, #77	@ 0x4d
 80033d4:	2202      	movs	r2, #2
 80033d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	334c      	adds	r3, #76	@ 0x4c
 80033e8:	2202      	movs	r2, #2
 80033ea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	3326      	adds	r3, #38	@ 0x26
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3326      	adds	r3, #38	@ 0x26
 8003412:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003414:	2b02      	cmp	r3, #2
 8003416:	d159      	bne.n	80034cc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800342e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003436:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003444:	461a      	mov	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e03f      	b.n	80034cc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	334d      	adds	r3, #77	@ 0x4d
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b08      	cmp	r3, #8
 8003460:	d126      	bne.n	80034b0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	334d      	adds	r3, #77	@ 0x4d
 8003472:	2202      	movs	r2, #2
 8003474:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	3344      	adds	r3, #68	@ 0x44
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1c59      	adds	r1, r3, #1
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4403      	add	r3, r0
 8003496:	3344      	adds	r3, #68	@ 0x44
 8003498:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	334c      	adds	r3, #76	@ 0x4c
 80034aa:	2204      	movs	r2, #4
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e00d      	b.n	80034cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	334d      	adds	r3, #77	@ 0x4d
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	f000 8100 	beq.w	80036c8 <HCD_HC_IN_IRQHandler+0xcca>
 80034c8:	e000      	b.n	80034cc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034ca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	334c      	adds	r3, #76	@ 0x4c
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f006 fdc0 	bl	800a068 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034e8:	e0ef      	b.n	80036ca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f003 fcbb 	bl	8006e6e <USB_ReadChInterrupts>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fe:	2b40      	cmp	r3, #64	@ 0x40
 8003500:	d12f      	bne.n	8003562 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4413      	add	r3, r2
 800350a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800350e:	461a      	mov	r2, r3
 8003510:	2340      	movs	r3, #64	@ 0x40
 8003512:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	334d      	adds	r3, #77	@ 0x4d
 8003524:	2205      	movs	r2, #5
 8003526:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	331a      	adds	r3, #26
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3344      	adds	r3, #68	@ 0x44
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f004 fa2b 	bl	80079b6 <USB_HC_Halt>
 8003560:	e0b3      	b.n	80036ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f003 fc7f 	bl	8006e6e <USB_ReadChInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b10      	cmp	r3, #16
 8003578:	f040 80a7 	bne.w	80036ca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3326      	adds	r3, #38	@ 0x26
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b03      	cmp	r3, #3
 8003590:	d11b      	bne.n	80035ca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3344      	adds	r3, #68	@ 0x44
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	334d      	adds	r3, #77	@ 0x4d
 80035b6:	2204      	movs	r2, #4
 80035b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f004 f9f7 	bl	80079b6 <USB_HC_Halt>
 80035c8:	e03f      	b.n	800364a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	3326      	adds	r3, #38	@ 0x26
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3326      	adds	r3, #38	@ 0x26
 80035f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d129      	bne.n	800364a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3344      	adds	r3, #68	@ 0x44
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	799b      	ldrb	r3, [r3, #6]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HCD_HC_IN_IRQHandler+0xc2a>
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	331b      	adds	r3, #27
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d110      	bne.n	800364a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	334d      	adds	r3, #77	@ 0x4d
 8003638:	2204      	movs	r2, #4
 800363a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f004 f9b6 	bl	80079b6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	331b      	adds	r3, #27
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d129      	bne.n	80036b4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	331b      	adds	r3, #27
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	0151      	lsls	r1, r2, #5
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	440a      	add	r2, r1
 800368a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800368e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003692:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	0151      	lsls	r1, r2, #5
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	440a      	add	r2, r1
 80036aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036ae:	f043 0320 	orr.w	r3, r3, #32
 80036b2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c0:	461a      	mov	r2, r3
 80036c2:	2310      	movs	r3, #16
 80036c4:	6093      	str	r3, [r2, #8]
 80036c6:	e000      	b.n	80036ca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80036c8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 fbbd 	bl	8006e6e <USB_ReadChInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d11b      	bne.n	8003736 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4413      	add	r3, r2
 8003706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800370a:	461a      	mov	r2, r3
 800370c:	2304      	movs	r3, #4
 800370e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	334d      	adds	r3, #77	@ 0x4d
 8003720:	2207      	movs	r2, #7
 8003722:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f004 f942 	bl	80079b6 <USB_HC_Halt>
 8003732:	f000 bc6f 	b.w	8004014 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f003 fb95 	bl	8006e6e <USB_ReadChInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b20      	cmp	r3, #32
 800374c:	f040 8082 	bne.w	8003854 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800375c:	461a      	mov	r2, r3
 800375e:	2320      	movs	r3, #32
 8003760:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3319      	adds	r3, #25
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d124      	bne.n	80037c2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3319      	adds	r3, #25
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	334c      	adds	r3, #76	@ 0x4c
 800379c:	2202      	movs	r2, #2
 800379e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	334d      	adds	r3, #77	@ 0x4d
 80037b0:	2203      	movs	r2, #3
 80037b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f004 f8fa 	bl	80079b6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	331a      	adds	r3, #26
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	f040 841d 	bne.w	8004014 <HCD_HC_OUT_IRQHandler+0x944>
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	331b      	adds	r3, #27
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f040 8411 	bne.w	8004014 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	3326      	adds	r3, #38	@ 0x26
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d009      	beq.n	800381c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	331b      	adds	r3, #27
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	334d      	adds	r3, #77	@ 0x4d
 800382c:	2203      	movs	r2, #3
 800382e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f004 f8bc 	bl	80079b6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3344      	adds	r3, #68	@ 0x44
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e3df      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f003 fb06 	bl	8006e6e <USB_ReadChInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800386c:	d111      	bne.n	8003892 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800387a:	461a      	mov	r2, r3
 800387c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003880:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f004 f893 	bl	80079b6 <USB_HC_Halt>
 8003890:	e3c0      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f003 fae7 	bl	8006e6e <USB_ReadChInterrupts>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d168      	bne.n	800397c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	3344      	adds	r3, #68	@ 0x44
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f003 fad1 	bl	8006e6e <USB_ReadChInterrupts>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d2:	2b40      	cmp	r3, #64	@ 0x40
 80038d4:	d112      	bne.n	80038fc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	3319      	adds	r3, #25
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f6:	461a      	mov	r2, r3
 80038f8:	2340      	movs	r3, #64	@ 0x40
 80038fa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	331b      	adds	r3, #27
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d019      	beq.n	8003946 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	331b      	adds	r3, #27
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003926:	78fb      	ldrb	r3, [r7, #3]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4413      	add	r3, r2
 800392e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	0151      	lsls	r1, r2, #5
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	440a      	add	r2, r1
 800393c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003944:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003952:	461a      	mov	r2, r3
 8003954:	2301      	movs	r3, #1
 8003956:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	334d      	adds	r3, #77	@ 0x4d
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f004 f81e 	bl	80079b6 <USB_HC_Halt>
 800397a:	e34b      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f003 fa72 	bl	8006e6e <USB_ReadChInterrupts>
 800398a:	4603      	mov	r3, r0
 800398c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003990:	2b40      	cmp	r3, #64	@ 0x40
 8003992:	d139      	bne.n	8003a08 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	334d      	adds	r3, #77	@ 0x4d
 80039a4:	2205      	movs	r2, #5
 80039a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	331a      	adds	r3, #26
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	3319      	adds	r3, #25
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	3344      	adds	r3, #68	@ 0x44
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f003 ffe1 	bl	80079b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a00:	461a      	mov	r2, r3
 8003a02:	2340      	movs	r3, #64	@ 0x40
 8003a04:	6093      	str	r3, [r2, #8]
 8003a06:	e305      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 fa2c 	bl	8006e6e <USB_ReadChInterrupts>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d11a      	bne.n	8003a56 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2308      	movs	r3, #8
 8003a30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	334d      	adds	r3, #77	@ 0x4d
 8003a42:	2206      	movs	r2, #6
 8003a44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f003 ffb1 	bl	80079b6 <USB_HC_Halt>
 8003a54:	e2de      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f003 fa05 	bl	8006e6e <USB_ReadChInterrupts>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d144      	bne.n	8003af8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3344      	adds	r3, #68	@ 0x44
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	334d      	adds	r3, #77	@ 0x4d
 8003a92:	2204      	movs	r2, #4
 8003a94:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3319      	adds	r3, #25
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d114      	bne.n	8003ad6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	3318      	adds	r3, #24
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3319      	adds	r3, #25
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f003 ff69 	bl	80079b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af0:	461a      	mov	r2, r3
 8003af2:	2310      	movs	r3, #16
 8003af4:	6093      	str	r3, [r2, #8]
 8003af6:	e28d      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f003 f9b4 	bl	8006e6e <USB_ReadChInterrupts>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0c:	2b80      	cmp	r3, #128	@ 0x80
 8003b0e:	d169      	bne.n	8003be4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	799b      	ldrb	r3, [r3, #6]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d111      	bne.n	8003b3c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	334d      	adds	r3, #77	@ 0x4d
 8003b28:	2207      	movs	r2, #7
 8003b2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f003 ff3e 	bl	80079b6 <USB_HC_Halt>
 8003b3a:	e049      	b.n	8003bd0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	3344      	adds	r3, #68	@ 0x44
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1c59      	adds	r1, r3, #1
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4403      	add	r3, r0
 8003b5c:	3344      	adds	r3, #68	@ 0x44
 8003b5e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3344      	adds	r3, #68	@ 0x44
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d922      	bls.n	8003bbc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	3344      	adds	r3, #68	@ 0x44
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	334c      	adds	r3, #76	@ 0x4c
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	334c      	adds	r3, #76	@ 0x4c
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f006 fa57 	bl	800a068 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bba:	e009      	b.n	8003bd0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	334c      	adds	r3, #76	@ 0x4c
 8003bcc:	2202      	movs	r2, #2
 8003bce:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2380      	movs	r3, #128	@ 0x80
 8003be0:	6093      	str	r3, [r2, #8]
 8003be2:	e217      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f003 f93e 	bl	8006e6e <USB_ReadChInterrupts>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bfc:	d11b      	bne.n	8003c36 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	334d      	adds	r3, #77	@ 0x4d
 8003c0e:	2209      	movs	r2, #9
 8003c10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f003 fecb 	bl	80079b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c32:	6093      	str	r3, [r2, #8]
 8003c34:	e1ee      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f003 f915 	bl	8006e6e <USB_ReadChInterrupts>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	f040 81df 	bne.w	800400e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2302      	movs	r3, #2
 8003c60:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	334d      	adds	r3, #77	@ 0x4d
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	f040 8093 	bne.w	8003da0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	334d      	adds	r3, #77	@ 0x4d
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	334c      	adds	r3, #76	@ 0x4c
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	3326      	adds	r3, #38	@ 0x26
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d00b      	beq.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003cb8:	78fa      	ldrb	r2, [r7, #3]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3326      	adds	r3, #38	@ 0x26
 8003cc8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	f040 8190 	bne.w	8003ff0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	799b      	ldrb	r3, [r3, #6]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d115      	bne.n	8003d04 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	333d      	adds	r3, #61	@ 0x3d
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	f083 0301 	eor.w	r3, r3, #1
 8003cf0:	b2d8      	uxtb	r0, r3
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	333d      	adds	r3, #61	@ 0x3d
 8003d00:	4602      	mov	r2, r0
 8003d02:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	799b      	ldrb	r3, [r3, #6]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	f040 8171 	bne.w	8003ff0 <HCD_HC_OUT_IRQHandler+0x920>
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	3334      	adds	r3, #52	@ 0x34
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8165 	beq.w	8003ff0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	3334      	adds	r3, #52	@ 0x34
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4403      	add	r3, r0
 8003d46:	3328      	adds	r3, #40	@ 0x28
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	440b      	add	r3, r1
 8003d4c:	1e59      	subs	r1, r3, #1
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4403      	add	r3, r0
 8003d5c:	3328      	adds	r3, #40	@ 0x28
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d64:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 813f 	beq.w	8003ff0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	333d      	adds	r3, #61	@ 0x3d
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	f083 0301 	eor.w	r3, r3, #1
 8003d8a:	b2d8      	uxtb	r0, r3
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	333d      	adds	r3, #61	@ 0x3d
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	e127      	b.n	8003ff0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	334d      	adds	r3, #77	@ 0x4d
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d120      	bne.n	8003df8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	334d      	adds	r3, #77	@ 0x4d
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	331b      	adds	r3, #27
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	f040 8107 	bne.w	8003ff0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	334c      	adds	r3, #76	@ 0x4c
 8003df2:	2202      	movs	r2, #2
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e0fb      	b.n	8003ff0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	334d      	adds	r3, #77	@ 0x4d
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d13a      	bne.n	8003e84 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	334d      	adds	r3, #77	@ 0x4d
 8003e1e:	2202      	movs	r2, #2
 8003e20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	334c      	adds	r3, #76	@ 0x4c
 8003e32:	2202      	movs	r2, #2
 8003e34:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	331b      	adds	r3, #27
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	f040 80d1 	bne.w	8003ff0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	331b      	adds	r3, #27
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e80:	6053      	str	r3, [r2, #4]
 8003e82:	e0b5      	b.n	8003ff0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	334d      	adds	r3, #77	@ 0x4d
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b05      	cmp	r3, #5
 8003e98:	d114      	bne.n	8003ec4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	334d      	adds	r3, #77	@ 0x4d
 8003eaa:	2202      	movs	r2, #2
 8003eac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	334c      	adds	r3, #76	@ 0x4c
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e095      	b.n	8003ff0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	334d      	adds	r3, #77	@ 0x4d
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b06      	cmp	r3, #6
 8003ed8:	d114      	bne.n	8003f04 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	334d      	adds	r3, #77	@ 0x4d
 8003eea:	2202      	movs	r2, #2
 8003eec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	334c      	adds	r3, #76	@ 0x4c
 8003efe:	2205      	movs	r2, #5
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e075      	b.n	8003ff0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	334d      	adds	r3, #77	@ 0x4d
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b07      	cmp	r3, #7
 8003f18:	d00a      	beq.n	8003f30 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	334d      	adds	r3, #77	@ 0x4d
 8003f2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f2c:	2b09      	cmp	r3, #9
 8003f2e:	d170      	bne.n	8004012 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f30:	78fa      	ldrb	r2, [r7, #3]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	334d      	adds	r3, #77	@ 0x4d
 8003f40:	2202      	movs	r2, #2
 8003f42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	3344      	adds	r3, #68	@ 0x44
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	1c59      	adds	r1, r3, #1
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4403      	add	r3, r0
 8003f64:	3344      	adds	r3, #68	@ 0x44
 8003f66:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	3344      	adds	r3, #68	@ 0x44
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d914      	bls.n	8003fa8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3344      	adds	r3, #68	@ 0x44
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	334c      	adds	r3, #76	@ 0x4c
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fa6:	e022      	b.n	8003fee <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	334c      	adds	r3, #76	@ 0x4c
 8003fb8:	2202      	movs	r2, #2
 8003fba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fd2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fda:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	334c      	adds	r3, #76	@ 0x4c
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f006 f82e 	bl	800a068 <HAL_HCD_HC_NotifyURBChange_Callback>
 800400c:	e002      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004012:	bf00      	nop
  }
}
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b08a      	sub	sp, #40	@ 0x28
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	0c5b      	lsrs	r3, r3, #17
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800404e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d004      	beq.n	8004060 <HCD_RXQLVL_IRQHandler+0x46>
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b05      	cmp	r3, #5
 800405a:	f000 80b6 	beq.w	80041ca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800405e:	e0b7      	b.n	80041d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80b3 	beq.w	80041ce <HCD_RXQLVL_IRQHandler+0x1b4>
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	332c      	adds	r3, #44	@ 0x2c
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80a7 	beq.w	80041ce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	3338      	adds	r3, #56	@ 0x38
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	18d1      	adds	r1, r2, r3
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4613      	mov	r3, r2
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4403      	add	r3, r0
 80040a4:	3334      	adds	r3, #52	@ 0x34
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4299      	cmp	r1, r3
 80040aa:	f200 8083 	bhi.w	80041b4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4613      	mov	r3, r2
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	332c      	adds	r3, #44	@ 0x2c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	b292      	uxth	r2, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	f002 fe65 	bl	8006d98 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4613      	mov	r3, r2
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	332c      	adds	r3, #44	@ 0x2c
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	18d1      	adds	r1, r2, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4613      	mov	r3, r2
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4403      	add	r3, r0
 80040f2:	332c      	adds	r3, #44	@ 0x2c
 80040f4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	3338      	adds	r3, #56	@ 0x38
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	18d1      	adds	r1, r2, r3
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4613      	mov	r3, r2
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4403      	add	r3, r0
 800411a:	3338      	adds	r3, #56	@ 0x38
 800411c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	4413      	add	r3, r2
 8004126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	0cdb      	lsrs	r3, r3, #19
 800412e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004132:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4613      	mov	r3, r2
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	3328      	adds	r3, #40	@ 0x28
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4293      	cmp	r3, r2
 800414c:	d13f      	bne.n	80041ce <HCD_RXQLVL_IRQHandler+0x1b4>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d03c      	beq.n	80041ce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	4413      	add	r3, r2
 800415c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800416a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004172:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	4413      	add	r3, r2
 800417c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004180:	461a      	mov	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	333c      	adds	r3, #60	@ 0x3c
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	f083 0301 	eor.w	r3, r3, #1
 800419c:	b2d8      	uxtb	r0, r3
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	333c      	adds	r3, #60	@ 0x3c
 80041ae:	4602      	mov	r2, r0
 80041b0:	701a      	strb	r2, [r3, #0]
      break;
 80041b2:	e00c      	b.n	80041ce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4613      	mov	r3, r2
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	334c      	adds	r3, #76	@ 0x4c
 80041c4:	2204      	movs	r2, #4
 80041c6:	701a      	strb	r2, [r3, #0]
      break;
 80041c8:	e001      	b.n	80041ce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80041ce:	bf00      	nop
  }
}
 80041d0:	bf00      	nop
 80041d2:	3728      	adds	r7, #40	@ 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004204:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b02      	cmp	r3, #2
 800420e:	d10b      	bne.n	8004228 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b01      	cmp	r3, #1
 8004218:	d102      	bne.n	8004220 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f005 ff08 	bl	800a030 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f043 0302 	orr.w	r3, r3, #2
 8004226:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b08      	cmp	r3, #8
 8004230:	d132      	bne.n	8004298 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f043 0308 	orr.w	r3, r3, #8
 8004238:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b04      	cmp	r3, #4
 8004242:	d126      	bne.n	8004292 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	7a5b      	ldrb	r3, [r3, #9]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d113      	bne.n	8004274 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004252:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004256:	d106      	bne.n	8004266 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2102      	movs	r1, #2
 800425e:	4618      	mov	r0, r3
 8004260:	f002 ff2a 	bl	80070b8 <USB_InitFSLSPClkSel>
 8004264:	e011      	b.n	800428a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2101      	movs	r1, #1
 800426c:	4618      	mov	r0, r3
 800426e:	f002 ff23 	bl	80070b8 <USB_InitFSLSPClkSel>
 8004272:	e00a      	b.n	800428a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	79db      	ldrb	r3, [r3, #7]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d106      	bne.n	800428a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004282:	461a      	mov	r2, r3
 8004284:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004288:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f005 fefa 	bl	800a084 <HAL_HCD_PortEnabled_Callback>
 8004290:	e002      	b.n	8004298 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f005 ff04 	bl	800a0a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b20      	cmp	r3, #32
 80042a0:	d103      	bne.n	80042aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f043 0320 	orr.w	r3, r3, #32
 80042a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042b0:	461a      	mov	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6013      	str	r3, [r2, #0]
}
 80042b6:	bf00      	nop
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e12b      	b.n	800452a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd f936 	bl	8001558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	@ 0x24
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004324:	f001 fa20 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8004328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4a81      	ldr	r2, [pc, #516]	@ (8004534 <HAL_I2C_Init+0x274>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d807      	bhi.n	8004344 <HAL_I2C_Init+0x84>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a80      	ldr	r2, [pc, #512]	@ (8004538 <HAL_I2C_Init+0x278>)
 8004338:	4293      	cmp	r3, r2
 800433a:	bf94      	ite	ls
 800433c:	2301      	movls	r3, #1
 800433e:	2300      	movhi	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e006      	b.n	8004352 <HAL_I2C_Init+0x92>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a7d      	ldr	r2, [pc, #500]	@ (800453c <HAL_I2C_Init+0x27c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	bf94      	ite	ls
 800434c:	2301      	movls	r3, #1
 800434e:	2300      	movhi	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e0e7      	b.n	800452a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4a78      	ldr	r2, [pc, #480]	@ (8004540 <HAL_I2C_Init+0x280>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	0c9b      	lsrs	r3, r3, #18
 8004364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4a6a      	ldr	r2, [pc, #424]	@ (8004534 <HAL_I2C_Init+0x274>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d802      	bhi.n	8004394 <HAL_I2C_Init+0xd4>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3301      	adds	r3, #1
 8004392:	e009      	b.n	80043a8 <HAL_I2C_Init+0xe8>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	4a69      	ldr	r2, [pc, #420]	@ (8004544 <HAL_I2C_Init+0x284>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	099b      	lsrs	r3, r3, #6
 80043a6:	3301      	adds	r3, #1
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80043ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	495c      	ldr	r1, [pc, #368]	@ (8004534 <HAL_I2C_Init+0x274>)
 80043c4:	428b      	cmp	r3, r1
 80043c6:	d819      	bhi.n	80043fc <HAL_I2C_Init+0x13c>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1e59      	subs	r1, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d6:	1c59      	adds	r1, r3, #1
 80043d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043dc:	400b      	ands	r3, r1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <HAL_I2C_Init+0x138>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1e59      	subs	r1, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f0:	3301      	adds	r3, #1
 80043f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f6:	e051      	b.n	800449c <HAL_I2C_Init+0x1dc>
 80043f8:	2304      	movs	r3, #4
 80043fa:	e04f      	b.n	800449c <HAL_I2C_Init+0x1dc>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d111      	bne.n	8004428 <HAL_I2C_Init+0x168>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1e58      	subs	r0, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	440b      	add	r3, r1
 8004412:	fbb0 f3f3 	udiv	r3, r0, r3
 8004416:	3301      	adds	r3, #1
 8004418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441c:	2b00      	cmp	r3, #0
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e012      	b.n	800444e <HAL_I2C_Init+0x18e>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1e58      	subs	r0, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	0099      	lsls	r1, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	fbb0 f3f3 	udiv	r3, r0, r3
 800443e:	3301      	adds	r3, #1
 8004440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_Init+0x196>
 8004452:	2301      	movs	r3, #1
 8004454:	e022      	b.n	800449c <HAL_I2C_Init+0x1dc>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10e      	bne.n	800447c <HAL_I2C_Init+0x1bc>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1e58      	subs	r0, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	460b      	mov	r3, r1
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	440b      	add	r3, r1
 800446c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004470:	3301      	adds	r3, #1
 8004472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800447a:	e00f      	b.n	800449c <HAL_I2C_Init+0x1dc>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	1e58      	subs	r0, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6859      	ldr	r1, [r3, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	0099      	lsls	r1, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004492:	3301      	adds	r3, #1
 8004494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004498:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	6809      	ldr	r1, [r1, #0]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6911      	ldr	r1, [r2, #16]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68d2      	ldr	r2, [r2, #12]
 80044d6:	4311      	orrs	r1, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	430b      	orrs	r3, r1
 80044de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	000186a0 	.word	0x000186a0
 8004538:	001e847f 	.word	0x001e847f
 800453c:	003d08ff 	.word	0x003d08ff
 8004540:	431bde83 	.word	0x431bde83
 8004544:	10624dd3 	.word	0x10624dd3

08004548 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e128      	b.n	80047ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a90      	ldr	r2, [pc, #576]	@ (80047b4 <HAL_I2S_Init+0x26c>)
 8004572:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7fd f837 	bl	80015e8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2202      	movs	r2, #2
 800457e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004590:	f023 030f 	bic.w	r3, r3, #15
 8004594:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2202      	movs	r2, #2
 800459c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d060      	beq.n	8004668 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80045ae:	2310      	movs	r3, #16
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e001      	b.n	80045b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80045b4:	2320      	movs	r3, #32
 80045b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d802      	bhi.n	80045c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80045c6:	2001      	movs	r0, #1
 80045c8:	f001 f9c4 	bl	8005954 <HAL_RCCEx_GetPeriphCLKFreq>
 80045cc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d6:	d125      	bne.n	8004624 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d010      	beq.n	8004602 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	461a      	mov	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	3305      	adds	r3, #5
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	e01f      	b.n	8004642 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	fbb2 f2f3 	udiv	r2, r2, r3
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	461a      	mov	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	3305      	adds	r3, #5
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	e00e      	b.n	8004642 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	fbb2 f2f3 	udiv	r2, r2, r3
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	461a      	mov	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	fbb2 f3f3 	udiv	r3, r2, r3
 800463e:	3305      	adds	r3, #5
 8004640:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4a5c      	ldr	r2, [pc, #368]	@ (80047b8 <HAL_I2S_Init+0x270>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	08db      	lsrs	r3, r3, #3
 800464c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	e003      	b.n	8004670 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004668:	2302      	movs	r3, #2
 800466a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d902      	bls.n	800467c <HAL_I2S_Init+0x134>
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2bff      	cmp	r3, #255	@ 0xff
 800467a:	d907      	bls.n	800468c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004680:	f043 0210 	orr.w	r2, r3, #16
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e08f      	b.n	80047ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	ea42 0103 	orr.w	r1, r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	430a      	orrs	r2, r1
 800469e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80046aa:	f023 030f 	bic.w	r3, r3, #15
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6851      	ldr	r1, [r2, #4]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6892      	ldr	r2, [r2, #8]
 80046b6:	4311      	orrs	r1, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	68d2      	ldr	r2, [r2, #12]
 80046bc:	4311      	orrs	r1, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6992      	ldr	r2, [r2, #24]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d161      	bne.n	800479c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a38      	ldr	r2, [pc, #224]	@ (80047bc <HAL_I2S_Init+0x274>)
 80046dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a37      	ldr	r2, [pc, #220]	@ (80047c0 <HAL_I2S_Init+0x278>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <HAL_I2S_Init+0x1a4>
 80046e8:	4b36      	ldr	r3, [pc, #216]	@ (80047c4 <HAL_I2S_Init+0x27c>)
 80046ea:	e001      	b.n	80046f0 <HAL_I2S_Init+0x1a8>
 80046ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	4932      	ldr	r1, [pc, #200]	@ (80047c0 <HAL_I2S_Init+0x278>)
 80046f8:	428a      	cmp	r2, r1
 80046fa:	d101      	bne.n	8004700 <HAL_I2S_Init+0x1b8>
 80046fc:	4a31      	ldr	r2, [pc, #196]	@ (80047c4 <HAL_I2S_Init+0x27c>)
 80046fe:	e001      	b.n	8004704 <HAL_I2S_Init+0x1bc>
 8004700:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004704:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004708:	f023 030f 	bic.w	r3, r3, #15
 800470c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2b      	ldr	r2, [pc, #172]	@ (80047c0 <HAL_I2S_Init+0x278>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d101      	bne.n	800471c <HAL_I2S_Init+0x1d4>
 8004718:	4b2a      	ldr	r3, [pc, #168]	@ (80047c4 <HAL_I2S_Init+0x27c>)
 800471a:	e001      	b.n	8004720 <HAL_I2S_Init+0x1d8>
 800471c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004720:	2202      	movs	r2, #2
 8004722:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a25      	ldr	r2, [pc, #148]	@ (80047c0 <HAL_I2S_Init+0x278>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d101      	bne.n	8004732 <HAL_I2S_Init+0x1ea>
 800472e:	4b25      	ldr	r3, [pc, #148]	@ (80047c4 <HAL_I2S_Init+0x27c>)
 8004730:	e001      	b.n	8004736 <HAL_I2S_Init+0x1ee>
 8004732:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004742:	d003      	beq.n	800474c <HAL_I2S_Init+0x204>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d103      	bne.n	8004754 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800474c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	e001      	b.n	8004758 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004762:	4313      	orrs	r3, r2
 8004764:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800476c:	4313      	orrs	r3, r2
 800476e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004776:	4313      	orrs	r3, r2
 8004778:	b29a      	uxth	r2, r3
 800477a:	897b      	ldrh	r3, [r7, #10]
 800477c:	4313      	orrs	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004784:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a0d      	ldr	r2, [pc, #52]	@ (80047c0 <HAL_I2S_Init+0x278>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d101      	bne.n	8004794 <HAL_I2S_Init+0x24c>
 8004790:	4b0c      	ldr	r3, [pc, #48]	@ (80047c4 <HAL_I2S_Init+0x27c>)
 8004792:	e001      	b.n	8004798 <HAL_I2S_Init+0x250>
 8004794:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004798:	897a      	ldrh	r2, [r7, #10]
 800479a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	080048bf 	.word	0x080048bf
 80047b8:	cccccccd 	.word	0xcccccccd
 80047bc:	080049d5 	.word	0x080049d5
 80047c0:	40003800 	.word	0x40003800
 80047c4:	40003400 	.word	0x40003400

080047c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	881a      	ldrh	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	1c9a      	adds	r2, r3, #2
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10e      	bne.n	8004858 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004848:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ffb8 	bl	80047c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004858:	bf00      	nop
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004872:	b292      	uxth	r2, r2
 8004874:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	1c9a      	adds	r2, r3, #2
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10e      	bne.n	80048b6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff ff93 	bl	80047dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b086      	sub	sp, #24
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d13a      	bne.n	8004950 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d109      	bne.n	80048f8 <I2S_IRQHandler+0x3a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	d102      	bne.n	80048f8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff ffb4 	bl	8004860 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fe:	2b40      	cmp	r3, #64	@ 0x40
 8004900:	d126      	bne.n	8004950 <I2S_IRQHandler+0x92>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b20      	cmp	r3, #32
 800490e:	d11f      	bne.n	8004950 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800491e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004920:	2300      	movs	r3, #0
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004942:	f043 0202 	orr.w	r2, r3, #2
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff ff50 	bl	80047f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b03      	cmp	r3, #3
 800495a:	d136      	bne.n	80049ca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b02      	cmp	r3, #2
 8004964:	d109      	bne.n	800497a <I2S_IRQHandler+0xbc>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004970:	2b80      	cmp	r3, #128	@ 0x80
 8004972:	d102      	bne.n	800497a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff ff45 	bl	8004804 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b08      	cmp	r3, #8
 8004982:	d122      	bne.n	80049ca <I2S_IRQHandler+0x10c>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b20      	cmp	r3, #32
 8004990:	d11b      	bne.n	80049ca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049a0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049bc:	f043 0204 	orr.w	r2, r3, #4
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff ff13 	bl	80047f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a92      	ldr	r2, [pc, #584]	@ (8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80049ee:	4b92      	ldr	r3, [pc, #584]	@ (8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049f0:	e001      	b.n	80049f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80049f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a8b      	ldr	r2, [pc, #556]	@ (8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d101      	bne.n	8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004a0c:	4b8a      	ldr	r3, [pc, #552]	@ (8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a0e:	e001      	b.n	8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004a10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a20:	d004      	beq.n	8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f040 8099 	bne.w	8004b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d107      	bne.n	8004a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f925 	bl	8004c90 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d107      	bne.n	8004a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f9c8 	bl	8004df0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a66:	2b40      	cmp	r3, #64	@ 0x40
 8004a68:	d13a      	bne.n	8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d035      	beq.n	8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a6e      	ldr	r2, [pc, #440]	@ (8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d101      	bne.n	8004a82 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004a7e:	4b6e      	ldr	r3, [pc, #440]	@ (8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a80:	e001      	b.n	8004a86 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004a82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4969      	ldr	r1, [pc, #420]	@ (8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a8e:	428b      	cmp	r3, r1
 8004a90:	d101      	bne.n	8004a96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004a92:	4b69      	ldr	r3, [pc, #420]	@ (8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a94:	e001      	b.n	8004a9a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004a96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a9e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004aae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad2:	f043 0202 	orr.w	r2, r3, #2
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff fe88 	bl	80047f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	f040 80c3 	bne.w	8004c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 80bd 	beq.w	8004c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a49      	ldr	r2, [pc, #292]	@ (8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d101      	bne.n	8004b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004b12:	4b49      	ldr	r3, [pc, #292]	@ (8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b14:	e001      	b.n	8004b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004b16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4944      	ldr	r1, [pc, #272]	@ (8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b22:	428b      	cmp	r3, r1
 8004b24:	d101      	bne.n	8004b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004b26:	4b44      	ldr	r3, [pc, #272]	@ (8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b28:	e001      	b.n	8004b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004b2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b32:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b34:	2300      	movs	r3, #0
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	60bb      	str	r3, [r7, #8]
 8004b40:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	f043 0204 	orr.w	r2, r3, #4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff fe4a 	bl	80047f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b5c:	e089      	b.n	8004c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d107      	bne.n	8004b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f8be 	bl	8004cf4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d107      	bne.n	8004b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f8fd 	bl	8004d8c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b98:	2b40      	cmp	r3, #64	@ 0x40
 8004b9a:	d12f      	bne.n	8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d02a      	beq.n	8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004bb4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1e      	ldr	r2, [pc, #120]	@ (8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d101      	bne.n	8004bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bc2:	e001      	b.n	8004bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004bc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4919      	ldr	r1, [pc, #100]	@ (8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bd0:	428b      	cmp	r3, r1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004bd4:	4b18      	ldr	r3, [pc, #96]	@ (8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bd6:	e001      	b.n	8004bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004bd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bdc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004be0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bee:	f043 0202 	orr.w	r2, r3, #2
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff fdfa 	bl	80047f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d136      	bne.n	8004c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d031      	beq.n	8004c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a07      	ldr	r2, [pc, #28]	@ (8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d101      	bne.n	8004c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004c1a:	4b07      	ldr	r3, [pc, #28]	@ (8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c1c:	e001      	b.n	8004c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004c1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4902      	ldr	r1, [pc, #8]	@ (8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c2a:	428b      	cmp	r3, r1
 8004c2c:	d106      	bne.n	8004c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004c2e:	4b02      	ldr	r3, [pc, #8]	@ (8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c30:	e006      	b.n	8004c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004c32:	bf00      	nop
 8004c34:	40003800 	.word	0x40003800
 8004c38:	40003400 	.word	0x40003400
 8004c3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c44:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c62:	f043 0204 	orr.w	r2, r3, #4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fdc0 	bl	80047f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c70:	e000      	b.n	8004c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c72:	bf00      	nop
}
 8004c74:	bf00      	nop
 8004c76:	3720      	adds	r7, #32
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	1c99      	adds	r1, r3, #2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6251      	str	r1, [r2, #36]	@ 0x24
 8004ca2:	881a      	ldrh	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d113      	bne.n	8004cea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004cd0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d106      	bne.n	8004cea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff ffc9 	bl	8004c7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	1c99      	adds	r1, r3, #2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6251      	str	r1, [r2, #36]	@ 0x24
 8004d06:	8819      	ldrh	r1, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d84 <I2SEx_TxISR_I2SExt+0x90>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d101      	bne.n	8004d16 <I2SEx_TxISR_I2SExt+0x22>
 8004d12:	4b1d      	ldr	r3, [pc, #116]	@ (8004d88 <I2SEx_TxISR_I2SExt+0x94>)
 8004d14:	e001      	b.n	8004d1a <I2SEx_TxISR_I2SExt+0x26>
 8004d16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d1a:	460a      	mov	r2, r1
 8004d1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d121      	bne.n	8004d7a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a12      	ldr	r2, [pc, #72]	@ (8004d84 <I2SEx_TxISR_I2SExt+0x90>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d101      	bne.n	8004d44 <I2SEx_TxISR_I2SExt+0x50>
 8004d40:	4b11      	ldr	r3, [pc, #68]	@ (8004d88 <I2SEx_TxISR_I2SExt+0x94>)
 8004d42:	e001      	b.n	8004d48 <I2SEx_TxISR_I2SExt+0x54>
 8004d44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	490d      	ldr	r1, [pc, #52]	@ (8004d84 <I2SEx_TxISR_I2SExt+0x90>)
 8004d50:	428b      	cmp	r3, r1
 8004d52:	d101      	bne.n	8004d58 <I2SEx_TxISR_I2SExt+0x64>
 8004d54:	4b0c      	ldr	r3, [pc, #48]	@ (8004d88 <I2SEx_TxISR_I2SExt+0x94>)
 8004d56:	e001      	b.n	8004d5c <I2SEx_TxISR_I2SExt+0x68>
 8004d58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ff81 	bl	8004c7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40003800 	.word	0x40003800
 8004d88:	40003400 	.word	0x40003400

08004d8c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68d8      	ldr	r0, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	1c99      	adds	r1, r3, #2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004da4:	b282      	uxth	r2, r0
 8004da6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d113      	bne.n	8004de8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004dce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff ff4a 	bl	8004c7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a20      	ldr	r2, [pc, #128]	@ (8004e80 <I2SEx_RxISR_I2SExt+0x90>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d101      	bne.n	8004e06 <I2SEx_RxISR_I2SExt+0x16>
 8004e02:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <I2SEx_RxISR_I2SExt+0x94>)
 8004e04:	e001      	b.n	8004e0a <I2SEx_RxISR_I2SExt+0x1a>
 8004e06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e0a:	68d8      	ldr	r0, [r3, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e10:	1c99      	adds	r1, r3, #2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004e16:	b282      	uxth	r2, r0
 8004e18:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d121      	bne.n	8004e76 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a12      	ldr	r2, [pc, #72]	@ (8004e80 <I2SEx_RxISR_I2SExt+0x90>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d101      	bne.n	8004e40 <I2SEx_RxISR_I2SExt+0x50>
 8004e3c:	4b11      	ldr	r3, [pc, #68]	@ (8004e84 <I2SEx_RxISR_I2SExt+0x94>)
 8004e3e:	e001      	b.n	8004e44 <I2SEx_RxISR_I2SExt+0x54>
 8004e40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	490d      	ldr	r1, [pc, #52]	@ (8004e80 <I2SEx_RxISR_I2SExt+0x90>)
 8004e4c:	428b      	cmp	r3, r1
 8004e4e:	d101      	bne.n	8004e54 <I2SEx_RxISR_I2SExt+0x64>
 8004e50:	4b0c      	ldr	r3, [pc, #48]	@ (8004e84 <I2SEx_RxISR_I2SExt+0x94>)
 8004e52:	e001      	b.n	8004e58 <I2SEx_RxISR_I2SExt+0x68>
 8004e54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e5c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d106      	bne.n	8004e76 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ff03 	bl	8004c7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40003800 	.word	0x40003800
 8004e84:	40003400 	.word	0x40003400

08004e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e267      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d075      	beq.n	8004f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ea6:	4b88      	ldr	r3, [pc, #544]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d00c      	beq.n	8004ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eb2:	4b85      	ldr	r3, [pc, #532]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d112      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ebe:	4b82      	ldr	r3, [pc, #520]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ec6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eca:	d10b      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ecc:	4b7e      	ldr	r3, [pc, #504]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d05b      	beq.n	8004f90 <HAL_RCC_OscConfig+0x108>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d157      	bne.n	8004f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e242      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eec:	d106      	bne.n	8004efc <HAL_RCC_OscConfig+0x74>
 8004eee:	4b76      	ldr	r3, [pc, #472]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a75      	ldr	r2, [pc, #468]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e01d      	b.n	8004f38 <HAL_RCC_OscConfig+0xb0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCC_OscConfig+0x98>
 8004f06:	4b70      	ldr	r3, [pc, #448]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a6f      	ldr	r2, [pc, #444]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	4b6d      	ldr	r3, [pc, #436]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a6c      	ldr	r2, [pc, #432]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	e00b      	b.n	8004f38 <HAL_RCC_OscConfig+0xb0>
 8004f20:	4b69      	ldr	r3, [pc, #420]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a68      	ldr	r2, [pc, #416]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	4b66      	ldr	r3, [pc, #408]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a65      	ldr	r2, [pc, #404]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d013      	beq.n	8004f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f40:	f7fc fd94 	bl	8001a6c <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f48:	f7fc fd90 	bl	8001a6c <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	@ 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e207      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0xc0>
 8004f66:	e014      	b.n	8004f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f68:	f7fc fd80 	bl	8001a6c <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f70:	f7fc fd7c 	bl	8001a6c <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b64      	cmp	r3, #100	@ 0x64
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1f3      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f82:	4b51      	ldr	r3, [pc, #324]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f0      	bne.n	8004f70 <HAL_RCC_OscConfig+0xe8>
 8004f8e:	e000      	b.n	8004f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d063      	beq.n	8005066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004faa:	4b47      	ldr	r3, [pc, #284]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d11c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb6:	4b44      	ldr	r3, [pc, #272]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d116      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc2:	4b41      	ldr	r3, [pc, #260]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_RCC_OscConfig+0x152>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d001      	beq.n	8004fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e1c7      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fda:	4b3b      	ldr	r3, [pc, #236]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4937      	ldr	r1, [pc, #220]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fee:	e03a      	b.n	8005066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d020      	beq.n	800503a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff8:	4b34      	ldr	r3, [pc, #208]	@ (80050cc <HAL_RCC_OscConfig+0x244>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffe:	f7fc fd35 	bl	8001a6c <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005006:	f7fc fd31 	bl	8001a6c <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e1a8      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005018:	4b2b      	ldr	r3, [pc, #172]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005024:	4b28      	ldr	r3, [pc, #160]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4925      	ldr	r1, [pc, #148]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]
 8005038:	e015      	b.n	8005066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800503a:	4b24      	ldr	r3, [pc, #144]	@ (80050cc <HAL_RCC_OscConfig+0x244>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fc fd14 	bl	8001a6c <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005048:	f7fc fd10 	bl	8001a6c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e187      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505a:	4b1b      	ldr	r3, [pc, #108]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d036      	beq.n	80050e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d016      	beq.n	80050a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507a:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <HAL_RCC_OscConfig+0x248>)
 800507c:	2201      	movs	r2, #1
 800507e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fc fcf4 	bl	8001a6c <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005088:	f7fc fcf0 	bl	8001a6c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e167      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509a:	4b0b      	ldr	r3, [pc, #44]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 800509c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x200>
 80050a6:	e01b      	b.n	80050e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a8:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <HAL_RCC_OscConfig+0x248>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ae:	f7fc fcdd 	bl	8001a6c <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b4:	e00e      	b.n	80050d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050b6:	f7fc fcd9 	bl	8001a6c <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d907      	bls.n	80050d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e150      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
 80050c8:	40023800 	.word	0x40023800
 80050cc:	42470000 	.word	0x42470000
 80050d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	4b88      	ldr	r3, [pc, #544]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80050d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1ea      	bne.n	80050b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8097 	beq.w	800521c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f2:	4b81      	ldr	r3, [pc, #516]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10f      	bne.n	800511e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	4b7d      	ldr	r3, [pc, #500]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	4a7c      	ldr	r2, [pc, #496]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800510c:	6413      	str	r3, [r2, #64]	@ 0x40
 800510e:	4b7a      	ldr	r3, [pc, #488]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511a:	2301      	movs	r3, #1
 800511c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511e:	4b77      	ldr	r3, [pc, #476]	@ (80052fc <HAL_RCC_OscConfig+0x474>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005126:	2b00      	cmp	r3, #0
 8005128:	d118      	bne.n	800515c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512a:	4b74      	ldr	r3, [pc, #464]	@ (80052fc <HAL_RCC_OscConfig+0x474>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a73      	ldr	r2, [pc, #460]	@ (80052fc <HAL_RCC_OscConfig+0x474>)
 8005130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005136:	f7fc fc99 	bl	8001a6c <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513e:	f7fc fc95 	bl	8001a6c <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e10c      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005150:	4b6a      	ldr	r3, [pc, #424]	@ (80052fc <HAL_RCC_OscConfig+0x474>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0f0      	beq.n	800513e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d106      	bne.n	8005172 <HAL_RCC_OscConfig+0x2ea>
 8005164:	4b64      	ldr	r3, [pc, #400]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005168:	4a63      	ldr	r2, [pc, #396]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005170:	e01c      	b.n	80051ac <HAL_RCC_OscConfig+0x324>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b05      	cmp	r3, #5
 8005178:	d10c      	bne.n	8005194 <HAL_RCC_OscConfig+0x30c>
 800517a:	4b5f      	ldr	r3, [pc, #380]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517e:	4a5e      	ldr	r2, [pc, #376]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005180:	f043 0304 	orr.w	r3, r3, #4
 8005184:	6713      	str	r3, [r2, #112]	@ 0x70
 8005186:	4b5c      	ldr	r3, [pc, #368]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518a:	4a5b      	ldr	r2, [pc, #364]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 800518c:	f043 0301 	orr.w	r3, r3, #1
 8005190:	6713      	str	r3, [r2, #112]	@ 0x70
 8005192:	e00b      	b.n	80051ac <HAL_RCC_OscConfig+0x324>
 8005194:	4b58      	ldr	r3, [pc, #352]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005198:	4a57      	ldr	r2, [pc, #348]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a0:	4b55      	ldr	r3, [pc, #340]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a4:	4a54      	ldr	r2, [pc, #336]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80051a6:	f023 0304 	bic.w	r3, r3, #4
 80051aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d015      	beq.n	80051e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b4:	f7fc fc5a 	bl	8001a6c <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ba:	e00a      	b.n	80051d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051bc:	f7fc fc56 	bl	8001a6c <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e0cb      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d2:	4b49      	ldr	r3, [pc, #292]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0ee      	beq.n	80051bc <HAL_RCC_OscConfig+0x334>
 80051de:	e014      	b.n	800520a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e0:	f7fc fc44 	bl	8001a6c <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e6:	e00a      	b.n	80051fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e8:	f7fc fc40 	bl	8001a6c <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e0b5      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051fe:	4b3e      	ldr	r3, [pc, #248]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1ee      	bne.n	80051e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800520a:	7dfb      	ldrb	r3, [r7, #23]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d105      	bne.n	800521c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005210:	4b39      	ldr	r3, [pc, #228]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005214:	4a38      	ldr	r2, [pc, #224]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800521a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80a1 	beq.w	8005368 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005226:	4b34      	ldr	r3, [pc, #208]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	2b08      	cmp	r3, #8
 8005230:	d05c      	beq.n	80052ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d141      	bne.n	80052be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523a:	4b31      	ldr	r3, [pc, #196]	@ (8005300 <HAL_RCC_OscConfig+0x478>)
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005240:	f7fc fc14 	bl	8001a6c <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005248:	f7fc fc10 	bl	8001a6c <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e087      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525a:	4b27      	ldr	r3, [pc, #156]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	019b      	lsls	r3, r3, #6
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	3b01      	subs	r3, #1
 8005280:	041b      	lsls	r3, r3, #16
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005288:	061b      	lsls	r3, r3, #24
 800528a:	491b      	ldr	r1, [pc, #108]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 800528c:	4313      	orrs	r3, r2
 800528e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005290:	4b1b      	ldr	r3, [pc, #108]	@ (8005300 <HAL_RCC_OscConfig+0x478>)
 8005292:	2201      	movs	r2, #1
 8005294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005296:	f7fc fbe9 	bl	8001a6c <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800529e:	f7fc fbe5 	bl	8001a6c <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e05c      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b0:	4b11      	ldr	r3, [pc, #68]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCC_OscConfig+0x416>
 80052bc:	e054      	b.n	8005368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052be:	4b10      	ldr	r3, [pc, #64]	@ (8005300 <HAL_RCC_OscConfig+0x478>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c4:	f7fc fbd2 	bl	8001a6c <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052cc:	f7fc fbce 	bl	8001a6c <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e045      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052de:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0x444>
 80052ea:	e03d      	b.n	8005368 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e038      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
 80052f8:	40023800 	.word	0x40023800
 80052fc:	40007000 	.word	0x40007000
 8005300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005304:	4b1b      	ldr	r3, [pc, #108]	@ (8005374 <HAL_RCC_OscConfig+0x4ec>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d028      	beq.n	8005364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800531c:	429a      	cmp	r2, r3
 800531e:	d121      	bne.n	8005364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532a:	429a      	cmp	r2, r3
 800532c:	d11a      	bne.n	8005364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005334:	4013      	ands	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800533a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800533c:	4293      	cmp	r3, r2
 800533e:	d111      	bne.n	8005364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	3b01      	subs	r3, #1
 800534e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005350:	429a      	cmp	r2, r3
 8005352:	d107      	bne.n	8005364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005360:	429a      	cmp	r2, r3
 8005362:	d001      	beq.n	8005368 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800

08005378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0cc      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800538c:	4b68      	ldr	r3, [pc, #416]	@ (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d90c      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b65      	ldr	r3, [pc, #404]	@ (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b63      	ldr	r3, [pc, #396]	@ (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0b8      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053cc:	4b59      	ldr	r3, [pc, #356]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4a58      	ldr	r2, [pc, #352]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e4:	4b53      	ldr	r3, [pc, #332]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4a52      	ldr	r2, [pc, #328]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f0:	4b50      	ldr	r3, [pc, #320]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	494d      	ldr	r1, [pc, #308]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d044      	beq.n	8005498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d107      	bne.n	8005426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005416:	4b47      	ldr	r3, [pc, #284]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d119      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e07f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d003      	beq.n	8005436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005432:	2b03      	cmp	r3, #3
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005436:	4b3f      	ldr	r3, [pc, #252]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e06f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005446:	4b3b      	ldr	r3, [pc, #236]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e067      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005456:	4b37      	ldr	r3, [pc, #220]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f023 0203 	bic.w	r2, r3, #3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4934      	ldr	r1, [pc, #208]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005464:	4313      	orrs	r3, r2
 8005466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005468:	f7fc fb00 	bl	8001a6c <HAL_GetTick>
 800546c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	e00a      	b.n	8005486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005470:	f7fc fafc 	bl	8001a6c <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e04f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005486:	4b2b      	ldr	r3, [pc, #172]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 020c 	and.w	r2, r3, #12
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	429a      	cmp	r2, r3
 8005496:	d1eb      	bne.n	8005470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005498:	4b25      	ldr	r3, [pc, #148]	@ (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d20c      	bcs.n	80054c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b22      	ldr	r3, [pc, #136]	@ (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b20      	ldr	r3, [pc, #128]	@ (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e032      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054cc:	4b19      	ldr	r3, [pc, #100]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	4916      	ldr	r1, [pc, #88]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ea:	4b12      	ldr	r3, [pc, #72]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	490e      	ldr	r1, [pc, #56]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054fe:	f000 f821 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8005502:	4602      	mov	r2, r0
 8005504:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	490a      	ldr	r1, [pc, #40]	@ (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 8005510:	5ccb      	ldrb	r3, [r1, r3]
 8005512:	fa22 f303 	lsr.w	r3, r2, r3
 8005516:	4a09      	ldr	r2, [pc, #36]	@ (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800551a:	4b09      	ldr	r3, [pc, #36]	@ (8005540 <HAL_RCC_ClockConfig+0x1c8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fc fa60 	bl	80019e4 <HAL_InitTick>

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40023c00 	.word	0x40023c00
 8005534:	40023800 	.word	0x40023800
 8005538:	0800a75c 	.word	0x0800a75c
 800553c:	20000000 	.word	0x20000000
 8005540:	20000004 	.word	0x20000004

08005544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005548:	b094      	sub	sp, #80	@ 0x50
 800554a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005550:	2300      	movs	r3, #0
 8005552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005554:	2300      	movs	r3, #0
 8005556:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800555c:	4b79      	ldr	r3, [pc, #484]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x200>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 030c 	and.w	r3, r3, #12
 8005564:	2b08      	cmp	r3, #8
 8005566:	d00d      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x40>
 8005568:	2b08      	cmp	r3, #8
 800556a:	f200 80e1 	bhi.w	8005730 <HAL_RCC_GetSysClockFreq+0x1ec>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x34>
 8005572:	2b04      	cmp	r3, #4
 8005574:	d003      	beq.n	800557e <HAL_RCC_GetSysClockFreq+0x3a>
 8005576:	e0db      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005578:	4b73      	ldr	r3, [pc, #460]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x204>)
 800557a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800557c:	e0db      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800557e:	4b73      	ldr	r3, [pc, #460]	@ (800574c <HAL_RCC_GetSysClockFreq+0x208>)
 8005580:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005582:	e0d8      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005584:	4b6f      	ldr	r3, [pc, #444]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x200>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800558c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800558e:	4b6d      	ldr	r3, [pc, #436]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x200>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d063      	beq.n	8005662 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800559a:	4b6a      	ldr	r3, [pc, #424]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x200>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	099b      	lsrs	r3, r3, #6
 80055a0:	2200      	movs	r2, #0
 80055a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ae:	2300      	movs	r3, #0
 80055b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055b6:	4622      	mov	r2, r4
 80055b8:	462b      	mov	r3, r5
 80055ba:	f04f 0000 	mov.w	r0, #0
 80055be:	f04f 0100 	mov.w	r1, #0
 80055c2:	0159      	lsls	r1, r3, #5
 80055c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055c8:	0150      	lsls	r0, r2, #5
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4621      	mov	r1, r4
 80055d0:	1a51      	subs	r1, r2, r1
 80055d2:	6139      	str	r1, [r7, #16]
 80055d4:	4629      	mov	r1, r5
 80055d6:	eb63 0301 	sbc.w	r3, r3, r1
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055e8:	4659      	mov	r1, fp
 80055ea:	018b      	lsls	r3, r1, #6
 80055ec:	4651      	mov	r1, sl
 80055ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055f2:	4651      	mov	r1, sl
 80055f4:	018a      	lsls	r2, r1, #6
 80055f6:	4651      	mov	r1, sl
 80055f8:	ebb2 0801 	subs.w	r8, r2, r1
 80055fc:	4659      	mov	r1, fp
 80055fe:	eb63 0901 	sbc.w	r9, r3, r1
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800560e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005616:	4690      	mov	r8, r2
 8005618:	4699      	mov	r9, r3
 800561a:	4623      	mov	r3, r4
 800561c:	eb18 0303 	adds.w	r3, r8, r3
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	462b      	mov	r3, r5
 8005624:	eb49 0303 	adc.w	r3, r9, r3
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005636:	4629      	mov	r1, r5
 8005638:	024b      	lsls	r3, r1, #9
 800563a:	4621      	mov	r1, r4
 800563c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005640:	4621      	mov	r1, r4
 8005642:	024a      	lsls	r2, r1, #9
 8005644:	4610      	mov	r0, r2
 8005646:	4619      	mov	r1, r3
 8005648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800564a:	2200      	movs	r2, #0
 800564c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800564e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005654:	f7fb f9fe 	bl	8000a54 <__aeabi_uldivmod>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4613      	mov	r3, r2
 800565e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005660:	e058      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005662:	4b38      	ldr	r3, [pc, #224]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x200>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	099b      	lsrs	r3, r3, #6
 8005668:	2200      	movs	r2, #0
 800566a:	4618      	mov	r0, r3
 800566c:	4611      	mov	r1, r2
 800566e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005672:	623b      	str	r3, [r7, #32]
 8005674:	2300      	movs	r3, #0
 8005676:	627b      	str	r3, [r7, #36]	@ 0x24
 8005678:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800567c:	4642      	mov	r2, r8
 800567e:	464b      	mov	r3, r9
 8005680:	f04f 0000 	mov.w	r0, #0
 8005684:	f04f 0100 	mov.w	r1, #0
 8005688:	0159      	lsls	r1, r3, #5
 800568a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800568e:	0150      	lsls	r0, r2, #5
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4641      	mov	r1, r8
 8005696:	ebb2 0a01 	subs.w	sl, r2, r1
 800569a:	4649      	mov	r1, r9
 800569c:	eb63 0b01 	sbc.w	fp, r3, r1
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056b4:	ebb2 040a 	subs.w	r4, r2, sl
 80056b8:	eb63 050b 	sbc.w	r5, r3, fp
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	00eb      	lsls	r3, r5, #3
 80056c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056ca:	00e2      	lsls	r2, r4, #3
 80056cc:	4614      	mov	r4, r2
 80056ce:	461d      	mov	r5, r3
 80056d0:	4643      	mov	r3, r8
 80056d2:	18e3      	adds	r3, r4, r3
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	464b      	mov	r3, r9
 80056d8:	eb45 0303 	adc.w	r3, r5, r3
 80056dc:	607b      	str	r3, [r7, #4]
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056ea:	4629      	mov	r1, r5
 80056ec:	028b      	lsls	r3, r1, #10
 80056ee:	4621      	mov	r1, r4
 80056f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056f4:	4621      	mov	r1, r4
 80056f6:	028a      	lsls	r2, r1, #10
 80056f8:	4610      	mov	r0, r2
 80056fa:	4619      	mov	r1, r3
 80056fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056fe:	2200      	movs	r2, #0
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	61fa      	str	r2, [r7, #28]
 8005704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005708:	f7fb f9a4 	bl	8000a54 <__aeabi_uldivmod>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4613      	mov	r3, r2
 8005712:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005714:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x200>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	0c1b      	lsrs	r3, r3, #16
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	3301      	adds	r3, #1
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005724:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005728:	fbb2 f3f3 	udiv	r3, r2, r3
 800572c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800572e:	e002      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005730:	4b05      	ldr	r3, [pc, #20]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x204>)
 8005732:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005738:	4618      	mov	r0, r3
 800573a:	3750      	adds	r7, #80	@ 0x50
 800573c:	46bd      	mov	sp, r7
 800573e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800
 8005748:	00f42400 	.word	0x00f42400
 800574c:	007a1200 	.word	0x007a1200

08005750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005754:	4b03      	ldr	r3, [pc, #12]	@ (8005764 <HAL_RCC_GetHCLKFreq+0x14>)
 8005756:	681b      	ldr	r3, [r3, #0]
}
 8005758:	4618      	mov	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000000 	.word	0x20000000

08005768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800576c:	f7ff fff0 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b05      	ldr	r3, [pc, #20]	@ (8005788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	0a9b      	lsrs	r3, r3, #10
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	4903      	ldr	r1, [pc, #12]	@ (800578c <HAL_RCC_GetPCLK1Freq+0x24>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005784:	4618      	mov	r0, r3
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40023800 	.word	0x40023800
 800578c:	0800a76c 	.word	0x0800a76c

08005790 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d035      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057b8:	4b62      	ldr	r3, [pc, #392]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057be:	f7fc f955 	bl	8001a6c <HAL_GetTick>
 80057c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057c4:	e008      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057c6:	f7fc f951 	bl	8001a6c <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e0b0      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057d8:	4b5b      	ldr	r3, [pc, #364]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f0      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	019a      	lsls	r2, r3, #6
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	071b      	lsls	r3, r3, #28
 80057f0:	4955      	ldr	r1, [pc, #340]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057f8:	4b52      	ldr	r3, [pc, #328]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057fe:	f7fc f935 	bl	8001a6c <HAL_GetTick>
 8005802:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005804:	e008      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005806:	f7fc f931 	bl	8001a6c <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e090      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005818:	4b4b      	ldr	r3, [pc, #300]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8083 	beq.w	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	4b44      	ldr	r3, [pc, #272]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583a:	4a43      	ldr	r2, [pc, #268]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800583c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005840:	6413      	str	r3, [r2, #64]	@ 0x40
 8005842:	4b41      	ldr	r3, [pc, #260]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800584e:	4b3f      	ldr	r3, [pc, #252]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a3e      	ldr	r2, [pc, #248]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005858:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800585a:	f7fc f907 	bl	8001a6c <HAL_GetTick>
 800585e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005860:	e008      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005862:	f7fc f903 	bl	8001a6c <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e062      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005874:	4b35      	ldr	r3, [pc, #212]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f0      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005880:	4b31      	ldr	r3, [pc, #196]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005884:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005888:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d02f      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	429a      	cmp	r2, r3
 800589c:	d028      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800589e:	4b2a      	ldr	r3, [pc, #168]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058a8:	4b29      	ldr	r3, [pc, #164]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058aa:	2201      	movs	r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058ae:	4b28      	ldr	r3, [pc, #160]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058b4:	4a24      	ldr	r2, [pc, #144]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058ba:	4b23      	ldr	r3, [pc, #140]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d114      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058c6:	f7fc f8d1 	bl	8001a6c <HAL_GetTick>
 80058ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058cc:	e00a      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ce:	f7fc f8cd 	bl	8001a6c <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e02a      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e4:	4b18      	ldr	r3, [pc, #96]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ee      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058fc:	d10d      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80058fe:	4b12      	ldr	r3, [pc, #72]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800590e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005912:	490d      	ldr	r1, [pc, #52]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005914:	4313      	orrs	r3, r2
 8005916:	608b      	str	r3, [r1, #8]
 8005918:	e005      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800591a:	4b0b      	ldr	r3, [pc, #44]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4a0a      	ldr	r2, [pc, #40]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005920:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005924:	6093      	str	r3, [r2, #8]
 8005926:	4b08      	ldr	r3, [pc, #32]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005928:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005932:	4905      	ldr	r1, [pc, #20]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005934:	4313      	orrs	r3, r2
 8005936:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	42470068 	.word	0x42470068
 8005948:	40023800 	.word	0x40023800
 800594c:	40007000 	.word	0x40007000
 8005950:	42470e40 	.word	0x42470e40

08005954 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d13f      	bne.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005972:	4b24      	ldr	r3, [pc, #144]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d006      	beq.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005988:	d12f      	bne.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800598a:	4b1f      	ldr	r3, [pc, #124]	@ (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800598c:	617b      	str	r3, [r7, #20]
          break;
 800598e:	e02f      	b.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005990:	4b1c      	ldr	r3, [pc, #112]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005998:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800599c:	d108      	bne.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800599e:	4b19      	ldr	r3, [pc, #100]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059a6:	4a19      	ldr	r2, [pc, #100]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80059a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	e007      	b.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059b0:	4b14      	ldr	r3, [pc, #80]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059b8:	4a15      	ldr	r2, [pc, #84]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80059c0:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059c6:	099b      	lsrs	r3, r3, #6
 80059c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	fb02 f303 	mul.w	r3, r2, r3
 80059d2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80059d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059da:	0f1b      	lsrs	r3, r3, #28
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	617b      	str	r3, [r7, #20]
          break;
 80059e8:	e002      	b.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]
          break;
 80059ee:	bf00      	nop
        }
      }
      break;
 80059f0:	e000      	b.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80059f2:	bf00      	nop
    }
  }
  return frequency;
 80059f4:	697b      	ldr	r3, [r7, #20]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800
 8005a08:	00bb8000 	.word	0x00bb8000
 8005a0c:	007a1200 	.word	0x007a1200
 8005a10:	00f42400 	.word	0x00f42400

08005a14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e07b      	b.n	8005b1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d108      	bne.n	8005a40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a36:	d009      	beq.n	8005a4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	61da      	str	r2, [r3, #28]
 8005a3e:	e005      	b.n	8005a4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fb fe3e 	bl	80016e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad0:	ea42 0103 	orr.w	r1, r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	0c1b      	lsrs	r3, r3, #16
 8005aea:	f003 0104 	and.w	r1, r3, #4
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af2:	f003 0210 	and.w	r2, r3, #16
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e041      	b.n	8005bbc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7fb fe13 	bl	8001778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2202      	movs	r2, #2
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4619      	mov	r1, r3
 8005b64:	4610      	mov	r0, r2
 8005b66:	f000 fbfb 	bl	8006360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e041      	b.n	8005c5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f839 	bl	8005c62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4610      	mov	r0, r2
 8005c04:	f000 fbac 	bl	8006360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_TIM_PWM_Start+0x24>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	bf14      	ite	ne
 8005c94:	2301      	movne	r3, #1
 8005c96:	2300      	moveq	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	e022      	b.n	8005ce2 <HAL_TIM_PWM_Start+0x6a>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d109      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0x3e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	bf14      	ite	ne
 8005cae:	2301      	movne	r3, #1
 8005cb0:	2300      	moveq	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	e015      	b.n	8005ce2 <HAL_TIM_PWM_Start+0x6a>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d109      	bne.n	8005cd0 <HAL_TIM_PWM_Start+0x58>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	bf14      	ite	ne
 8005cc8:	2301      	movne	r3, #1
 8005cca:	2300      	moveq	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	e008      	b.n	8005ce2 <HAL_TIM_PWM_Start+0x6a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	bf14      	ite	ne
 8005cdc:	2301      	movne	r3, #1
 8005cde:	2300      	moveq	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e07c      	b.n	8005de4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d104      	bne.n	8005cfa <HAL_TIM_PWM_Start+0x82>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cf8:	e013      	b.n	8005d22 <HAL_TIM_PWM_Start+0xaa>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d104      	bne.n	8005d0a <HAL_TIM_PWM_Start+0x92>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d08:	e00b      	b.n	8005d22 <HAL_TIM_PWM_Start+0xaa>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d104      	bne.n	8005d1a <HAL_TIM_PWM_Start+0xa2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d18:	e003      	b.n	8005d22 <HAL_TIM_PWM_Start+0xaa>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2201      	movs	r2, #1
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fe0e 	bl	800694c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a2d      	ldr	r2, [pc, #180]	@ (8005dec <HAL_TIM_PWM_Start+0x174>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d004      	beq.n	8005d44 <HAL_TIM_PWM_Start+0xcc>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005df0 <HAL_TIM_PWM_Start+0x178>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d101      	bne.n	8005d48 <HAL_TIM_PWM_Start+0xd0>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <HAL_TIM_PWM_Start+0xd2>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a22      	ldr	r2, [pc, #136]	@ (8005dec <HAL_TIM_PWM_Start+0x174>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d022      	beq.n	8005dae <HAL_TIM_PWM_Start+0x136>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d70:	d01d      	beq.n	8005dae <HAL_TIM_PWM_Start+0x136>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1f      	ldr	r2, [pc, #124]	@ (8005df4 <HAL_TIM_PWM_Start+0x17c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d018      	beq.n	8005dae <HAL_TIM_PWM_Start+0x136>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1d      	ldr	r2, [pc, #116]	@ (8005df8 <HAL_TIM_PWM_Start+0x180>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d013      	beq.n	8005dae <HAL_TIM_PWM_Start+0x136>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dfc <HAL_TIM_PWM_Start+0x184>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00e      	beq.n	8005dae <HAL_TIM_PWM_Start+0x136>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a16      	ldr	r2, [pc, #88]	@ (8005df0 <HAL_TIM_PWM_Start+0x178>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d009      	beq.n	8005dae <HAL_TIM_PWM_Start+0x136>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a18      	ldr	r2, [pc, #96]	@ (8005e00 <HAL_TIM_PWM_Start+0x188>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d004      	beq.n	8005dae <HAL_TIM_PWM_Start+0x136>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a16      	ldr	r2, [pc, #88]	@ (8005e04 <HAL_TIM_PWM_Start+0x18c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d111      	bne.n	8005dd2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b06      	cmp	r3, #6
 8005dbe:	d010      	beq.n	8005de2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd0:	e007      	b.n	8005de2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40010400 	.word	0x40010400
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	40000c00 	.word	0x40000c00
 8005e00:	40014000 	.word	0x40014000
 8005e04:	40001800 	.word	0x40001800

08005e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d020      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01b      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0202 	mvn.w	r2, #2
 8005e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fa65 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 8005e58:	e005      	b.n	8005e66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fa57 	bl	800630e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fa68 	bl	8006336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d020      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01b      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0204 	mvn.w	r2, #4
 8005e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fa3f 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 8005ea4:	e005      	b.n	8005eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa31 	bl	800630e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fa42 	bl	8006336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d020      	beq.n	8005f04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01b      	beq.n	8005f04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0208 	mvn.w	r2, #8
 8005ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa19 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e005      	b.n	8005efe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa0b 	bl	800630e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fa1c 	bl	8006336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 0310 	and.w	r3, r3, #16
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d020      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01b      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0210 	mvn.w	r2, #16
 8005f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2208      	movs	r2, #8
 8005f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f9f3 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f9e5 	bl	800630e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f9f6 	bl	8006336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00c      	beq.n	8005f74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0201 	mvn.w	r2, #1
 8005f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f9c3 	bl	80062fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00c      	beq.n	8005f98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d007      	beq.n	8005f98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fd86 	bl	8006aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00c      	beq.n	8005fbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f9c7 	bl	800634a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00c      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0220 	mvn.w	r2, #32
 8005fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fd58 	bl	8006a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d101      	bne.n	8006006 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006002:	2302      	movs	r3, #2
 8006004:	e0ae      	b.n	8006164 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b0c      	cmp	r3, #12
 8006012:	f200 809f 	bhi.w	8006154 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006016:	a201      	add	r2, pc, #4	@ (adr r2, 800601c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	08006051 	.word	0x08006051
 8006020:	08006155 	.word	0x08006155
 8006024:	08006155 	.word	0x08006155
 8006028:	08006155 	.word	0x08006155
 800602c:	08006091 	.word	0x08006091
 8006030:	08006155 	.word	0x08006155
 8006034:	08006155 	.word	0x08006155
 8006038:	08006155 	.word	0x08006155
 800603c:	080060d3 	.word	0x080060d3
 8006040:	08006155 	.word	0x08006155
 8006044:	08006155 	.word	0x08006155
 8006048:	08006155 	.word	0x08006155
 800604c:	08006113 	.word	0x08006113
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fa2e 	bl	80064b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0208 	orr.w	r2, r2, #8
 800606a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0204 	bic.w	r2, r2, #4
 800607a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6999      	ldr	r1, [r3, #24]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	619a      	str	r2, [r3, #24]
      break;
 800608e:	e064      	b.n	800615a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fa7e 	bl	8006598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	699a      	ldr	r2, [r3, #24]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6999      	ldr	r1, [r3, #24]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	021a      	lsls	r2, r3, #8
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	619a      	str	r2, [r3, #24]
      break;
 80060d0:	e043      	b.n	800615a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fad3 	bl	8006684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69da      	ldr	r2, [r3, #28]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0208 	orr.w	r2, r2, #8
 80060ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0204 	bic.w	r2, r2, #4
 80060fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69d9      	ldr	r1, [r3, #28]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	61da      	str	r2, [r3, #28]
      break;
 8006110:	e023      	b.n	800615a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fb27 	bl	800676c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800612c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69da      	ldr	r2, [r3, #28]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800613c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69d9      	ldr	r1, [r3, #28]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	021a      	lsls	r2, r3, #8
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	61da      	str	r2, [r3, #28]
      break;
 8006152:	e002      	b.n	800615a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	75fb      	strb	r3, [r7, #23]
      break;
 8006158:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006162:	7dfb      	ldrb	r3, [r7, #23]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_TIM_ConfigClockSource+0x1c>
 8006184:	2302      	movs	r3, #2
 8006186:	e0b4      	b.n	80062f2 <HAL_TIM_ConfigClockSource+0x186>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c0:	d03e      	beq.n	8006240 <HAL_TIM_ConfigClockSource+0xd4>
 80061c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c6:	f200 8087 	bhi.w	80062d8 <HAL_TIM_ConfigClockSource+0x16c>
 80061ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ce:	f000 8086 	beq.w	80062de <HAL_TIM_ConfigClockSource+0x172>
 80061d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d6:	d87f      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x16c>
 80061d8:	2b70      	cmp	r3, #112	@ 0x70
 80061da:	d01a      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0xa6>
 80061dc:	2b70      	cmp	r3, #112	@ 0x70
 80061de:	d87b      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x16c>
 80061e0:	2b60      	cmp	r3, #96	@ 0x60
 80061e2:	d050      	beq.n	8006286 <HAL_TIM_ConfigClockSource+0x11a>
 80061e4:	2b60      	cmp	r3, #96	@ 0x60
 80061e6:	d877      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x16c>
 80061e8:	2b50      	cmp	r3, #80	@ 0x50
 80061ea:	d03c      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0xfa>
 80061ec:	2b50      	cmp	r3, #80	@ 0x50
 80061ee:	d873      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x16c>
 80061f0:	2b40      	cmp	r3, #64	@ 0x40
 80061f2:	d058      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x13a>
 80061f4:	2b40      	cmp	r3, #64	@ 0x40
 80061f6:	d86f      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x16c>
 80061f8:	2b30      	cmp	r3, #48	@ 0x30
 80061fa:	d064      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x15a>
 80061fc:	2b30      	cmp	r3, #48	@ 0x30
 80061fe:	d86b      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006200:	2b20      	cmp	r3, #32
 8006202:	d060      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006204:	2b20      	cmp	r3, #32
 8006206:	d867      	bhi.n	80062d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d05c      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x15a>
 800620c:	2b10      	cmp	r3, #16
 800620e:	d05a      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006210:	e062      	b.n	80062d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006222:	f000 fb73 	bl	800690c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006234:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	609a      	str	r2, [r3, #8]
      break;
 800623e:	e04f      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006250:	f000 fb5c 	bl	800690c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006262:	609a      	str	r2, [r3, #8]
      break;
 8006264:	e03c      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006272:	461a      	mov	r2, r3
 8006274:	f000 fad0 	bl	8006818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2150      	movs	r1, #80	@ 0x50
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fb29 	bl	80068d6 <TIM_ITRx_SetConfig>
      break;
 8006284:	e02c      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006292:	461a      	mov	r2, r3
 8006294:	f000 faef 	bl	8006876 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2160      	movs	r1, #96	@ 0x60
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fb19 	bl	80068d6 <TIM_ITRx_SetConfig>
      break;
 80062a4:	e01c      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b2:	461a      	mov	r2, r3
 80062b4:	f000 fab0 	bl	8006818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2140      	movs	r1, #64	@ 0x40
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fb09 	bl	80068d6 <TIM_ITRx_SetConfig>
      break;
 80062c4:	e00c      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f000 fb00 	bl	80068d6 <TIM_ITRx_SetConfig>
      break;
 80062d6:	e003      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
      break;
 80062dc:	e000      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80062de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a46      	ldr	r2, [pc, #280]	@ (800648c <TIM_Base_SetConfig+0x12c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d013      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800637e:	d00f      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a43      	ldr	r2, [pc, #268]	@ (8006490 <TIM_Base_SetConfig+0x130>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00b      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a42      	ldr	r2, [pc, #264]	@ (8006494 <TIM_Base_SetConfig+0x134>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d007      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a41      	ldr	r2, [pc, #260]	@ (8006498 <TIM_Base_SetConfig+0x138>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a40      	ldr	r2, [pc, #256]	@ (800649c <TIM_Base_SetConfig+0x13c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d108      	bne.n	80063b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a35      	ldr	r2, [pc, #212]	@ (800648c <TIM_Base_SetConfig+0x12c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d02b      	beq.n	8006412 <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c0:	d027      	beq.n	8006412 <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a32      	ldr	r2, [pc, #200]	@ (8006490 <TIM_Base_SetConfig+0x130>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d023      	beq.n	8006412 <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a31      	ldr	r2, [pc, #196]	@ (8006494 <TIM_Base_SetConfig+0x134>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d01f      	beq.n	8006412 <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a30      	ldr	r2, [pc, #192]	@ (8006498 <TIM_Base_SetConfig+0x138>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d01b      	beq.n	8006412 <TIM_Base_SetConfig+0xb2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2f      	ldr	r2, [pc, #188]	@ (800649c <TIM_Base_SetConfig+0x13c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d017      	beq.n	8006412 <TIM_Base_SetConfig+0xb2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2e      	ldr	r2, [pc, #184]	@ (80064a0 <TIM_Base_SetConfig+0x140>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d013      	beq.n	8006412 <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a2d      	ldr	r2, [pc, #180]	@ (80064a4 <TIM_Base_SetConfig+0x144>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00f      	beq.n	8006412 <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a2c      	ldr	r2, [pc, #176]	@ (80064a8 <TIM_Base_SetConfig+0x148>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00b      	beq.n	8006412 <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2b      	ldr	r2, [pc, #172]	@ (80064ac <TIM_Base_SetConfig+0x14c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d007      	beq.n	8006412 <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a2a      	ldr	r2, [pc, #168]	@ (80064b0 <TIM_Base_SetConfig+0x150>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a29      	ldr	r2, [pc, #164]	@ (80064b4 <TIM_Base_SetConfig+0x154>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d108      	bne.n	8006424 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a10      	ldr	r2, [pc, #64]	@ (800648c <TIM_Base_SetConfig+0x12c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_Base_SetConfig+0xf8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a12      	ldr	r2, [pc, #72]	@ (800649c <TIM_Base_SetConfig+0x13c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d103      	bne.n	8006460 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b01      	cmp	r3, #1
 8006470:	d105      	bne.n	800647e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f023 0201 	bic.w	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	611a      	str	r2, [r3, #16]
  }
}
 800647e:	bf00      	nop
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	40000400 	.word	0x40000400
 8006494:	40000800 	.word	0x40000800
 8006498:	40000c00 	.word	0x40000c00
 800649c:	40010400 	.word	0x40010400
 80064a0:	40014000 	.word	0x40014000
 80064a4:	40014400 	.word	0x40014400
 80064a8:	40014800 	.word	0x40014800
 80064ac:	40001800 	.word	0x40001800
 80064b0:	40001c00 	.word	0x40001c00
 80064b4:	40002000 	.word	0x40002000

080064b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f023 0201 	bic.w	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0303 	bic.w	r3, r3, #3
 80064ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f023 0302 	bic.w	r3, r3, #2
 8006500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a20      	ldr	r2, [pc, #128]	@ (8006590 <TIM_OC1_SetConfig+0xd8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC1_SetConfig+0x64>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a1f      	ldr	r2, [pc, #124]	@ (8006594 <TIM_OC1_SetConfig+0xdc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d10c      	bne.n	8006536 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f023 0308 	bic.w	r3, r3, #8
 8006522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 0304 	bic.w	r3, r3, #4
 8006534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a15      	ldr	r2, [pc, #84]	@ (8006590 <TIM_OC1_SetConfig+0xd8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d003      	beq.n	8006546 <TIM_OC1_SetConfig+0x8e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a14      	ldr	r2, [pc, #80]	@ (8006594 <TIM_OC1_SetConfig+0xdc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d111      	bne.n	800656a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800654c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	621a      	str	r2, [r3, #32]
}
 8006584:	bf00      	nop
 8006586:	371c      	adds	r7, #28
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	40010000 	.word	0x40010000
 8006594:	40010400 	.word	0x40010400

08006598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f023 0210 	bic.w	r2, r3, #16
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 0320 	bic.w	r3, r3, #32
 80065e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a22      	ldr	r2, [pc, #136]	@ (800667c <TIM_OC2_SetConfig+0xe4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_OC2_SetConfig+0x68>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a21      	ldr	r2, [pc, #132]	@ (8006680 <TIM_OC2_SetConfig+0xe8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d10d      	bne.n	800661c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800661a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a17      	ldr	r2, [pc, #92]	@ (800667c <TIM_OC2_SetConfig+0xe4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_OC2_SetConfig+0x94>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a16      	ldr	r2, [pc, #88]	@ (8006680 <TIM_OC2_SetConfig+0xe8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d113      	bne.n	8006654 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800663a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40010400 	.word	0x40010400

08006684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a21      	ldr	r2, [pc, #132]	@ (8006764 <TIM_OC3_SetConfig+0xe0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d003      	beq.n	80066ea <TIM_OC3_SetConfig+0x66>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a20      	ldr	r2, [pc, #128]	@ (8006768 <TIM_OC3_SetConfig+0xe4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d10d      	bne.n	8006706 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a16      	ldr	r2, [pc, #88]	@ (8006764 <TIM_OC3_SetConfig+0xe0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_OC3_SetConfig+0x92>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a15      	ldr	r2, [pc, #84]	@ (8006768 <TIM_OC3_SetConfig+0xe4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d113      	bne.n	800673e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800671c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	621a      	str	r2, [r3, #32]
}
 8006758:	bf00      	nop
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	40010000 	.word	0x40010000
 8006768:	40010400 	.word	0x40010400

0800676c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800679a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	031b      	lsls	r3, r3, #12
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a12      	ldr	r2, [pc, #72]	@ (8006810 <TIM_OC4_SetConfig+0xa4>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_OC4_SetConfig+0x68>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a11      	ldr	r2, [pc, #68]	@ (8006814 <TIM_OC4_SetConfig+0xa8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d109      	bne.n	80067e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	019b      	lsls	r3, r3, #6
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	621a      	str	r2, [r3, #32]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	40010000 	.word	0x40010000
 8006814:	40010400 	.word	0x40010400

08006818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f023 0201 	bic.w	r2, r3, #1
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f023 030a 	bic.w	r3, r3, #10
 8006854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	621a      	str	r2, [r3, #32]
}
 800686a:	bf00      	nop
 800686c:	371c      	adds	r7, #28
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006876:	b480      	push	{r7}
 8006878:	b087      	sub	sp, #28
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	f023 0210 	bic.w	r2, r3, #16
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	031b      	lsls	r3, r3, #12
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	621a      	str	r2, [r3, #32]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b085      	sub	sp, #20
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	f043 0307 	orr.w	r3, r3, #7
 80068f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	609a      	str	r2, [r3, #8]
}
 8006900:	bf00      	nop
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	021a      	lsls	r2, r3, #8
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	431a      	orrs	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4313      	orrs	r3, r2
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	609a      	str	r2, [r3, #8]
}
 8006940:	bf00      	nop
 8006942:	371c      	adds	r7, #28
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	2201      	movs	r2, #1
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a1a      	ldr	r2, [r3, #32]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	43db      	mvns	r3, r3
 800696e:	401a      	ands	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1a      	ldr	r2, [r3, #32]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	fa01 f303 	lsl.w	r3, r1, r3
 8006984:	431a      	orrs	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
	...

08006998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e05a      	b.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a21      	ldr	r2, [pc, #132]	@ (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d022      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069fc:	d01d      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1d      	ldr	r2, [pc, #116]	@ (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d018      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d013      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1a      	ldr	r2, [pc, #104]	@ (8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00e      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a18      	ldr	r2, [pc, #96]	@ (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d009      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a17      	ldr	r2, [pc, #92]	@ (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d004      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a15      	ldr	r2, [pc, #84]	@ (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d10c      	bne.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40010000 	.word	0x40010000
 8006a78:	40000400 	.word	0x40000400
 8006a7c:	40000800 	.word	0x40000800
 8006a80:	40000c00 	.word	0x40000c00
 8006a84:	40010400 	.word	0x40010400
 8006a88:	40014000 	.word	0x40014000
 8006a8c:	40001800 	.word	0x40001800

08006a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ab8:	b084      	sub	sp, #16
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	f107 001c 	add.w	r0, r7, #28
 8006ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006aca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d123      	bne.n	8006b1a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006ae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006afa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d105      	bne.n	8006b0e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f9dc 	bl	8006ecc <USB_CoreReset>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
 8006b18:	e01b      	b.n	8006b52 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f9d0 	bl	8006ecc <USB_CoreReset>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d106      	bne.n	8006b46 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b44:	e005      	b.n	8006b52 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b52:	7fbb      	ldrb	r3, [r7, #30]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d10b      	bne.n	8006b70 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f043 0206 	orr.w	r2, r3, #6
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f043 0220 	orr.w	r2, r3, #32
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b7c:	b004      	add	sp, #16
 8006b7e:	4770      	bx	lr

08006b80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f043 0201 	orr.w	r2, r3, #1
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f023 0201 	bic.w	r2, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d115      	bne.n	8006c12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006bf2:	200a      	movs	r0, #10
 8006bf4:	f7fa ff46 	bl	8001a84 <HAL_Delay>
      ms += 10U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	330a      	adds	r3, #10
 8006bfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f956 	bl	8006eb0 <USB_GetMode>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d01e      	beq.n	8006c48 <USB_SetCurrentMode+0x84>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c0e:	d9f0      	bls.n	8006bf2 <USB_SetCurrentMode+0x2e>
 8006c10:	e01a      	b.n	8006c48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d115      	bne.n	8006c44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c24:	200a      	movs	r0, #10
 8006c26:	f7fa ff2d 	bl	8001a84 <HAL_Delay>
      ms += 10U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	330a      	adds	r3, #10
 8006c2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f93d 	bl	8006eb0 <USB_GetMode>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <USB_SetCurrentMode+0x84>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c40:	d9f0      	bls.n	8006c24 <USB_SetCurrentMode+0x60>
 8006c42:	e001      	b.n	8006c48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e005      	b.n	8006c54 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2bc8      	cmp	r3, #200	@ 0xc8
 8006c4c:	d101      	bne.n	8006c52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c76:	d901      	bls.n	8006c7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e01b      	b.n	8006cb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	daf2      	bge.n	8006c6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	019b      	lsls	r3, r3, #6
 8006c8c:	f043 0220 	orr.w	r2, r3, #32
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ca0:	d901      	bls.n	8006ca6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e006      	b.n	8006cb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d0f0      	beq.n	8006c94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cd8:	d901      	bls.n	8006cde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e018      	b.n	8006d10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	daf2      	bge.n	8006ccc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2210      	movs	r2, #16
 8006cee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cfc:	d901      	bls.n	8006d02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e006      	b.n	8006d10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	2b10      	cmp	r3, #16
 8006d0c:	d0f0      	beq.n	8006cf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b089      	sub	sp, #36	@ 0x24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	4611      	mov	r1, r2
 8006d28:	461a      	mov	r2, r3
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	71fb      	strb	r3, [r7, #7]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d123      	bne.n	8006d8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d42:	88bb      	ldrh	r3, [r7, #4]
 8006d44:	3303      	adds	r3, #3
 8006d46:	089b      	lsrs	r3, r3, #2
 8006d48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	e018      	b.n	8006d82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	031a      	lsls	r2, r3, #12
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	3301      	adds	r3, #1
 8006d68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	3301      	adds	r3, #1
 8006d74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d3e2      	bcc.n	8006d50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3724      	adds	r7, #36	@ 0x24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b08b      	sub	sp, #44	@ 0x2c
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	4613      	mov	r3, r2
 8006da4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	089b      	lsrs	r3, r3, #2
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	f003 0303 	and.w	r3, r3, #3
 8006dbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	623b      	str	r3, [r7, #32]
 8006dc2:	e014      	b.n	8006dee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dce:	601a      	str	r2, [r3, #0]
    pDest++;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd8:	3301      	adds	r3, #1
 8006dda:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dde:	3301      	adds	r3, #1
 8006de0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	3301      	adds	r3, #1
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	3301      	adds	r3, #1
 8006dec:	623b      	str	r3, [r7, #32]
 8006dee:	6a3a      	ldr	r2, [r7, #32]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d3e6      	bcc.n	8006dc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006df6:	8bfb      	ldrh	r3, [r7, #30]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01e      	beq.n	8006e3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e06:	461a      	mov	r2, r3
 8006e08:	f107 0310 	add.w	r3, r7, #16
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e20:	701a      	strb	r2, [r3, #0]
      i++;
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	3301      	adds	r3, #1
 8006e26:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006e2e:	8bfb      	ldrh	r3, [r7, #30]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e34:	8bfb      	ldrh	r3, [r7, #30]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1ea      	bne.n	8006e10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	372c      	adds	r7, #44	@ 0x2c
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e60:	68fb      	ldr	r3, [r7, #12]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	f003 0301 	and.w	r3, r3, #1
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ee4:	d901      	bls.n	8006eea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e01b      	b.n	8006f22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	daf2      	bge.n	8006ed8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f043 0201 	orr.w	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3301      	adds	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f0e:	d901      	bls.n	8006f14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e006      	b.n	8006f22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d0f0      	beq.n	8006f02 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f30:	b084      	sub	sp, #16
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b086      	sub	sp, #24
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f50:	461a      	mov	r2, r3
 8006f52:	2300      	movs	r3, #0
 8006f54:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f66:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f72:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d119      	bne.n	8006fba <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006f86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d10a      	bne.n	8006fa4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006f9c:	f043 0304 	orr.w	r3, r3, #4
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e014      	b.n	8006fce <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006fb2:	f023 0304 	bic.w	r3, r3, #4
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	e009      	b.n	8006fce <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006fc8:	f023 0304 	bic.w	r3, r3, #4
 8006fcc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fce:	2110      	movs	r1, #16
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff fe43 	bl	8006c5c <USB_FlushTxFifo>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff fe6d 	bl	8006cc0 <USB_FlushRxFifo>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	e015      	b.n	8007022 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007002:	461a      	mov	r2, r3
 8007004:	f04f 33ff 	mov.w	r3, #4294967295
 8007008:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007016:	461a      	mov	r2, r3
 8007018:	2300      	movs	r3, #0
 800701a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	3301      	adds	r3, #1
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007026:	461a      	mov	r2, r3
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	4293      	cmp	r3, r2
 800702c:	d3e3      	bcc.n	8006ff6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f04f 32ff 	mov.w	r2, #4294967295
 800703a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a18      	ldr	r2, [pc, #96]	@ (80070a0 <USB_HostInit+0x170>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d10b      	bne.n	800705c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800704a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a15      	ldr	r2, [pc, #84]	@ (80070a4 <USB_HostInit+0x174>)
 8007050:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a14      	ldr	r2, [pc, #80]	@ (80070a8 <USB_HostInit+0x178>)
 8007056:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800705a:	e009      	b.n	8007070 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2280      	movs	r2, #128	@ 0x80
 8007060:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a11      	ldr	r2, [pc, #68]	@ (80070ac <USB_HostInit+0x17c>)
 8007066:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a11      	ldr	r2, [pc, #68]	@ (80070b0 <USB_HostInit+0x180>)
 800706c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007070:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007074:	2b00      	cmp	r3, #0
 8007076:	d105      	bne.n	8007084 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f043 0210 	orr.w	r2, r3, #16
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	699a      	ldr	r2, [r3, #24]
 8007088:	4b0a      	ldr	r3, [pc, #40]	@ (80070b4 <USB_HostInit+0x184>)
 800708a:	4313      	orrs	r3, r2
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800709c:	b004      	add	sp, #16
 800709e:	4770      	bx	lr
 80070a0:	40040000 	.word	0x40040000
 80070a4:	01000200 	.word	0x01000200
 80070a8:	00e00300 	.word	0x00e00300
 80070ac:	00600080 	.word	0x00600080
 80070b0:	004000e0 	.word	0x004000e0
 80070b4:	a3200008 	.word	0xa3200008

080070b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	f003 0303 	and.w	r3, r3, #3
 80070ea:	68f9      	ldr	r1, [r7, #12]
 80070ec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80070f0:	4313      	orrs	r3, r2
 80070f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d107      	bne.n	800710a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007100:	461a      	mov	r2, r3
 8007102:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007106:	6053      	str	r3, [r2, #4]
 8007108:	e00c      	b.n	8007124 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d107      	bne.n	8007120 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007116:	461a      	mov	r2, r3
 8007118:	f241 7370 	movw	r3, #6000	@ 0x1770
 800711c:	6053      	str	r3, [r2, #4]
 800711e:	e001      	b.n	8007124 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e000      	b.n	8007126 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007152:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800715c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007160:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007162:	2064      	movs	r0, #100	@ 0x64
 8007164:	f7fa fc8e 	bl	8001a84 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007174:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007176:	200a      	movs	r0, #10
 8007178:	f7fa fc84 	bl	8001a84 <HAL_Delay>

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	460b      	mov	r3, r1
 8007190:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80071aa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <USB_DriveVbus+0x44>
 80071b6:	78fb      	ldrb	r3, [r7, #3]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d106      	bne.n	80071ca <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80071c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80071c8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d4:	d109      	bne.n	80071ea <USB_DriveVbus+0x64>
 80071d6:	78fb      	ldrb	r3, [r7, #3]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d106      	bne.n	80071ea <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80071e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071e8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	0c5b      	lsrs	r3, r3, #17
 8007216:	f003 0303 	and.w	r3, r3, #3
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007226:	b480      	push	{r7}
 8007228:	b085      	sub	sp, #20
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	b29b      	uxth	r3, r3
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	4608      	mov	r0, r1
 8007252:	4611      	mov	r1, r2
 8007254:	461a      	mov	r2, r3
 8007256:	4603      	mov	r3, r0
 8007258:	70fb      	strb	r3, [r7, #3]
 800725a:	460b      	mov	r3, r1
 800725c:	70bb      	strb	r3, [r7, #2]
 800725e:	4613      	mov	r3, r2
 8007260:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800726a:	78fb      	ldrb	r3, [r7, #3]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	4413      	add	r3, r2
 8007272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007276:	461a      	mov	r2, r3
 8007278:	f04f 33ff 	mov.w	r3, #4294967295
 800727c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800727e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007282:	2b03      	cmp	r3, #3
 8007284:	d87c      	bhi.n	8007380 <USB_HC_Init+0x138>
 8007286:	a201      	add	r2, pc, #4	@ (adr r2, 800728c <USB_HC_Init+0x44>)
 8007288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728c:	0800729d 	.word	0x0800729d
 8007290:	08007343 	.word	0x08007343
 8007294:	0800729d 	.word	0x0800729d
 8007298:	08007305 	.word	0x08007305
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072a8:	461a      	mov	r2, r3
 80072aa:	f240 439d 	movw	r3, #1181	@ 0x49d
 80072ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80072b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	da10      	bge.n	80072da <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	78fa      	ldrb	r2, [r7, #3]
 80072c8:	0151      	lsls	r1, r2, #5
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	440a      	add	r2, r1
 80072ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072d6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80072d8:	e055      	b.n	8007386 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a6f      	ldr	r2, [pc, #444]	@ (800749c <USB_HC_Init+0x254>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d151      	bne.n	8007386 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	78fa      	ldrb	r2, [r7, #3]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072fc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007300:	60d3      	str	r3, [r2, #12]
      break;
 8007302:	e040      	b.n	8007386 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	4413      	add	r3, r2
 800730c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007310:	461a      	mov	r2, r3
 8007312:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007316:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007318:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800731c:	2b00      	cmp	r3, #0
 800731e:	da34      	bge.n	800738a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007320:	78fb      	ldrb	r3, [r7, #3]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	4413      	add	r3, r2
 8007328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	78fa      	ldrb	r2, [r7, #3]
 8007330:	0151      	lsls	r1, r2, #5
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	440a      	add	r2, r1
 8007336:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800733a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800733e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007340:	e023      	b.n	800738a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	4413      	add	r3, r2
 800734a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800734e:	461a      	mov	r2, r3
 8007350:	f240 2325 	movw	r3, #549	@ 0x225
 8007354:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007356:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800735a:	2b00      	cmp	r3, #0
 800735c:	da17      	bge.n	800738e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	4413      	add	r3, r2
 8007366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	78fa      	ldrb	r2, [r7, #3]
 800736e:	0151      	lsls	r1, r2, #5
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	440a      	add	r2, r1
 8007374:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007378:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800737c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800737e:	e006      	b.n	800738e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	77fb      	strb	r3, [r7, #31]
      break;
 8007384:	e004      	b.n	8007390 <USB_HC_Init+0x148>
      break;
 8007386:	bf00      	nop
 8007388:	e002      	b.n	8007390 <USB_HC_Init+0x148>
      break;
 800738a:	bf00      	nop
 800738c:	e000      	b.n	8007390 <USB_HC_Init+0x148>
      break;
 800738e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800739c:	461a      	mov	r2, r3
 800739e:	2300      	movs	r3, #0
 80073a0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80073a2:	78fb      	ldrb	r3, [r7, #3]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	78fa      	ldrb	r2, [r7, #3]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073bc:	f043 0302 	orr.w	r3, r3, #2
 80073c0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	2101      	movs	r1, #1
 80073d2:	fa01 f303 	lsl.w	r3, r1, r3
 80073d6:	6939      	ldr	r1, [r7, #16]
 80073d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80073dc:	4313      	orrs	r3, r2
 80073de:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80073ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	da03      	bge.n	80073fc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80073f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073f8:	61bb      	str	r3, [r7, #24]
 80073fa:	e001      	b.n	8007400 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff fef9 	bl	80071f8 <USB_GetHostSpeed>
 8007406:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007408:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800740c:	2b02      	cmp	r3, #2
 800740e:	d106      	bne.n	800741e <USB_HC_Init+0x1d6>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d003      	beq.n	800741e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007416:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	e001      	b.n	8007422 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007422:	787b      	ldrb	r3, [r7, #1]
 8007424:	059b      	lsls	r3, r3, #22
 8007426:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800742a:	78bb      	ldrb	r3, [r7, #2]
 800742c:	02db      	lsls	r3, r3, #11
 800742e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007432:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007434:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007438:	049b      	lsls	r3, r3, #18
 800743a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800743e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007440:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007442:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007446:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	431a      	orrs	r2, r3
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	440a      	add	r2, r1
 8007458:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800745c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007460:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007462:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007466:	2b03      	cmp	r3, #3
 8007468:	d003      	beq.n	8007472 <USB_HC_Init+0x22a>
 800746a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800746e:	2b01      	cmp	r3, #1
 8007470:	d10f      	bne.n	8007492 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	4413      	add	r3, r2
 800747a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	440a      	add	r2, r1
 8007488:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800748c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007490:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007492:	7ffb      	ldrb	r3, [r7, #31]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3720      	adds	r7, #32
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	40040000 	.word	0x40040000

080074a0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08c      	sub	sp, #48	@ 0x30
 80074a4:	af02      	add	r7, sp, #8
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4613      	mov	r3, r2
 80074ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	785b      	ldrb	r3, [r3, #1]
 80074b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80074b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074bc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4a5d      	ldr	r2, [pc, #372]	@ (8007638 <USB_HC_StartXfer+0x198>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d12f      	bne.n	8007526 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d11c      	bne.n	8007506 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	7c9b      	ldrb	r3, [r3, #18]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <USB_HC_StartXfer+0x3c>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	7c9b      	ldrb	r3, [r3, #18]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d124      	bne.n	8007526 <USB_HC_StartXfer+0x86>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	799b      	ldrb	r3, [r3, #6]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d120      	bne.n	8007526 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007502:	60d3      	str	r3, [r2, #12]
 8007504:	e00f      	b.n	8007526 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	791b      	ldrb	r3, [r3, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10b      	bne.n	8007526 <USB_HC_StartXfer+0x86>
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	795b      	ldrb	r3, [r3, #5]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d107      	bne.n	8007526 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	785b      	ldrb	r3, [r3, #1]
 800751a:	4619      	mov	r1, r3
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 fb6b 	bl	8007bf8 <USB_DoPing>
        return HAL_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	e232      	b.n	800798c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	799b      	ldrb	r3, [r3, #6]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d158      	bne.n	80075e0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800752e:	2301      	movs	r3, #1
 8007530:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	78db      	ldrb	r3, [r3, #3]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d007      	beq.n	800754a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800753a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	8a92      	ldrh	r2, [r2, #20]
 8007540:	fb03 f202 	mul.w	r2, r3, r2
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	61da      	str	r2, [r3, #28]
 8007548:	e07c      	b.n	8007644 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	7c9b      	ldrb	r3, [r3, #18]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d130      	bne.n	80075b4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	2bbc      	cmp	r3, #188	@ 0xbc
 8007558:	d918      	bls.n	800758c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	8a9b      	ldrh	r3, [r3, #20]
 800755e:	461a      	mov	r2, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d003      	beq.n	800757c <USB_HC_StartXfer+0xdc>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	2b02      	cmp	r3, #2
 800757a:	d103      	bne.n	8007584 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2202      	movs	r2, #2
 8007580:	60da      	str	r2, [r3, #12]
 8007582:	e05f      	b.n	8007644 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2201      	movs	r2, #1
 8007588:	60da      	str	r2, [r3, #12]
 800758a:	e05b      	b.n	8007644 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	6a1a      	ldr	r2, [r3, #32]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d007      	beq.n	80075ac <USB_HC_StartXfer+0x10c>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d003      	beq.n	80075ac <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2204      	movs	r2, #4
 80075a8:	60da      	str	r2, [r3, #12]
 80075aa:	e04b      	b.n	8007644 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2203      	movs	r2, #3
 80075b0:	60da      	str	r2, [r3, #12]
 80075b2:	e047      	b.n	8007644 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d10d      	bne.n	80075d6 <USB_HC_StartXfer+0x136>
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	8a92      	ldrh	r2, [r2, #20]
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d907      	bls.n	80075d6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80075c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	8a92      	ldrh	r2, [r2, #20]
 80075cc:	fb03 f202 	mul.w	r2, r3, r2
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	61da      	str	r2, [r3, #28]
 80075d4:	e036      	b.n	8007644 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6a1a      	ldr	r2, [r3, #32]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	61da      	str	r2, [r3, #28]
 80075de:	e031      	b.n	8007644 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d018      	beq.n	800761a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	6a1b      	ldr	r3, [r3, #32]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	8a92      	ldrh	r2, [r2, #20]
 80075f0:	4413      	add	r3, r2
 80075f2:	3b01      	subs	r3, #1
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	8a92      	ldrh	r2, [r2, #20]
 80075f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80075fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007600:	8b7b      	ldrh	r3, [r7, #26]
 8007602:	429a      	cmp	r2, r3
 8007604:	d90b      	bls.n	800761e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007606:	8b7b      	ldrh	r3, [r7, #26]
 8007608:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800760a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	8a92      	ldrh	r2, [r2, #20]
 8007610:	fb03 f202 	mul.w	r2, r3, r2
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	61da      	str	r2, [r3, #28]
 8007618:	e001      	b.n	800761e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800761a:	2301      	movs	r3, #1
 800761c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	78db      	ldrb	r3, [r3, #3]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007626:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	8a92      	ldrh	r2, [r2, #20]
 800762c:	fb03 f202 	mul.w	r2, r3, r2
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	61da      	str	r2, [r3, #28]
 8007634:	e006      	b.n	8007644 <USB_HC_StartXfer+0x1a4>
 8007636:	bf00      	nop
 8007638:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6a1a      	ldr	r2, [r3, #32]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800764c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800764e:	04d9      	lsls	r1, r3, #19
 8007650:	4ba3      	ldr	r3, [pc, #652]	@ (80078e0 <USB_HC_StartXfer+0x440>)
 8007652:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007654:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	7d9b      	ldrb	r3, [r3, #22]
 800765a:	075b      	lsls	r3, r3, #29
 800765c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007660:	69f9      	ldr	r1, [r7, #28]
 8007662:	0148      	lsls	r0, r1, #5
 8007664:	6a39      	ldr	r1, [r7, #32]
 8007666:	4401      	add	r1, r0
 8007668:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800766c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800766e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6999      	ldr	r1, [r3, #24]
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	4413      	add	r3, r2
 8007682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007686:	460a      	mov	r2, r1
 8007688:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	bf0c      	ite	eq
 800769a:	2301      	moveq	r3, #1
 800769c:	2300      	movne	r3, #0
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	0151      	lsls	r1, r2, #5
 80076b4:	6a3a      	ldr	r2, [r7, #32]
 80076b6:	440a      	add	r2, r1
 80076b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80076c0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	7e7b      	ldrb	r3, [r7, #25]
 80076d2:	075b      	lsls	r3, r3, #29
 80076d4:	69f9      	ldr	r1, [r7, #28]
 80076d6:	0148      	lsls	r0, r1, #5
 80076d8:	6a39      	ldr	r1, [r7, #32]
 80076da:	4401      	add	r1, r0
 80076dc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80076e0:	4313      	orrs	r3, r2
 80076e2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	799b      	ldrb	r3, [r3, #6]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	f040 80c3 	bne.w	8007874 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	7c5b      	ldrb	r3, [r3, #17]
 80076f2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80076f8:	4313      	orrs	r3, r2
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	0151      	lsls	r1, r2, #5
 80076fe:	6a3a      	ldr	r2, [r7, #32]
 8007700:	440a      	add	r2, r1
 8007702:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007706:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800770a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	4413      	add	r3, r2
 8007714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	6a3a      	ldr	r2, [r7, #32]
 8007720:	440a      	add	r2, r1
 8007722:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007726:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800772a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	79db      	ldrb	r3, [r3, #7]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d123      	bne.n	800777c <USB_HC_StartXfer+0x2dc>
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	78db      	ldrb	r3, [r3, #3]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d11f      	bne.n	800777c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	4413      	add	r3, r2
 8007744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	69fa      	ldr	r2, [r7, #28]
 800774c:	0151      	lsls	r1, r2, #5
 800774e:	6a3a      	ldr	r2, [r7, #32]
 8007750:	440a      	add	r2, r1
 8007752:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800775a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	4413      	add	r3, r2
 8007764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	6a3a      	ldr	r2, [r7, #32]
 8007770:	440a      	add	r2, r1
 8007772:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800777a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	7c9b      	ldrb	r3, [r3, #18]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d003      	beq.n	800778c <USB_HC_StartXfer+0x2ec>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	7c9b      	ldrb	r3, [r3, #18]
 8007788:	2b03      	cmp	r3, #3
 800778a:	d117      	bne.n	80077bc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007790:	2b01      	cmp	r3, #1
 8007792:	d113      	bne.n	80077bc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	78db      	ldrb	r3, [r3, #3]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d10f      	bne.n	80077bc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	6a3a      	ldr	r2, [r7, #32]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077ba:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	7c9b      	ldrb	r3, [r3, #18]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d162      	bne.n	800788a <USB_HC_StartXfer+0x3ea>
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	78db      	ldrb	r3, [r3, #3]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d15e      	bne.n	800788a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d858      	bhi.n	8007888 <USB_HC_StartXfer+0x3e8>
 80077d6:	a201      	add	r2, pc, #4	@ (adr r2, 80077dc <USB_HC_StartXfer+0x33c>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	080077ed 	.word	0x080077ed
 80077e0:	0800780f 	.word	0x0800780f
 80077e4:	08007831 	.word	0x08007831
 80077e8:	08007853 	.word	0x08007853
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	6a3a      	ldr	r2, [r7, #32]
 8007800:	440a      	add	r2, r1
 8007802:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800780a:	6053      	str	r3, [r2, #4]
          break;
 800780c:	e03d      	b.n	800788a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	4413      	add	r3, r2
 8007816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	6a3a      	ldr	r2, [r7, #32]
 8007822:	440a      	add	r2, r1
 8007824:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007828:	f043 030e 	orr.w	r3, r3, #14
 800782c:	6053      	str	r3, [r2, #4]
          break;
 800782e:	e02c      	b.n	800788a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	4413      	add	r3, r2
 8007838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	6a3a      	ldr	r2, [r7, #32]
 8007844:	440a      	add	r2, r1
 8007846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800784a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800784e:	6053      	str	r3, [r2, #4]
          break;
 8007850:	e01b      	b.n	800788a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	4413      	add	r3, r2
 800785a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	69fa      	ldr	r2, [r7, #28]
 8007862:	0151      	lsls	r1, r2, #5
 8007864:	6a3a      	ldr	r2, [r7, #32]
 8007866:	440a      	add	r2, r1
 8007868:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800786c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007870:	6053      	str	r3, [r2, #4]
          break;
 8007872:	e00a      	b.n	800788a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	4413      	add	r3, r2
 800787c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007880:	461a      	mov	r2, r3
 8007882:	2300      	movs	r3, #0
 8007884:	6053      	str	r3, [r2, #4]
 8007886:	e000      	b.n	800788a <USB_HC_StartXfer+0x3ea>
          break;
 8007888:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	4413      	add	r3, r2
 8007892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80078a0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	78db      	ldrb	r3, [r3, #3]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d004      	beq.n	80078b4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	e003      	b.n	80078bc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80078ba:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078c2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078d0:	461a      	mov	r2, r3
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80078d6:	79fb      	ldrb	r3, [r7, #7]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	e055      	b.n	800798c <USB_HC_StartXfer+0x4ec>
 80078e0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	78db      	ldrb	r3, [r3, #3]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d14e      	bne.n	800798a <USB_HC_StartXfer+0x4ea>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d04a      	beq.n	800798a <USB_HC_StartXfer+0x4ea>
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	79db      	ldrb	r3, [r3, #7]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d146      	bne.n	800798a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	7c9b      	ldrb	r3, [r3, #18]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d831      	bhi.n	8007968 <USB_HC_StartXfer+0x4c8>
 8007904:	a201      	add	r2, pc, #4	@ (adr r2, 800790c <USB_HC_StartXfer+0x46c>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	0800791d 	.word	0x0800791d
 8007910:	08007941 	.word	0x08007941
 8007914:	0800791d 	.word	0x0800791d
 8007918:	08007941 	.word	0x08007941
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	3303      	adds	r3, #3
 8007922:	089b      	lsrs	r3, r3, #2
 8007924:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007926:	8afa      	ldrh	r2, [r7, #22]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792c:	b29b      	uxth	r3, r3
 800792e:	429a      	cmp	r2, r3
 8007930:	d91c      	bls.n	800796c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	f043 0220 	orr.w	r2, r3, #32
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	619a      	str	r2, [r3, #24]
        }
        break;
 800793e:	e015      	b.n	800796c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	3303      	adds	r3, #3
 8007946:	089b      	lsrs	r3, r3, #2
 8007948:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800794a:	8afa      	ldrh	r2, [r7, #22]
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	b29b      	uxth	r3, r3
 8007956:	429a      	cmp	r2, r3
 8007958:	d90a      	bls.n	8007970 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	619a      	str	r2, [r3, #24]
        }
        break;
 8007966:	e003      	b.n	8007970 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007968:	bf00      	nop
 800796a:	e002      	b.n	8007972 <USB_HC_StartXfer+0x4d2>
        break;
 800796c:	bf00      	nop
 800796e:	e000      	b.n	8007972 <USB_HC_StartXfer+0x4d2>
        break;
 8007970:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6999      	ldr	r1, [r3, #24]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	785a      	ldrb	r2, [r3, #1]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	b29b      	uxth	r3, r3
 8007980:	2000      	movs	r0, #0
 8007982:	9000      	str	r0, [sp, #0]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7ff f9c9 	bl	8006d1c <USB_WritePacket>
  }

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3728      	adds	r7, #40	@ 0x28
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	b29b      	uxth	r3, r3
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b089      	sub	sp, #36	@ 0x24
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	0c9b      	lsrs	r3, r3, #18
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	0fdb      	lsrs	r3, r3, #31
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	0fdb      	lsrs	r3, r3, #31
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d10d      	bne.n	8007a38 <USB_HC_Halt+0x82>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <USB_HC_Halt+0x82>
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d002      	beq.n	8007a34 <USB_HC_Halt+0x7e>
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d101      	bne.n	8007a38 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	e0d8      	b.n	8007bea <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <USB_HC_Halt+0x8e>
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d173      	bne.n	8007b2c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	0151      	lsls	r1, r2, #5
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	440a      	add	r2, r1
 8007a5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a62:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d14a      	bne.n	8007b06 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d133      	bne.n	8007ae4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a9a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007aba:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ac8:	d82e      	bhi.n	8007b28 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007adc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ae0:	d0ec      	beq.n	8007abc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ae2:	e081      	b.n	8007be8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	0151      	lsls	r1, r2, #5
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	440a      	add	r2, r1
 8007afa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007afe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b02:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b04:	e070      	b.n	8007be8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	69fa      	ldr	r2, [r7, #28]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b24:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b26:	e05f      	b.n	8007be8 <USB_HC_Halt+0x232>
            break;
 8007b28:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b2a:	e05d      	b.n	8007be8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	0151      	lsls	r1, r2, #5
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	440a      	add	r2, r1
 8007b42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b4a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d133      	bne.n	8007bc4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b7a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	0151      	lsls	r1, r2, #5
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	440a      	add	r2, r1
 8007b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b9a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ba8:	d81d      	bhi.n	8007be6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bc0:	d0ec      	beq.n	8007b9c <USB_HC_Halt+0x1e6>
 8007bc2:	e011      	b.n	8007be8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	0151      	lsls	r1, r2, #5
 8007bd6:	69fa      	ldr	r2, [r7, #28]
 8007bd8:	440a      	add	r2, r1
 8007bda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	e000      	b.n	8007be8 <USB_HC_Halt+0x232>
          break;
 8007be6:	bf00      	nop
    }
  }

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3724      	adds	r7, #36	@ 0x24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
	...

08007bf8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007c08:	78fb      	ldrb	r3, [r7, #3]
 8007c0a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	04da      	lsls	r2, r3, #19
 8007c14:	4b15      	ldr	r3, [pc, #84]	@ (8007c6c <USB_DoPing+0x74>)
 8007c16:	4013      	ands	r3, r2
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	0151      	lsls	r1, r2, #5
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	440a      	add	r2, r1
 8007c20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c28:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c40:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c48:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c56:	461a      	mov	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	1ff80000 	.word	0x1ff80000

08007c70 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7fe ff8c 	bl	8006ba2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c8a:	2110      	movs	r1, #16
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7fe ffe5 	bl	8006c5c <USB_FlushTxFifo>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7ff f80f 	bl	8006cc0 <USB_FlushRxFifo>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007cac:	2300      	movs	r3, #0
 8007cae:	61bb      	str	r3, [r7, #24]
 8007cb0:	e01f      	b.n	8007cf2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cc8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007cd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007cd8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	61bb      	str	r3, [r7, #24]
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2b0f      	cmp	r3, #15
 8007cf6:	d9dc      	bls.n	8007cb2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	e034      	b.n	8007d68 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d24:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d32:	461a      	mov	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d44:	d80c      	bhi.n	8007d60 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d5c:	d0ec      	beq.n	8007d38 <USB_StopHost+0xc8>
 8007d5e:	e000      	b.n	8007d62 <USB_StopHost+0xf2>
        break;
 8007d60:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	3301      	adds	r3, #1
 8007d66:	61bb      	str	r3, [r7, #24]
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	2b0f      	cmp	r3, #15
 8007d6c:	d9c7      	bls.n	8007cfe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d74:	461a      	mov	r2, r3
 8007d76:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d82:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7fe fefb 	bl	8006b80 <USB_EnableGlobalInt>

  return ret;
 8007d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3720      	adds	r7, #32
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007d94:	b590      	push	{r4, r7, lr}
 8007d96:	b089      	sub	sp, #36	@ 0x24
 8007d98:	af04      	add	r7, sp, #16
 8007d9a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	2202      	movs	r2, #2
 8007da0:	2102      	movs	r1, #2
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fc85 	bl	80086b2 <USBH_FindInterface>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	2bff      	cmp	r3, #255	@ 0xff
 8007db0:	d002      	beq.n	8007db8 <USBH_CDC_InterfaceInit+0x24>
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d901      	bls.n	8007dbc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007db8:	2302      	movs	r3, #2
 8007dba:	e13d      	b.n	8008038 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fc5a 	bl	800867a <USBH_SelectInterface>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e131      	b.n	8008038 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007dda:	2050      	movs	r0, #80	@ 0x50
 8007ddc:	f002 fb64 	bl	800a4a8 <malloc>
 8007de0:	4603      	mov	r3, r0
 8007de2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007df4:	2302      	movs	r3, #2
 8007df6:	e11f      	b.n	8008038 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007df8:	2250      	movs	r2, #80	@ 0x50
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	68b8      	ldr	r0, [r7, #8]
 8007dfe:	f002 fc11 	bl	800a624 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	211a      	movs	r1, #26
 8007e08:	fb01 f303 	mul.w	r3, r1, r3
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	b25b      	sxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	da15      	bge.n	8007e46 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	211a      	movs	r1, #26
 8007e20:	fb01 f303 	mul.w	r3, r1, r3
 8007e24:	4413      	add	r3, r2
 8007e26:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e2a:	781a      	ldrb	r2, [r3, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	211a      	movs	r1, #26
 8007e36:	fb01 f303 	mul.w	r3, r1, r3
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007e40:	881a      	ldrh	r2, [r3, #0]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	785b      	ldrb	r3, [r3, #1]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 ffbe 	bl	8009dce <USBH_AllocPipe>
 8007e52:	4603      	mov	r3, r0
 8007e54:	461a      	mov	r2, r3
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	7819      	ldrb	r1, [r3, #0]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	7858      	ldrb	r0, [r3, #1]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	8952      	ldrh	r2, [r2, #10]
 8007e72:	9202      	str	r2, [sp, #8]
 8007e74:	2203      	movs	r2, #3
 8007e76:	9201      	str	r2, [sp, #4]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	4623      	mov	r3, r4
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 ff76 	bl	8009d70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f002 fa85 	bl	800a39c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007e92:	2300      	movs	r3, #0
 8007e94:	2200      	movs	r2, #0
 8007e96:	210a      	movs	r1, #10
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fc0a 	bl	80086b2 <USBH_FindInterface>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2bff      	cmp	r3, #255	@ 0xff
 8007ea6:	d002      	beq.n	8007eae <USBH_CDC_InterfaceInit+0x11a>
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d901      	bls.n	8007eb2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007eae:	2302      	movs	r3, #2
 8007eb0:	e0c2      	b.n	8008038 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	211a      	movs	r1, #26
 8007eb8:	fb01 f303 	mul.w	r3, r1, r3
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	b25b      	sxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	da16      	bge.n	8007ef8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	211a      	movs	r1, #26
 8007ed0:	fb01 f303 	mul.w	r3, r1, r3
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007eda:	781a      	ldrb	r2, [r3, #0]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	211a      	movs	r1, #26
 8007ee6:	fb01 f303 	mul.w	r3, r1, r3
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007ef0:	881a      	ldrh	r2, [r3, #0]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	835a      	strh	r2, [r3, #26]
 8007ef6:	e015      	b.n	8007f24 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	211a      	movs	r1, #26
 8007efe:	fb01 f303 	mul.w	r3, r1, r3
 8007f02:	4413      	add	r3, r2
 8007f04:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f08:	781a      	ldrb	r2, [r3, #0]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	211a      	movs	r1, #26
 8007f14:	fb01 f303 	mul.w	r3, r1, r3
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007f1e:	881a      	ldrh	r2, [r3, #0]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	211a      	movs	r1, #26
 8007f2a:	fb01 f303 	mul.w	r3, r1, r3
 8007f2e:	4413      	add	r3, r2
 8007f30:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	b25b      	sxtb	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	da16      	bge.n	8007f6a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	211a      	movs	r1, #26
 8007f42:	fb01 f303 	mul.w	r3, r1, r3
 8007f46:	4413      	add	r3, r2
 8007f48:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007f4c:	781a      	ldrb	r2, [r3, #0]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	211a      	movs	r1, #26
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007f62:	881a      	ldrh	r2, [r3, #0]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	835a      	strh	r2, [r3, #26]
 8007f68:	e015      	b.n	8007f96 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	211a      	movs	r1, #26
 8007f70:	fb01 f303 	mul.w	r3, r1, r3
 8007f74:	4413      	add	r3, r2
 8007f76:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	211a      	movs	r1, #26
 8007f86:	fb01 f303 	mul.w	r3, r1, r3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007f90:	881a      	ldrh	r2, [r3, #0]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	7b9b      	ldrb	r3, [r3, #14]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 ff16 	bl	8009dce <USBH_AllocPipe>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	7bdb      	ldrb	r3, [r3, #15]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 ff0c 	bl	8009dce <USBH_AllocPipe>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	461a      	mov	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	7b59      	ldrb	r1, [r3, #13]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	7b98      	ldrb	r0, [r3, #14]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	8b12      	ldrh	r2, [r2, #24]
 8007fd6:	9202      	str	r2, [sp, #8]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	9201      	str	r2, [sp, #4]
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	4623      	mov	r3, r4
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 fec4 	bl	8009d70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	7b19      	ldrb	r1, [r3, #12]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	7bd8      	ldrb	r0, [r3, #15]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	8b52      	ldrh	r2, [r2, #26]
 8008000:	9202      	str	r2, [sp, #8]
 8008002:	2202      	movs	r2, #2
 8008004:	9201      	str	r2, [sp, #4]
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	4623      	mov	r3, r4
 800800a:	4602      	mov	r2, r0
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 feaf 	bl	8009d70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	7b5b      	ldrb	r3, [r3, #13]
 800801e:	2200      	movs	r2, #0
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f002 f9ba 	bl	800a39c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	7b1b      	ldrb	r3, [r3, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f002 f9b3 	bl	800a39c <USBH_LL_SetToggle>

  return USBH_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	bd90      	pop	{r4, r7, pc}

08008040 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00e      	beq.n	8008078 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 fea4 	bl	8009dae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 fecf 	bl	8009e10 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	7b1b      	ldrb	r3, [r3, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00e      	beq.n	800809e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	7b1b      	ldrb	r3, [r3, #12]
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 fe91 	bl	8009dae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	7b1b      	ldrb	r3, [r3, #12]
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 febc 	bl	8009e10 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	7b5b      	ldrb	r3, [r3, #13]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00e      	beq.n	80080c4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	7b5b      	ldrb	r3, [r3, #13]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 fe7e 	bl	8009dae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	7b5b      	ldrb	r3, [r3, #13]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f001 fea9 	bl	8009e10 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00b      	beq.n	80080e8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	4618      	mov	r0, r3
 80080da:	f002 f9ed 	bl	800a4b8 <free>
    phost->pActiveClass->pData = 0U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080e4:	2200      	movs	r2, #0
 80080e6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3340      	adds	r3, #64	@ 0x40
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f8b1 	bl	8008272 <GetLineCoding>
 8008110:	4603      	mov	r3, r0
 8008112:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008114:	7afb      	ldrb	r3, [r7, #11]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d105      	bne.n	8008126 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008120:	2102      	movs	r1, #2
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008126:	7afb      	ldrb	r3, [r7, #11]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008138:	2301      	movs	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008150:	2b04      	cmp	r3, #4
 8008152:	d877      	bhi.n	8008244 <USBH_CDC_Process+0x114>
 8008154:	a201      	add	r2, pc, #4	@ (adr r2, 800815c <USBH_CDC_Process+0x2c>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	08008171 	.word	0x08008171
 8008160:	08008177 	.word	0x08008177
 8008164:	080081a7 	.word	0x080081a7
 8008168:	0800821b 	.word	0x0800821b
 800816c:	08008229 	.word	0x08008229
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73fb      	strb	r3, [r7, #15]
      break;
 8008174:	e06d      	b.n	8008252 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f897 	bl	80082b0 <SetLineCoding>
 8008182:	4603      	mov	r3, r0
 8008184:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d104      	bne.n	8008196 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008194:	e058      	b.n	8008248 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d055      	beq.n	8008248 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2204      	movs	r2, #4
 80081a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80081a4:	e050      	b.n	8008248 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	3340      	adds	r3, #64	@ 0x40
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f860 	bl	8008272 <GetLineCoding>
 80081b2:	4603      	mov	r3, r0
 80081b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d126      	bne.n	800820a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ce:	791b      	ldrb	r3, [r3, #4]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d13b      	bne.n	800824c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081de:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d133      	bne.n	800824c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d12b      	bne.n	800824c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081fc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80081fe:	429a      	cmp	r2, r3
 8008200:	d124      	bne.n	800824c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f958 	bl	80084b8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008208:	e020      	b.n	800824c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d01d      	beq.n	800824c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2204      	movs	r2, #4
 8008214:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008218:	e018      	b.n	800824c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f867 	bl	80082ee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f8da 	bl	80083da <CDC_ProcessReception>
      break;
 8008226:	e014      	b.n	8008252 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008228:	2100      	movs	r1, #0
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 f81a 	bl	8009264 <USBH_ClrFeature>
 8008230:	4603      	mov	r3, r0
 8008232:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008242:	e005      	b.n	8008250 <USBH_CDC_Process+0x120>

    default:
      break;
 8008244:	bf00      	nop
 8008246:	e004      	b.n	8008252 <USBH_CDC_Process+0x122>
      break;
 8008248:	bf00      	nop
 800824a:	e002      	b.n	8008252 <USBH_CDC_Process+0x122>
      break;
 800824c:	bf00      	nop
 800824e:	e000      	b.n	8008252 <USBH_CDC_Process+0x122>
      break;
 8008250:	bf00      	nop

  }

  return status;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	22a1      	movs	r2, #161	@ 0xa1
 8008280:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2221      	movs	r2, #33	@ 0x21
 8008286:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2207      	movs	r2, #7
 8008298:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2207      	movs	r2, #7
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 fb14 	bl	80098ce <USBH_CtlReq>
 80082a6:	4603      	mov	r3, r0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2221      	movs	r2, #33	@ 0x21
 80082be:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2207      	movs	r2, #7
 80082d6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2207      	movs	r2, #7
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 faf5 	bl	80098ce <USBH_CtlReq>
 80082e4:	4603      	mov	r3, r0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b086      	sub	sp, #24
 80082f2:	af02      	add	r7, sp, #8
 80082f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008300:	2300      	movs	r3, #0
 8008302:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800830a:	2b01      	cmp	r3, #1
 800830c:	d002      	beq.n	8008314 <CDC_ProcessTransmission+0x26>
 800830e:	2b02      	cmp	r3, #2
 8008310:	d023      	beq.n	800835a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008312:	e05e      	b.n	80083d2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	8b12      	ldrh	r2, [r2, #24]
 800831c:	4293      	cmp	r3, r2
 800831e:	d90b      	bls.n	8008338 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	69d9      	ldr	r1, [r3, #28]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8b1a      	ldrh	r2, [r3, #24]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	7b5b      	ldrb	r3, [r3, #13]
 800832c:	2001      	movs	r0, #1
 800832e:	9000      	str	r0, [sp, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 fcda 	bl	8009cea <USBH_BulkSendData>
 8008336:	e00b      	b.n	8008350 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008340:	b29a      	uxth	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	7b5b      	ldrb	r3, [r3, #13]
 8008346:	2001      	movs	r0, #1
 8008348:	9000      	str	r0, [sp, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f001 fccd 	bl	8009cea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008358:	e03b      	b.n	80083d2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	7b5b      	ldrb	r3, [r3, #13]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 fff1 	bl	800a348 <USBH_LL_GetURBState>
 8008366:	4603      	mov	r3, r0
 8008368:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800836a:	7afb      	ldrb	r3, [r7, #11]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d128      	bne.n	80083c2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	8b12      	ldrh	r2, [r2, #24]
 8008378:	4293      	cmp	r3, r2
 800837a:	d90e      	bls.n	800839a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	8b12      	ldrh	r2, [r2, #24]
 8008384:	1a9a      	subs	r2, r3, r2
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	8b12      	ldrh	r2, [r2, #24]
 8008392:	441a      	add	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	61da      	str	r2, [r3, #28]
 8008398:	e002      	b.n	80083a0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d004      	beq.n	80083b2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80083b0:	e00e      	b.n	80083d0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f868 	bl	8008490 <USBH_CDC_TransmitCallback>
      break;
 80083c0:	e006      	b.n	80083d0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80083c2:	7afb      	ldrb	r3, [r7, #11]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d103      	bne.n	80083d0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80083d0:	bf00      	nop
  }
}
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b086      	sub	sp, #24
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083ec:	2300      	movs	r3, #0
 80083ee:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d002      	beq.n	8008400 <CDC_ProcessReception+0x26>
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d00e      	beq.n	800841c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80083fe:	e043      	b.n	8008488 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	6a19      	ldr	r1, [r3, #32]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	8b5a      	ldrh	r2, [r3, #26]
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	7b1b      	ldrb	r3, [r3, #12]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 fc91 	bl	8009d34 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2204      	movs	r2, #4
 8008416:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800841a:	e035      	b.n	8008488 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	7b1b      	ldrb	r3, [r3, #12]
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 ff90 	bl	800a348 <USBH_LL_GetURBState>
 8008428:	4603      	mov	r3, r0
 800842a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800842c:	7cfb      	ldrb	r3, [r7, #19]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d129      	bne.n	8008486 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	7b1b      	ldrb	r3, [r3, #12]
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f001 fef3 	bl	800a224 <USBH_LL_GetLastXferSize>
 800843e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	429a      	cmp	r2, r3
 8008448:	d016      	beq.n	8008478 <CDC_ProcessReception+0x9e>
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	8b5b      	ldrh	r3, [r3, #26]
 800844e:	461a      	mov	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4293      	cmp	r3, r2
 8008454:	d910      	bls.n	8008478 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	1ad2      	subs	r2, r2, r3
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	6a1a      	ldr	r2, [r3, #32]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	441a      	add	r2, r3
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2203      	movs	r2, #3
 8008472:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008476:	e006      	b.n	8008486 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f80f 	bl	80084a4 <USBH_CDC_ReceiveCallback>
      break;
 8008486:	bf00      	nop
  }
}
 8008488:	bf00      	nop
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80084e0:	2302      	movs	r3, #2
 80084e2:	e029      	b.n	8008538 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	79fa      	ldrb	r2, [r7, #7]
 80084e8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 f81f 	bl	8008540 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f001 fdc3 	bl	800a0bc <USBH_LL_Init>

  return USBH_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008548:	2300      	movs	r3, #0
 800854a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800854c:	2300      	movs	r3, #0
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	e009      	b.n	8008566 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	33e0      	adds	r3, #224	@ 0xe0
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	2200      	movs	r2, #0
 800855e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3301      	adds	r3, #1
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b0f      	cmp	r3, #15
 800856a:	d9f2      	bls.n	8008552 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e009      	b.n	8008586 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4413      	add	r3, r2
 8008578:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800857c:	2200      	movs	r2, #0
 800857e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3301      	adds	r3, #1
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800858c:	d3f1      	bcc.n	8008572 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2240      	movs	r2, #64	@ 0x40
 80085b2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	331c      	adds	r3, #28
 80085de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085e2:	2100      	movs	r1, #0
 80085e4:	4618      	mov	r0, r3
 80085e6:	f002 f81d 	bl	800a624 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80085f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085f4:	2100      	movs	r1, #0
 80085f6:	4618      	mov	r0, r3
 80085f8:	f002 f814 	bl	800a624 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008602:	2212      	movs	r2, #18
 8008604:	2100      	movs	r1, #0
 8008606:	4618      	mov	r0, r3
 8008608:	f002 f80c 	bl	800a624 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008612:	223e      	movs	r2, #62	@ 0x3e
 8008614:	2100      	movs	r1, #0
 8008616:	4618      	mov	r0, r3
 8008618:	f002 f804 	bl	800a624 <memset>

  return USBH_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008626:	b480      	push	{r7}
 8008628:	b085      	sub	sp, #20
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d016      	beq.n	8008668 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10e      	bne.n	8008662 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800864a:	1c59      	adds	r1, r3, #1
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	33de      	adds	r3, #222	@ 0xde
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	73fb      	strb	r3, [r7, #15]
 8008660:	e004      	b.n	800866c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008662:	2302      	movs	r3, #2
 8008664:	73fb      	strb	r3, [r7, #15]
 8008666:	e001      	b.n	800866c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008668:	2302      	movs	r3, #2
 800866a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008690:	78fa      	ldrb	r2, [r7, #3]
 8008692:	429a      	cmp	r2, r3
 8008694:	d204      	bcs.n	80086a0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	78fa      	ldrb	r2, [r7, #3]
 800869a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800869e:	e001      	b.n	80086a4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80086a0:	2302      	movs	r3, #2
 80086a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b087      	sub	sp, #28
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	4608      	mov	r0, r1
 80086bc:	4611      	mov	r1, r2
 80086be:	461a      	mov	r2, r3
 80086c0:	4603      	mov	r3, r0
 80086c2:	70fb      	strb	r3, [r7, #3]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70bb      	strb	r3, [r7, #2]
 80086c8:	4613      	mov	r3, r2
 80086ca:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80086d0:	2300      	movs	r3, #0
 80086d2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80086da:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80086dc:	e025      	b.n	800872a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	221a      	movs	r2, #26
 80086e2:	fb02 f303 	mul.w	r3, r2, r3
 80086e6:	3308      	adds	r3, #8
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	4413      	add	r3, r2
 80086ec:	3302      	adds	r3, #2
 80086ee:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	795b      	ldrb	r3, [r3, #5]
 80086f4:	78fa      	ldrb	r2, [r7, #3]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d002      	beq.n	8008700 <USBH_FindInterface+0x4e>
 80086fa:	78fb      	ldrb	r3, [r7, #3]
 80086fc:	2bff      	cmp	r3, #255	@ 0xff
 80086fe:	d111      	bne.n	8008724 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008704:	78ba      	ldrb	r2, [r7, #2]
 8008706:	429a      	cmp	r2, r3
 8008708:	d002      	beq.n	8008710 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800870a:	78bb      	ldrb	r3, [r7, #2]
 800870c:	2bff      	cmp	r3, #255	@ 0xff
 800870e:	d109      	bne.n	8008724 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008714:	787a      	ldrb	r2, [r7, #1]
 8008716:	429a      	cmp	r2, r3
 8008718:	d002      	beq.n	8008720 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800871a:	787b      	ldrb	r3, [r7, #1]
 800871c:	2bff      	cmp	r3, #255	@ 0xff
 800871e:	d101      	bne.n	8008724 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	e006      	b.n	8008732 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	3301      	adds	r3, #1
 8008728:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d9d6      	bls.n	80086de <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008730:	23ff      	movs	r3, #255	@ 0xff
}
 8008732:	4618      	mov	r0, r3
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f001 fcf4 	bl	800a134 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800874c:	2101      	movs	r1, #1
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fe0d 	bl	800a36e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b088      	sub	sp, #32
 8008764:	af04      	add	r7, sp, #16
 8008766:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008768:	2302      	movs	r3, #2
 800876a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b01      	cmp	r3, #1
 800877a:	d102      	bne.n	8008782 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2203      	movs	r2, #3
 8008780:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b0b      	cmp	r3, #11
 800878a:	f200 81bb 	bhi.w	8008b04 <USBH_Process+0x3a4>
 800878e:	a201      	add	r2, pc, #4	@ (adr r2, 8008794 <USBH_Process+0x34>)
 8008790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008794:	080087c5 	.word	0x080087c5
 8008798:	080087f7 	.word	0x080087f7
 800879c:	0800885f 	.word	0x0800885f
 80087a0:	08008a9f 	.word	0x08008a9f
 80087a4:	08008b05 	.word	0x08008b05
 80087a8:	080088ff 	.word	0x080088ff
 80087ac:	08008a45 	.word	0x08008a45
 80087b0:	08008935 	.word	0x08008935
 80087b4:	08008955 	.word	0x08008955
 80087b8:	08008973 	.word	0x08008973
 80087bc:	080089b7 	.word	0x080089b7
 80087c0:	08008a87 	.word	0x08008a87
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 819b 	beq.w	8008b08 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80087d8:	20c8      	movs	r0, #200	@ 0xc8
 80087da:	f001 fe12 	bl	800a402 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 fd05 	bl	800a1ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80087f4:	e188      	b.n	8008b08 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d107      	bne.n	8008810 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2202      	movs	r2, #2
 800880c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800880e:	e18a      	b.n	8008b26 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008816:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800881a:	d914      	bls.n	8008846 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008822:	3301      	adds	r3, #1
 8008824:	b2da      	uxtb	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008832:	2b03      	cmp	r3, #3
 8008834:	d903      	bls.n	800883e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	220d      	movs	r2, #13
 800883a:	701a      	strb	r2, [r3, #0]
      break;
 800883c:	e173      	b.n	8008b26 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	701a      	strb	r2, [r3, #0]
      break;
 8008844:	e16f      	b.n	8008b26 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800884c:	f103 020a 	add.w	r2, r3, #10
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008856:	200a      	movs	r0, #10
 8008858:	f001 fdd3 	bl	800a402 <USBH_Delay>
      break;
 800885c:	e163      	b.n	8008b26 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800886e:	2104      	movs	r1, #4
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008874:	2064      	movs	r0, #100	@ 0x64
 8008876:	f001 fdc4 	bl	800a402 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f001 fc90 	bl	800a1a0 <USBH_LL_GetSpeed>
 8008880:	4603      	mov	r3, r0
 8008882:	461a      	mov	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2205      	movs	r2, #5
 800888e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008890:	2100      	movs	r1, #0
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 fa9b 	bl	8009dce <USBH_AllocPipe>
 8008898:	4603      	mov	r3, r0
 800889a:	461a      	mov	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80088a0:	2180      	movs	r1, #128	@ 0x80
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 fa93 	bl	8009dce <USBH_AllocPipe>
 80088a8:	4603      	mov	r3, r0
 80088aa:	461a      	mov	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	7919      	ldrb	r1, [r3, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80088c4:	9202      	str	r2, [sp, #8]
 80088c6:	2200      	movs	r2, #0
 80088c8:	9201      	str	r2, [sp, #4]
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	4603      	mov	r3, r0
 80088ce:	2280      	movs	r2, #128	@ 0x80
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 fa4d 	bl	8009d70 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	7959      	ldrb	r1, [r3, #5]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80088ea:	9202      	str	r2, [sp, #8]
 80088ec:	2200      	movs	r2, #0
 80088ee:	9201      	str	r2, [sp, #4]
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	4603      	mov	r3, r0
 80088f4:	2200      	movs	r2, #0
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 fa3a 	bl	8009d70 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088fc:	e113      	b.n	8008b26 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f916 	bl	8008b30 <USBH_HandleEnum>
 8008904:	4603      	mov	r3, r0
 8008906:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	f040 80fd 	bne.w	8008b0c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008920:	2b01      	cmp	r3, #1
 8008922:	d103      	bne.n	800892c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2208      	movs	r2, #8
 8008928:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800892a:	e0ef      	b.n	8008b0c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2207      	movs	r2, #7
 8008930:	701a      	strb	r2, [r3, #0]
      break;
 8008932:	e0eb      	b.n	8008b0c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 80e8 	beq.w	8008b10 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008946:	2101      	movs	r1, #1
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2208      	movs	r2, #8
 8008950:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008952:	e0dd      	b.n	8008b10 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fc3a 	bl	80091d6 <USBH_SetCfg>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	f040 80d5 	bne.w	8008b14 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2209      	movs	r2, #9
 800896e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008970:	e0d0      	b.n	8008b14 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	d016      	beq.n	80089ae <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008980:	2101      	movs	r1, #1
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fc4a 	bl	800921c <USBH_SetFeature>
 8008988:	4603      	mov	r3, r0
 800898a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d103      	bne.n	800899c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	220a      	movs	r2, #10
 8008998:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800899a:	e0bd      	b.n	8008b18 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	f040 80b9 	bne.w	8008b18 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	220a      	movs	r2, #10
 80089aa:	701a      	strb	r2, [r3, #0]
      break;
 80089ac:	e0b4      	b.n	8008b18 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	220a      	movs	r2, #10
 80089b2:	701a      	strb	r2, [r3, #0]
      break;
 80089b4:	e0b0      	b.n	8008b18 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 80ad 	beq.w	8008b1c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80089ca:	2300      	movs	r3, #0
 80089cc:	73fb      	strb	r3, [r7, #15]
 80089ce:	e016      	b.n	80089fe <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80089d0:	7bfa      	ldrb	r2, [r7, #15]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	32de      	adds	r2, #222	@ 0xde
 80089d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089da:	791a      	ldrb	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d108      	bne.n	80089f8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80089e6:	7bfa      	ldrb	r2, [r7, #15]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	32de      	adds	r2, #222	@ 0xde
 80089ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80089f6:	e005      	b.n	8008a04 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	3301      	adds	r3, #1
 80089fc:	73fb      	strb	r3, [r7, #15]
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d0e5      	beq.n	80089d0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d016      	beq.n	8008a3c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	4798      	blx	r3
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d109      	bne.n	8008a34 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2206      	movs	r2, #6
 8008a24:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a2c:	2103      	movs	r1, #3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a32:	e073      	b.n	8008b1c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	220d      	movs	r2, #13
 8008a38:	701a      	strb	r2, [r3, #0]
      break;
 8008a3a:	e06f      	b.n	8008b1c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	220d      	movs	r2, #13
 8008a40:	701a      	strb	r2, [r3, #0]
      break;
 8008a42:	e06b      	b.n	8008b1c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d017      	beq.n	8008a7e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	4798      	blx	r3
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008a5e:	7bbb      	ldrb	r3, [r7, #14]
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d103      	bne.n	8008a6e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	220b      	movs	r2, #11
 8008a6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a6c:	e058      	b.n	8008b20 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d154      	bne.n	8008b20 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	220d      	movs	r2, #13
 8008a7a:	701a      	strb	r2, [r3, #0]
      break;
 8008a7c:	e050      	b.n	8008b20 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	220d      	movs	r2, #13
 8008a82:	701a      	strb	r2, [r3, #0]
      break;
 8008a84:	e04c      	b.n	8008b20 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d049      	beq.n	8008b24 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	4798      	blx	r3
      }
      break;
 8008a9c:	e042      	b.n	8008b24 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff fd4a 	bl	8008540 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d009      	beq.n	8008aca <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ada:	2105      	movs	r1, #5
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d107      	bne.n	8008afc <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7ff fe22 	bl	800873e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008afa:	e014      	b.n	8008b26 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 fb19 	bl	800a134 <USBH_LL_Start>
      break;
 8008b02:	e010      	b.n	8008b26 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008b04:	bf00      	nop
 8008b06:	e00e      	b.n	8008b26 <USBH_Process+0x3c6>
      break;
 8008b08:	bf00      	nop
 8008b0a:	e00c      	b.n	8008b26 <USBH_Process+0x3c6>
      break;
 8008b0c:	bf00      	nop
 8008b0e:	e00a      	b.n	8008b26 <USBH_Process+0x3c6>
    break;
 8008b10:	bf00      	nop
 8008b12:	e008      	b.n	8008b26 <USBH_Process+0x3c6>
      break;
 8008b14:	bf00      	nop
 8008b16:	e006      	b.n	8008b26 <USBH_Process+0x3c6>
      break;
 8008b18:	bf00      	nop
 8008b1a:	e004      	b.n	8008b26 <USBH_Process+0x3c6>
      break;
 8008b1c:	bf00      	nop
 8008b1e:	e002      	b.n	8008b26 <USBH_Process+0x3c6>
      break;
 8008b20:	bf00      	nop
 8008b22:	e000      	b.n	8008b26 <USBH_Process+0x3c6>
      break;
 8008b24:	bf00      	nop
  }
  return USBH_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af04      	add	r7, sp, #16
 8008b36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	785b      	ldrb	r3, [r3, #1]
 8008b44:	2b07      	cmp	r3, #7
 8008b46:	f200 81bd 	bhi.w	8008ec4 <USBH_HandleEnum+0x394>
 8008b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b50 <USBH_HandleEnum+0x20>)
 8008b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b50:	08008b71 	.word	0x08008b71
 8008b54:	08008c2b 	.word	0x08008c2b
 8008b58:	08008c95 	.word	0x08008c95
 8008b5c:	08008d1f 	.word	0x08008d1f
 8008b60:	08008d89 	.word	0x08008d89
 8008b64:	08008df9 	.word	0x08008df9
 8008b68:	08008e3f 	.word	0x08008e3f
 8008b6c:	08008e85 	.word	0x08008e85
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008b70:	2108      	movs	r1, #8
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa4c 	bl	8009010 <USBH_Get_DevDesc>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d12e      	bne.n	8008be0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	7919      	ldrb	r1, [r3, #4]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ba6:	9202      	str	r2, [sp, #8]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	9201      	str	r2, [sp, #4]
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2280      	movs	r2, #128	@ 0x80
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 f8dc 	bl	8009d70 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	7959      	ldrb	r1, [r3, #5]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008bcc:	9202      	str	r2, [sp, #8]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	9201      	str	r2, [sp, #4]
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f001 f8c9 	bl	8009d70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008bde:	e173      	b.n	8008ec8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	f040 8170 	bne.w	8008ec8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008bee:	3301      	adds	r3, #1
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d903      	bls.n	8008c0a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	220d      	movs	r2, #13
 8008c06:	701a      	strb	r2, [r3, #0]
      break;
 8008c08:	e15e      	b.n	8008ec8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	795b      	ldrb	r3, [r3, #5]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 f8fd 	bl	8009e10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	791b      	ldrb	r3, [r3, #4]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 f8f7 	bl	8009e10 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	701a      	strb	r2, [r3, #0]
      break;
 8008c28:	e14e      	b.n	8008ec8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008c2a:	2112      	movs	r1, #18
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f9ef 	bl	8009010 <USBH_Get_DevDesc>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c36:	7bbb      	ldrb	r3, [r7, #14]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d103      	bne.n	8008c44 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c42:	e143      	b.n	8008ecc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	f040 8140 	bne.w	8008ecc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c52:	3301      	adds	r3, #1
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d903      	bls.n	8008c6e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	220d      	movs	r2, #13
 8008c6a:	701a      	strb	r2, [r3, #0]
      break;
 8008c6c:	e12e      	b.n	8008ecc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	795b      	ldrb	r3, [r3, #5]
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 f8cb 	bl	8009e10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	791b      	ldrb	r3, [r3, #4]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 f8c5 	bl	8009e10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	701a      	strb	r2, [r3, #0]
      break;
 8008c92:	e11b      	b.n	8008ecc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008c94:	2101      	movs	r1, #1
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa79 	bl	800918e <USBH_SetAddress>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d130      	bne.n	8008d08 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008ca6:	2002      	movs	r0, #2
 8008ca8:	f001 fbab 	bl	800a402 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2203      	movs	r2, #3
 8008cb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	7919      	ldrb	r1, [r3, #4]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008cce:	9202      	str	r2, [sp, #8]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	9201      	str	r2, [sp, #4]
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2280      	movs	r2, #128	@ 0x80
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 f848 	bl	8009d70 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	7959      	ldrb	r1, [r3, #5]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008cf4:	9202      	str	r2, [sp, #8]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	9201      	str	r2, [sp, #4]
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2200      	movs	r2, #0
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 f835 	bl	8009d70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008d06:	e0e3      	b.n	8008ed0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	f040 80e0 	bne.w	8008ed0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	220d      	movs	r2, #13
 8008d14:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	705a      	strb	r2, [r3, #1]
      break;
 8008d1c:	e0d8      	b.n	8008ed0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008d1e:	2109      	movs	r1, #9
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f9a1 	bl	8009068 <USBH_Get_CfgDesc>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d103      	bne.n	8008d38 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2204      	movs	r2, #4
 8008d34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008d36:	e0cd      	b.n	8008ed4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	f040 80ca 	bne.w	8008ed4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d46:	3301      	adds	r3, #1
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d903      	bls.n	8008d62 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	220d      	movs	r2, #13
 8008d5e:	701a      	strb	r2, [r3, #0]
      break;
 8008d60:	e0b8      	b.n	8008ed4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	795b      	ldrb	r3, [r3, #5]
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 f851 	bl	8009e10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	791b      	ldrb	r3, [r3, #4]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 f84b 	bl	8009e10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	701a      	strb	r2, [r3, #0]
      break;
 8008d86:	e0a5      	b.n	8008ed4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f969 	bl	8009068 <USBH_Get_CfgDesc>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d103      	bne.n	8008da8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2205      	movs	r2, #5
 8008da4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008da6:	e097      	b.n	8008ed8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	f040 8094 	bne.w	8008ed8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008db6:	3301      	adds	r3, #1
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d903      	bls.n	8008dd2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	220d      	movs	r2, #13
 8008dce:	701a      	strb	r2, [r3, #0]
      break;
 8008dd0:	e082      	b.n	8008ed8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	795b      	ldrb	r3, [r3, #5]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f001 f819 	bl	8009e10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	791b      	ldrb	r3, [r3, #4]
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f001 f813 	bl	8009e10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	701a      	strb	r2, [r3, #0]
      break;
 8008df6:	e06f      	b.n	8008ed8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d019      	beq.n	8008e36 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008e0e:	23ff      	movs	r3, #255	@ 0xff
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f953 	bl	80090bc <USBH_Get_StringDesc>
 8008e16:	4603      	mov	r3, r0
 8008e18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d103      	bne.n	8008e28 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2206      	movs	r2, #6
 8008e24:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e26:	e059      	b.n	8008edc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d156      	bne.n	8008edc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2206      	movs	r2, #6
 8008e32:	705a      	strb	r2, [r3, #1]
      break;
 8008e34:	e052      	b.n	8008edc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2206      	movs	r2, #6
 8008e3a:	705a      	strb	r2, [r3, #1]
      break;
 8008e3c:	e04e      	b.n	8008edc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d019      	beq.n	8008e7c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008e54:	23ff      	movs	r3, #255	@ 0xff
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f930 	bl	80090bc <USBH_Get_StringDesc>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d103      	bne.n	8008e6e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2207      	movs	r2, #7
 8008e6a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e6c:	e038      	b.n	8008ee0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d135      	bne.n	8008ee0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2207      	movs	r2, #7
 8008e78:	705a      	strb	r2, [r3, #1]
      break;
 8008e7a:	e031      	b.n	8008ee0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2207      	movs	r2, #7
 8008e80:	705a      	strb	r2, [r3, #1]
      break;
 8008e82:	e02d      	b.n	8008ee0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d017      	beq.n	8008ebe <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008e9a:	23ff      	movs	r3, #255	@ 0xff
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f90d 	bl	80090bc <USBH_Get_StringDesc>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d102      	bne.n	8008eb2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008eb0:	e018      	b.n	8008ee4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d115      	bne.n	8008ee4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	73fb      	strb	r3, [r7, #15]
      break;
 8008ebc:	e012      	b.n	8008ee4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ec2:	e00f      	b.n	8008ee4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008ec4:	bf00      	nop
 8008ec6:	e00e      	b.n	8008ee6 <USBH_HandleEnum+0x3b6>
      break;
 8008ec8:	bf00      	nop
 8008eca:	e00c      	b.n	8008ee6 <USBH_HandleEnum+0x3b6>
      break;
 8008ecc:	bf00      	nop
 8008ece:	e00a      	b.n	8008ee6 <USBH_HandleEnum+0x3b6>
      break;
 8008ed0:	bf00      	nop
 8008ed2:	e008      	b.n	8008ee6 <USBH_HandleEnum+0x3b6>
      break;
 8008ed4:	bf00      	nop
 8008ed6:	e006      	b.n	8008ee6 <USBH_HandleEnum+0x3b6>
      break;
 8008ed8:	bf00      	nop
 8008eda:	e004      	b.n	8008ee6 <USBH_HandleEnum+0x3b6>
      break;
 8008edc:	bf00      	nop
 8008ede:	e002      	b.n	8008ee6 <USBH_HandleEnum+0x3b6>
      break;
 8008ee0:	bf00      	nop
 8008ee2:	e000      	b.n	8008ee6 <USBH_HandleEnum+0x3b6>
      break;
 8008ee4:	bf00      	nop
  }
  return Status;
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008f02:	bf00      	nop
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b082      	sub	sp, #8
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f1c:	1c5a      	adds	r2, r3, #1
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f804 	bl	8008f32 <USBH_HandleSof>
}
 8008f2a:	bf00      	nop
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b082      	sub	sp, #8
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b0b      	cmp	r3, #11
 8008f42:	d10a      	bne.n	8008f5a <USBH_HandleSof+0x28>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d005      	beq.n	8008f5a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
  }
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b083      	sub	sp, #12
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008f72:	bf00      	nop
}
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008f8e:	bf00      	nop
}
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b083      	sub	sp, #12
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 f8be 	bl	800a16a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	791b      	ldrb	r3, [r3, #4]
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 ff0b 	bl	8009e10 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	795b      	ldrb	r3, [r3, #5]
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 ff05 	bl	8009e10 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af02      	add	r7, sp, #8
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800901c:	887b      	ldrh	r3, [r7, #2]
 800901e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009022:	d901      	bls.n	8009028 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009024:	2303      	movs	r3, #3
 8009026:	e01b      	b.n	8009060 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800902e:	887b      	ldrh	r3, [r7, #2]
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	4613      	mov	r3, r2
 8009034:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009038:	2100      	movs	r1, #0
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f872 	bl	8009124 <USBH_GetDescriptor>
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d109      	bne.n	800905e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009050:	887a      	ldrh	r2, [r7, #2]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f929 	bl	80092ac <USBH_ParseDevDesc>
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800905e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af02      	add	r7, sp, #8
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	331c      	adds	r3, #28
 8009078:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800907a:	887b      	ldrh	r3, [r7, #2]
 800907c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009080:	d901      	bls.n	8009086 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009082:	2303      	movs	r3, #3
 8009084:	e016      	b.n	80090b4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009086:	887b      	ldrh	r3, [r7, #2]
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009090:	2100      	movs	r1, #0
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f846 	bl	8009124 <USBH_GetDescriptor>
 8009098:	4603      	mov	r3, r0
 800909a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d107      	bne.n	80090b2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80090a2:	887b      	ldrh	r3, [r7, #2]
 80090a4:	461a      	mov	r2, r3
 80090a6:	68b9      	ldr	r1, [r7, #8]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f9af 	bl	800940c <USBH_ParseCfgDesc>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	607a      	str	r2, [r7, #4]
 80090c6:	461a      	mov	r2, r3
 80090c8:	460b      	mov	r3, r1
 80090ca:	72fb      	strb	r3, [r7, #11]
 80090cc:	4613      	mov	r3, r2
 80090ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80090d0:	893b      	ldrh	r3, [r7, #8]
 80090d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090d6:	d802      	bhi.n	80090de <USBH_Get_StringDesc+0x22>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80090de:	2303      	movs	r3, #3
 80090e0:	e01c      	b.n	800911c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80090e2:	7afb      	ldrb	r3, [r7, #11]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80090ea:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80090f2:	893b      	ldrh	r3, [r7, #8]
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	460b      	mov	r3, r1
 80090f8:	2100      	movs	r1, #0
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 f812 	bl	8009124 <USBH_GetDescriptor>
 8009100:	4603      	mov	r3, r0
 8009102:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009104:	7dfb      	ldrb	r3, [r7, #23]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d107      	bne.n	800911a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009110:	893a      	ldrh	r2, [r7, #8]
 8009112:	6879      	ldr	r1, [r7, #4]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 fb8d 	bl	8009834 <USBH_ParseStringDesc>
  }

  return status;
 800911a:	7dfb      	ldrb	r3, [r7, #23]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	607b      	str	r3, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	72fb      	strb	r3, [r7, #11]
 8009132:	4613      	mov	r3, r2
 8009134:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	789b      	ldrb	r3, [r3, #2]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d11c      	bne.n	8009178 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800913e:	7afb      	ldrb	r3, [r7, #11]
 8009140:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009144:	b2da      	uxtb	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2206      	movs	r2, #6
 800914e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	893a      	ldrh	r2, [r7, #8]
 8009154:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009156:	893b      	ldrh	r3, [r7, #8]
 8009158:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800915c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009160:	d104      	bne.n	800916c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f240 4209 	movw	r2, #1033	@ 0x409
 8009168:	829a      	strh	r2, [r3, #20]
 800916a:	e002      	b.n	8009172 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	8b3a      	ldrh	r2, [r7, #24]
 8009176:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009178:	8b3b      	ldrh	r3, [r7, #24]
 800917a:	461a      	mov	r2, r3
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 fba5 	bl	80098ce <USBH_CtlReq>
 8009184:	4603      	mov	r3, r0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	460b      	mov	r3, r1
 8009198:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	789b      	ldrb	r3, [r3, #2]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d10f      	bne.n	80091c2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2205      	movs	r2, #5
 80091ac:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80091c2:	2200      	movs	r2, #0
 80091c4:	2100      	movs	r1, #0
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fb81 	bl	80098ce <USBH_CtlReq>
 80091cc:	4603      	mov	r3, r0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b082      	sub	sp, #8
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	460b      	mov	r3, r1
 80091e0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	789b      	ldrb	r3, [r3, #2]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d10e      	bne.n	8009208 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2209      	movs	r2, #9
 80091f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	887a      	ldrh	r2, [r7, #2]
 80091fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009208:	2200      	movs	r2, #0
 800920a:	2100      	movs	r1, #0
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fb5e 	bl	80098ce <USBH_CtlReq>
 8009212:	4603      	mov	r3, r0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	789b      	ldrb	r3, [r3, #2]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d10f      	bne.n	8009250 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2203      	movs	r2, #3
 800923a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	b29a      	uxth	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009250:	2200      	movs	r2, #0
 8009252:	2100      	movs	r1, #0
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fb3a 	bl	80098ce <USBH_CtlReq>
 800925a:	4603      	mov	r3, r0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	789b      	ldrb	r3, [r3, #2]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d10f      	bne.n	8009298 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2202      	movs	r2, #2
 800927c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	b29a      	uxth	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009298:	2200      	movs	r2, #0
 800929a:	2100      	movs	r1, #0
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fb16 	bl	80098ce <USBH_CtlReq>
 80092a2:	4603      	mov	r3, r0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	4613      	mov	r3, r2
 80092b8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80092c0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80092cc:	2302      	movs	r3, #2
 80092ce:	e094      	b.n	80093fa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	781a      	ldrb	r2, [r3, #0]
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	785a      	ldrb	r2, [r3, #1]
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	3302      	adds	r3, #2
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	3303      	adds	r3, #3
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	021b      	lsls	r3, r3, #8
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	4313      	orrs	r3, r2
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	791a      	ldrb	r2, [r3, #4]
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	795a      	ldrb	r2, [r3, #5]
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	799a      	ldrb	r2, [r3, #6]
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	79da      	ldrb	r2, [r3, #7]
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009320:	2b00      	cmp	r3, #0
 8009322:	d004      	beq.n	800932e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800932a:	2b01      	cmp	r3, #1
 800932c:	d11b      	bne.n	8009366 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	79db      	ldrb	r3, [r3, #7]
 8009332:	2b20      	cmp	r3, #32
 8009334:	dc0f      	bgt.n	8009356 <USBH_ParseDevDesc+0xaa>
 8009336:	2b08      	cmp	r3, #8
 8009338:	db0f      	blt.n	800935a <USBH_ParseDevDesc+0xae>
 800933a:	3b08      	subs	r3, #8
 800933c:	4a32      	ldr	r2, [pc, #200]	@ (8009408 <USBH_ParseDevDesc+0x15c>)
 800933e:	fa22 f303 	lsr.w	r3, r2, r3
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	2b00      	cmp	r3, #0
 8009348:	bf14      	ite	ne
 800934a:	2301      	movne	r3, #1
 800934c:	2300      	moveq	r3, #0
 800934e:	b2db      	uxtb	r3, r3
 8009350:	2b00      	cmp	r3, #0
 8009352:	d106      	bne.n	8009362 <USBH_ParseDevDesc+0xb6>
 8009354:	e001      	b.n	800935a <USBH_ParseDevDesc+0xae>
 8009356:	2b40      	cmp	r3, #64	@ 0x40
 8009358:	d003      	beq.n	8009362 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2208      	movs	r2, #8
 800935e:	71da      	strb	r2, [r3, #7]
        break;
 8009360:	e000      	b.n	8009364 <USBH_ParseDevDesc+0xb8>
        break;
 8009362:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009364:	e00e      	b.n	8009384 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800936c:	2b02      	cmp	r3, #2
 800936e:	d107      	bne.n	8009380 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	79db      	ldrb	r3, [r3, #7]
 8009374:	2b08      	cmp	r3, #8
 8009376:	d005      	beq.n	8009384 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	2208      	movs	r2, #8
 800937c:	71da      	strb	r2, [r3, #7]
 800937e:	e001      	b.n	8009384 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009380:	2303      	movs	r3, #3
 8009382:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009384:	88fb      	ldrh	r3, [r7, #6]
 8009386:	2b08      	cmp	r3, #8
 8009388:	d936      	bls.n	80093f8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	3308      	adds	r3, #8
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	461a      	mov	r2, r3
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	3309      	adds	r3, #9
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	021b      	lsls	r3, r3, #8
 800939a:	b29b      	uxth	r3, r3
 800939c:	4313      	orrs	r3, r2
 800939e:	b29a      	uxth	r2, r3
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	330a      	adds	r3, #10
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	461a      	mov	r2, r3
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	330b      	adds	r3, #11
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	4313      	orrs	r3, r2
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	330c      	adds	r3, #12
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	461a      	mov	r2, r3
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	330d      	adds	r3, #13
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	021b      	lsls	r3, r3, #8
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	4313      	orrs	r3, r2
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	7b9a      	ldrb	r2, [r3, #14]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	7bda      	ldrb	r2, [r3, #15]
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	7c1a      	ldrb	r2, [r3, #16]
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	7c5a      	ldrb	r2, [r3, #17]
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	371c      	adds	r7, #28
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	01000101 	.word	0x01000101

0800940c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b08c      	sub	sp, #48	@ 0x30
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	4613      	mov	r3, r2
 8009418:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009420:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009428:	2300      	movs	r3, #0
 800942a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800942e:	2300      	movs	r3, #0
 8009430:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800943a:	2302      	movs	r3, #2
 800943c:	e0da      	b.n	80095f4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	781a      	ldrb	r2, [r3, #0]
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	785a      	ldrb	r2, [r3, #1]
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	3302      	adds	r3, #2
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	3303      	adds	r3, #3
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	021b      	lsls	r3, r3, #8
 8009462:	b29b      	uxth	r3, r3
 8009464:	4313      	orrs	r3, r2
 8009466:	b29b      	uxth	r3, r3
 8009468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800946c:	bf28      	it	cs
 800946e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009472:	b29a      	uxth	r2, r3
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	791a      	ldrb	r2, [r3, #4]
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	795a      	ldrb	r2, [r3, #5]
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	799a      	ldrb	r2, [r3, #6]
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	79da      	ldrb	r2, [r3, #7]
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	7a1a      	ldrb	r2, [r3, #8]
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	d002      	beq.n	80094ae <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	2209      	movs	r2, #9
 80094ac:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80094ae:	88fb      	ldrh	r3, [r7, #6]
 80094b0:	2b09      	cmp	r3, #9
 80094b2:	f240 809d 	bls.w	80095f0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80094b6:	2309      	movs	r3, #9
 80094b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80094be:	e081      	b.n	80095c4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80094c0:	f107 0316 	add.w	r3, r7, #22
 80094c4:	4619      	mov	r1, r3
 80094c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094c8:	f000 f9e7 	bl	800989a <USBH_GetNextDesc>
 80094cc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80094ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d0:	785b      	ldrb	r3, [r3, #1]
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d176      	bne.n	80095c4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80094d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	2b09      	cmp	r3, #9
 80094dc:	d002      	beq.n	80094e4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80094de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e0:	2209      	movs	r2, #9
 80094e2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80094e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094e8:	221a      	movs	r2, #26
 80094ea:	fb02 f303 	mul.w	r3, r2, r3
 80094ee:	3308      	adds	r3, #8
 80094f0:	6a3a      	ldr	r2, [r7, #32]
 80094f2:	4413      	add	r3, r2
 80094f4:	3302      	adds	r3, #2
 80094f6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80094f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094fa:	69f8      	ldr	r0, [r7, #28]
 80094fc:	f000 f87e 	bl	80095fc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009500:	2300      	movs	r3, #0
 8009502:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009506:	2300      	movs	r3, #0
 8009508:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800950a:	e043      	b.n	8009594 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800950c:	f107 0316 	add.w	r3, r7, #22
 8009510:	4619      	mov	r1, r3
 8009512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009514:	f000 f9c1 	bl	800989a <USBH_GetNextDesc>
 8009518:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800951a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	2b05      	cmp	r3, #5
 8009520:	d138      	bne.n	8009594 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	795b      	ldrb	r3, [r3, #5]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d113      	bne.n	8009552 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800952e:	2b02      	cmp	r3, #2
 8009530:	d003      	beq.n	800953a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	799b      	ldrb	r3, [r3, #6]
 8009536:	2b03      	cmp	r3, #3
 8009538:	d10b      	bne.n	8009552 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	79db      	ldrb	r3, [r3, #7]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10b      	bne.n	800955a <USBH_ParseCfgDesc+0x14e>
 8009542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	2b09      	cmp	r3, #9
 8009548:	d007      	beq.n	800955a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800954a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954c:	2209      	movs	r2, #9
 800954e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009550:	e003      	b.n	800955a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009554:	2207      	movs	r2, #7
 8009556:	701a      	strb	r2, [r3, #0]
 8009558:	e000      	b.n	800955c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800955a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800955c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009560:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009564:	3201      	adds	r2, #1
 8009566:	00d2      	lsls	r2, r2, #3
 8009568:	211a      	movs	r1, #26
 800956a:	fb01 f303 	mul.w	r3, r1, r3
 800956e:	4413      	add	r3, r2
 8009570:	3308      	adds	r3, #8
 8009572:	6a3a      	ldr	r2, [r7, #32]
 8009574:	4413      	add	r3, r2
 8009576:	3304      	adds	r3, #4
 8009578:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800957a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800957c:	69b9      	ldr	r1, [r7, #24]
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 f870 	bl	8009664 <USBH_ParseEPDesc>
 8009584:	4603      	mov	r3, r0
 8009586:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800958a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800958e:	3301      	adds	r3, #1
 8009590:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	791b      	ldrb	r3, [r3, #4]
 8009598:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800959c:	429a      	cmp	r2, r3
 800959e:	d204      	bcs.n	80095aa <USBH_ParseCfgDesc+0x19e>
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	885a      	ldrh	r2, [r3, #2]
 80095a4:	8afb      	ldrh	r3, [r7, #22]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d8b0      	bhi.n	800950c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	791b      	ldrb	r3, [r3, #4]
 80095ae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d201      	bcs.n	80095ba <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80095b6:	2303      	movs	r3, #3
 80095b8:	e01c      	b.n	80095f4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80095ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095be:	3301      	adds	r3, #1
 80095c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80095c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d805      	bhi.n	80095d8 <USBH_ParseCfgDesc+0x1cc>
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	885a      	ldrh	r2, [r3, #2]
 80095d0:	8afb      	ldrh	r3, [r7, #22]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	f63f af74 	bhi.w	80094c0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	791b      	ldrb	r3, [r3, #4]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	bf28      	it	cs
 80095e0:	2302      	movcs	r3, #2
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d201      	bcs.n	80095f0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e001      	b.n	80095f4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80095f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3730      	adds	r7, #48	@ 0x30
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	781a      	ldrb	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	785a      	ldrb	r2, [r3, #1]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	789a      	ldrb	r2, [r3, #2]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	78da      	ldrb	r2, [r3, #3]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	3304      	adds	r3, #4
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b02      	cmp	r3, #2
 800962e:	bf28      	it	cs
 8009630:	2302      	movcs	r3, #2
 8009632:	b2da      	uxtb	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	795a      	ldrb	r2, [r3, #5]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	799a      	ldrb	r2, [r3, #6]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	79da      	ldrb	r2, [r3, #7]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	7a1a      	ldrb	r2, [r3, #8]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	721a      	strb	r2, [r3, #8]
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009664:	b480      	push	{r7}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	781a      	ldrb	r2, [r3, #0]
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	785a      	ldrb	r2, [r3, #1]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	789a      	ldrb	r2, [r3, #2]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	78da      	ldrb	r2, [r3, #3]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	3304      	adds	r3, #4
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3305      	adds	r3, #5
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	021b      	lsls	r3, r3, #8
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	4313      	orrs	r3, r2
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	799a      	ldrb	r2, [r3, #6]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	889b      	ldrh	r3, [r3, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d009      	beq.n	80096d2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80096c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096c6:	d804      	bhi.n	80096d2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80096cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096d0:	d901      	bls.n	80096d6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80096d2:	2303      	movs	r3, #3
 80096d4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d136      	bne.n	800974e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	78db      	ldrb	r3, [r3, #3]
 80096e4:	f003 0303 	and.w	r3, r3, #3
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d108      	bne.n	80096fe <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	889b      	ldrh	r3, [r3, #4]
 80096f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096f4:	f240 8097 	bls.w	8009826 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80096f8:	2303      	movs	r3, #3
 80096fa:	75fb      	strb	r3, [r7, #23]
 80096fc:	e093      	b.n	8009826 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	78db      	ldrb	r3, [r3, #3]
 8009702:	f003 0303 	and.w	r3, r3, #3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d107      	bne.n	800971a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	889b      	ldrh	r3, [r3, #4]
 800970e:	2b40      	cmp	r3, #64	@ 0x40
 8009710:	f240 8089 	bls.w	8009826 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009714:	2303      	movs	r3, #3
 8009716:	75fb      	strb	r3, [r7, #23]
 8009718:	e085      	b.n	8009826 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	78db      	ldrb	r3, [r3, #3]
 800971e:	f003 0303 	and.w	r3, r3, #3
 8009722:	2b01      	cmp	r3, #1
 8009724:	d005      	beq.n	8009732 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	78db      	ldrb	r3, [r3, #3]
 800972a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800972e:	2b03      	cmp	r3, #3
 8009730:	d10a      	bne.n	8009748 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	799b      	ldrb	r3, [r3, #6]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <USBH_ParseEPDesc+0xde>
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	799b      	ldrb	r3, [r3, #6]
 800973e:	2b10      	cmp	r3, #16
 8009740:	d970      	bls.n	8009824 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009742:	2303      	movs	r3, #3
 8009744:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009746:	e06d      	b.n	8009824 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009748:	2303      	movs	r3, #3
 800974a:	75fb      	strb	r3, [r7, #23]
 800974c:	e06b      	b.n	8009826 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009754:	2b01      	cmp	r3, #1
 8009756:	d13c      	bne.n	80097d2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	78db      	ldrb	r3, [r3, #3]
 800975c:	f003 0303 	and.w	r3, r3, #3
 8009760:	2b02      	cmp	r3, #2
 8009762:	d005      	beq.n	8009770 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	78db      	ldrb	r3, [r3, #3]
 8009768:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800976c:	2b00      	cmp	r3, #0
 800976e:	d106      	bne.n	800977e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	889b      	ldrh	r3, [r3, #4]
 8009774:	2b40      	cmp	r3, #64	@ 0x40
 8009776:	d956      	bls.n	8009826 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009778:	2303      	movs	r3, #3
 800977a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800977c:	e053      	b.n	8009826 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	78db      	ldrb	r3, [r3, #3]
 8009782:	f003 0303 	and.w	r3, r3, #3
 8009786:	2b01      	cmp	r3, #1
 8009788:	d10e      	bne.n	80097a8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	799b      	ldrb	r3, [r3, #6]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d007      	beq.n	80097a2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009796:	2b10      	cmp	r3, #16
 8009798:	d803      	bhi.n	80097a2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800979e:	2b40      	cmp	r3, #64	@ 0x40
 80097a0:	d941      	bls.n	8009826 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80097a2:	2303      	movs	r3, #3
 80097a4:	75fb      	strb	r3, [r7, #23]
 80097a6:	e03e      	b.n	8009826 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	78db      	ldrb	r3, [r3, #3]
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	2b03      	cmp	r3, #3
 80097b2:	d10b      	bne.n	80097cc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	799b      	ldrb	r3, [r3, #6]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d004      	beq.n	80097c6 <USBH_ParseEPDesc+0x162>
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	889b      	ldrh	r3, [r3, #4]
 80097c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097c4:	d32f      	bcc.n	8009826 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80097c6:	2303      	movs	r3, #3
 80097c8:	75fb      	strb	r3, [r7, #23]
 80097ca:	e02c      	b.n	8009826 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80097cc:	2303      	movs	r3, #3
 80097ce:	75fb      	strb	r3, [r7, #23]
 80097d0:	e029      	b.n	8009826 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d120      	bne.n	800981e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	78db      	ldrb	r3, [r3, #3]
 80097e0:	f003 0303 	and.w	r3, r3, #3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d106      	bne.n	80097f6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	889b      	ldrh	r3, [r3, #4]
 80097ec:	2b08      	cmp	r3, #8
 80097ee:	d01a      	beq.n	8009826 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80097f0:	2303      	movs	r3, #3
 80097f2:	75fb      	strb	r3, [r7, #23]
 80097f4:	e017      	b.n	8009826 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	78db      	ldrb	r3, [r3, #3]
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d10a      	bne.n	8009818 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	799b      	ldrb	r3, [r3, #6]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d003      	beq.n	8009812 <USBH_ParseEPDesc+0x1ae>
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	889b      	ldrh	r3, [r3, #4]
 800980e:	2b08      	cmp	r3, #8
 8009810:	d909      	bls.n	8009826 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009812:	2303      	movs	r3, #3
 8009814:	75fb      	strb	r3, [r7, #23]
 8009816:	e006      	b.n	8009826 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009818:	2303      	movs	r3, #3
 800981a:	75fb      	strb	r3, [r7, #23]
 800981c:	e003      	b.n	8009826 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800981e:	2303      	movs	r3, #3
 8009820:	75fb      	strb	r3, [r7, #23]
 8009822:	e000      	b.n	8009826 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009824:	bf00      	nop
  }

  return status;
 8009826:	7dfb      	ldrb	r3, [r7, #23]
}
 8009828:	4618      	mov	r0, r3
 800982a:	371c      	adds	r7, #28
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	4613      	mov	r3, r2
 8009840:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3301      	adds	r3, #1
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b03      	cmp	r3, #3
 800984a:	d120      	bne.n	800988e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	1e9a      	subs	r2, r3, #2
 8009852:	88fb      	ldrh	r3, [r7, #6]
 8009854:	4293      	cmp	r3, r2
 8009856:	bf28      	it	cs
 8009858:	4613      	movcs	r3, r2
 800985a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3302      	adds	r3, #2
 8009860:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009862:	2300      	movs	r3, #0
 8009864:	82fb      	strh	r3, [r7, #22]
 8009866:	e00b      	b.n	8009880 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009868:	8afb      	ldrh	r3, [r7, #22]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	4413      	add	r3, r2
 800986e:	781a      	ldrb	r2, [r3, #0]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	3301      	adds	r3, #1
 8009878:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800987a:	8afb      	ldrh	r3, [r7, #22]
 800987c:	3302      	adds	r3, #2
 800987e:	82fb      	strh	r3, [r7, #22]
 8009880:	8afa      	ldrh	r2, [r7, #22]
 8009882:	8abb      	ldrh	r3, [r7, #20]
 8009884:	429a      	cmp	r2, r3
 8009886:	d3ef      	bcc.n	8009868 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2200      	movs	r2, #0
 800988c:	701a      	strb	r2, [r3, #0]
  }
}
 800988e:	bf00      	nop
 8009890:	371c      	adds	r7, #28
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800989a:	b480      	push	{r7}
 800989c:	b085      	sub	sp, #20
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	7812      	ldrb	r2, [r2, #0]
 80098ac:	4413      	add	r3, r2
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4413      	add	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80098c0:	68fb      	ldr	r3, [r7, #12]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b086      	sub	sp, #24
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	4613      	mov	r3, r2
 80098da:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80098dc:	2301      	movs	r3, #1
 80098de:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	789b      	ldrb	r3, [r3, #2]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d002      	beq.n	80098ee <USBH_CtlReq+0x20>
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d00f      	beq.n	800990c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80098ec:	e027      	b.n	800993e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	88fa      	ldrh	r2, [r7, #6]
 80098f8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2201      	movs	r2, #1
 80098fe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2202      	movs	r2, #2
 8009904:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009906:	2301      	movs	r3, #1
 8009908:	75fb      	strb	r3, [r7, #23]
      break;
 800990a:	e018      	b.n	800993e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 f81b 	bl	8009948 <USBH_HandleControl>
 8009912:	4603      	mov	r3, r0
 8009914:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009916:	7dfb      	ldrb	r3, [r7, #23]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <USBH_CtlReq+0x54>
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	2b03      	cmp	r3, #3
 8009920:	d106      	bne.n	8009930 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2201      	movs	r2, #1
 8009926:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	761a      	strb	r2, [r3, #24]
      break;
 800992e:	e005      	b.n	800993c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009930:	7dfb      	ldrb	r3, [r7, #23]
 8009932:	2b02      	cmp	r3, #2
 8009934:	d102      	bne.n	800993c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2201      	movs	r2, #1
 800993a:	709a      	strb	r2, [r3, #2]
      break;
 800993c:	bf00      	nop
  }
  return status;
 800993e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af02      	add	r7, sp, #8
 800994e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009950:	2301      	movs	r3, #1
 8009952:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009954:	2300      	movs	r3, #0
 8009956:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7e1b      	ldrb	r3, [r3, #24]
 800995c:	3b01      	subs	r3, #1
 800995e:	2b0a      	cmp	r3, #10
 8009960:	f200 8156 	bhi.w	8009c10 <USBH_HandleControl+0x2c8>
 8009964:	a201      	add	r2, pc, #4	@ (adr r2, 800996c <USBH_HandleControl+0x24>)
 8009966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996a:	bf00      	nop
 800996c:	08009999 	.word	0x08009999
 8009970:	080099b3 	.word	0x080099b3
 8009974:	08009a1d 	.word	0x08009a1d
 8009978:	08009a43 	.word	0x08009a43
 800997c:	08009a7b 	.word	0x08009a7b
 8009980:	08009aa5 	.word	0x08009aa5
 8009984:	08009af7 	.word	0x08009af7
 8009988:	08009b19 	.word	0x08009b19
 800998c:	08009b55 	.word	0x08009b55
 8009990:	08009b7b 	.word	0x08009b7b
 8009994:	08009bb9 	.word	0x08009bb9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f103 0110 	add.w	r1, r3, #16
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	795b      	ldrb	r3, [r3, #5]
 80099a2:	461a      	mov	r2, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f943 	bl	8009c30 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2202      	movs	r2, #2
 80099ae:	761a      	strb	r2, [r3, #24]
      break;
 80099b0:	e139      	b.n	8009c26 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	795b      	ldrb	r3, [r3, #5]
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fcc5 	bl	800a348 <USBH_LL_GetURBState>
 80099be:	4603      	mov	r3, r0
 80099c0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d11e      	bne.n	8009a06 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	7c1b      	ldrb	r3, [r3, #16]
 80099cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80099d0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	8adb      	ldrh	r3, [r3, #22]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00a      	beq.n	80099f0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80099da:	7b7b      	ldrb	r3, [r7, #13]
 80099dc:	2b80      	cmp	r3, #128	@ 0x80
 80099de:	d103      	bne.n	80099e8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2203      	movs	r2, #3
 80099e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099e6:	e115      	b.n	8009c14 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2205      	movs	r2, #5
 80099ec:	761a      	strb	r2, [r3, #24]
      break;
 80099ee:	e111      	b.n	8009c14 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80099f0:	7b7b      	ldrb	r3, [r7, #13]
 80099f2:	2b80      	cmp	r3, #128	@ 0x80
 80099f4:	d103      	bne.n	80099fe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2209      	movs	r2, #9
 80099fa:	761a      	strb	r2, [r3, #24]
      break;
 80099fc:	e10a      	b.n	8009c14 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2207      	movs	r2, #7
 8009a02:	761a      	strb	r2, [r3, #24]
      break;
 8009a04:	e106      	b.n	8009c14 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d003      	beq.n	8009a14 <USBH_HandleControl+0xcc>
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	f040 8100 	bne.w	8009c14 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	220b      	movs	r2, #11
 8009a18:	761a      	strb	r2, [r3, #24]
      break;
 8009a1a:	e0fb      	b.n	8009c14 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6899      	ldr	r1, [r3, #8]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	899a      	ldrh	r2, [r3, #12]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	791b      	ldrb	r3, [r3, #4]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f93a 	bl	8009cae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2204      	movs	r2, #4
 8009a3e:	761a      	strb	r2, [r3, #24]
      break;
 8009a40:	e0f1      	b.n	8009c26 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	791b      	ldrb	r3, [r3, #4]
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fc7d 	bl	800a348 <USBH_LL_GetURBState>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d102      	bne.n	8009a5e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2209      	movs	r2, #9
 8009a5c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009a5e:	7bbb      	ldrb	r3, [r7, #14]
 8009a60:	2b05      	cmp	r3, #5
 8009a62:	d102      	bne.n	8009a6a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009a64:	2303      	movs	r3, #3
 8009a66:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a68:	e0d6      	b.n	8009c18 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009a6a:	7bbb      	ldrb	r3, [r7, #14]
 8009a6c:	2b04      	cmp	r3, #4
 8009a6e:	f040 80d3 	bne.w	8009c18 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	220b      	movs	r2, #11
 8009a76:	761a      	strb	r2, [r3, #24]
      break;
 8009a78:	e0ce      	b.n	8009c18 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6899      	ldr	r1, [r3, #8]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	899a      	ldrh	r2, [r3, #12]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	795b      	ldrb	r3, [r3, #5]
 8009a86:	2001      	movs	r0, #1
 8009a88:	9000      	str	r0, [sp, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f8ea 	bl	8009c64 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2206      	movs	r2, #6
 8009aa0:	761a      	strb	r2, [r3, #24]
      break;
 8009aa2:	e0c0      	b.n	8009c26 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	795b      	ldrb	r3, [r3, #5]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fc4c 	bl	800a348 <USBH_LL_GetURBState>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d103      	bne.n	8009ac2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2207      	movs	r2, #7
 8009abe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ac0:	e0ac      	b.n	8009c1c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	2b05      	cmp	r3, #5
 8009ac6:	d105      	bne.n	8009ad4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	220c      	movs	r2, #12
 8009acc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ad2:	e0a3      	b.n	8009c1c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d103      	bne.n	8009ae2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2205      	movs	r2, #5
 8009ade:	761a      	strb	r2, [r3, #24]
      break;
 8009ae0:	e09c      	b.n	8009c1c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	f040 8099 	bne.w	8009c1c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	220b      	movs	r2, #11
 8009aee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009af0:	2302      	movs	r3, #2
 8009af2:	73fb      	strb	r3, [r7, #15]
      break;
 8009af4:	e092      	b.n	8009c1c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	791b      	ldrb	r3, [r3, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	2100      	movs	r1, #0
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f8d5 	bl	8009cae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2208      	movs	r2, #8
 8009b14:	761a      	strb	r2, [r3, #24]

      break;
 8009b16:	e086      	b.n	8009c26 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	791b      	ldrb	r3, [r3, #4]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fc12 	bl	800a348 <USBH_LL_GetURBState>
 8009b24:	4603      	mov	r3, r0
 8009b26:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d105      	bne.n	8009b3a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	220d      	movs	r2, #13
 8009b32:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b38:	e072      	b.n	8009c20 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d103      	bne.n	8009b48 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	220b      	movs	r2, #11
 8009b44:	761a      	strb	r2, [r3, #24]
      break;
 8009b46:	e06b      	b.n	8009c20 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	2b05      	cmp	r3, #5
 8009b4c:	d168      	bne.n	8009c20 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	73fb      	strb	r3, [r7, #15]
      break;
 8009b52:	e065      	b.n	8009c20 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	795b      	ldrb	r3, [r3, #5]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	9200      	str	r2, [sp, #0]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2100      	movs	r1, #0
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f87f 	bl	8009c64 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	220a      	movs	r2, #10
 8009b76:	761a      	strb	r2, [r3, #24]
      break;
 8009b78:	e055      	b.n	8009c26 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	795b      	ldrb	r3, [r3, #5]
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fbe1 	bl	800a348 <USBH_LL_GetURBState>
 8009b86:	4603      	mov	r3, r0
 8009b88:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009b8a:	7bbb      	ldrb	r3, [r7, #14]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d105      	bne.n	8009b9c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	220d      	movs	r2, #13
 8009b98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b9a:	e043      	b.n	8009c24 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d103      	bne.n	8009baa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2209      	movs	r2, #9
 8009ba6:	761a      	strb	r2, [r3, #24]
      break;
 8009ba8:	e03c      	b.n	8009c24 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	d139      	bne.n	8009c24 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	220b      	movs	r2, #11
 8009bb4:	761a      	strb	r2, [r3, #24]
      break;
 8009bb6:	e035      	b.n	8009c24 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	7e5b      	ldrb	r3, [r3, #25]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	765a      	strb	r2, [r3, #25]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	7e5b      	ldrb	r3, [r3, #25]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d806      	bhi.n	8009bda <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009bd8:	e025      	b.n	8009c26 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009be0:	2106      	movs	r1, #6
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	795b      	ldrb	r3, [r3, #5]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f90c 	bl	8009e10 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	791b      	ldrb	r3, [r3, #4]
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f906 	bl	8009e10 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c0e:	e00a      	b.n	8009c26 <USBH_HandleControl+0x2de>

    default:
      break;
 8009c10:	bf00      	nop
 8009c12:	e008      	b.n	8009c26 <USBH_HandleControl+0x2de>
      break;
 8009c14:	bf00      	nop
 8009c16:	e006      	b.n	8009c26 <USBH_HandleControl+0x2de>
      break;
 8009c18:	bf00      	nop
 8009c1a:	e004      	b.n	8009c26 <USBH_HandleControl+0x2de>
      break;
 8009c1c:	bf00      	nop
 8009c1e:	e002      	b.n	8009c26 <USBH_HandleControl+0x2de>
      break;
 8009c20:	bf00      	nop
 8009c22:	e000      	b.n	8009c26 <USBH_HandleControl+0x2de>
      break;
 8009c24:	bf00      	nop
  }

  return status;
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b088      	sub	sp, #32
 8009c34:	af04      	add	r7, sp, #16
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c3e:	79f9      	ldrb	r1, [r7, #7]
 8009c40:	2300      	movs	r3, #0
 8009c42:	9303      	str	r3, [sp, #12]
 8009c44:	2308      	movs	r3, #8
 8009c46:	9302      	str	r3, [sp, #8]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	9301      	str	r3, [sp, #4]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	2300      	movs	r3, #0
 8009c52:	2200      	movs	r2, #0
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f000 fb46 	bl	800a2e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b088      	sub	sp, #32
 8009c68:	af04      	add	r7, sp, #16
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	4611      	mov	r1, r2
 8009c70:	461a      	mov	r2, r3
 8009c72:	460b      	mov	r3, r1
 8009c74:	80fb      	strh	r3, [r7, #6]
 8009c76:	4613      	mov	r3, r2
 8009c78:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c88:	7979      	ldrb	r1, [r7, #5]
 8009c8a:	7e3b      	ldrb	r3, [r7, #24]
 8009c8c:	9303      	str	r3, [sp, #12]
 8009c8e:	88fb      	ldrh	r3, [r7, #6]
 8009c90:	9302      	str	r3, [sp, #8]
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	9301      	str	r3, [sp, #4]
 8009c96:	2301      	movs	r3, #1
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f000 fb21 	bl	800a2e6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b088      	sub	sp, #32
 8009cb2:	af04      	add	r7, sp, #16
 8009cb4:	60f8      	str	r0, [r7, #12]
 8009cb6:	60b9      	str	r1, [r7, #8]
 8009cb8:	4611      	mov	r1, r2
 8009cba:	461a      	mov	r2, r3
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	80fb      	strh	r3, [r7, #6]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009cc4:	7979      	ldrb	r1, [r7, #5]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9303      	str	r3, [sp, #12]
 8009cca:	88fb      	ldrh	r3, [r7, #6]
 8009ccc:	9302      	str	r3, [sp, #8]
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	9301      	str	r3, [sp, #4]
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	2201      	movs	r2, #1
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f000 fb03 	bl	800a2e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009ce0:	2300      	movs	r3, #0

}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b088      	sub	sp, #32
 8009cee:	af04      	add	r7, sp, #16
 8009cf0:	60f8      	str	r0, [r7, #12]
 8009cf2:	60b9      	str	r1, [r7, #8]
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	80fb      	strh	r3, [r7, #6]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d0e:	7979      	ldrb	r1, [r7, #5]
 8009d10:	7e3b      	ldrb	r3, [r7, #24]
 8009d12:	9303      	str	r3, [sp, #12]
 8009d14:	88fb      	ldrh	r3, [r7, #6]
 8009d16:	9302      	str	r3, [sp, #8]
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	2302      	movs	r3, #2
 8009d22:	2200      	movs	r2, #0
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 fade 	bl	800a2e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af04      	add	r7, sp, #16
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	4611      	mov	r1, r2
 8009d40:	461a      	mov	r2, r3
 8009d42:	460b      	mov	r3, r1
 8009d44:	80fb      	strh	r3, [r7, #6]
 8009d46:	4613      	mov	r3, r2
 8009d48:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d4a:	7979      	ldrb	r1, [r7, #5]
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	9303      	str	r3, [sp, #12]
 8009d50:	88fb      	ldrh	r3, [r7, #6]
 8009d52:	9302      	str	r3, [sp, #8]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	9301      	str	r3, [sp, #4]
 8009d58:	2301      	movs	r3, #1
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	2201      	movs	r2, #1
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 fac0 	bl	800a2e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af04      	add	r7, sp, #16
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	4608      	mov	r0, r1
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	4603      	mov	r3, r0
 8009d80:	70fb      	strb	r3, [r7, #3]
 8009d82:	460b      	mov	r3, r1
 8009d84:	70bb      	strb	r3, [r7, #2]
 8009d86:	4613      	mov	r3, r2
 8009d88:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009d8a:	7878      	ldrb	r0, [r7, #1]
 8009d8c:	78ba      	ldrb	r2, [r7, #2]
 8009d8e:	78f9      	ldrb	r1, [r7, #3]
 8009d90:	8b3b      	ldrh	r3, [r7, #24]
 8009d92:	9302      	str	r3, [sp, #8]
 8009d94:	7d3b      	ldrb	r3, [r7, #20]
 8009d96:	9301      	str	r3, [sp, #4]
 8009d98:	7c3b      	ldrb	r3, [r7, #16]
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa53 	bl	800a24a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b082      	sub	sp, #8
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fa72 	bl	800a2a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f836 	bl	8009e4c <USBH_GetFreePipe>
 8009de0:	4603      	mov	r3, r0
 8009de2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009de4:	89fb      	ldrh	r3, [r7, #14]
 8009de6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d00a      	beq.n	8009e04 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009dee:	78fa      	ldrb	r2, [r7, #3]
 8009df0:	89fb      	ldrh	r3, [r7, #14]
 8009df2:	f003 030f 	and.w	r3, r3, #15
 8009df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009dfa:	6879      	ldr	r1, [r7, #4]
 8009dfc:	33e0      	adds	r3, #224	@ 0xe0
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	440b      	add	r3, r1
 8009e02:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009e04:	89fb      	ldrh	r3, [r7, #14]
 8009e06:	b2db      	uxtb	r3, r3
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009e1c:	78fb      	ldrb	r3, [r7, #3]
 8009e1e:	2b0f      	cmp	r3, #15
 8009e20:	d80d      	bhi.n	8009e3e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009e22:	78fb      	ldrb	r3, [r7, #3]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	33e0      	adds	r3, #224	@ 0xe0
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	78fb      	ldrb	r3, [r7, #3]
 8009e30:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	33e0      	adds	r3, #224	@ 0xe0
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	440b      	add	r3, r1
 8009e3c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009e58:	2300      	movs	r3, #0
 8009e5a:	73fb      	strb	r3, [r7, #15]
 8009e5c:	e00f      	b.n	8009e7e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	33e0      	adds	r3, #224	@ 0xe0
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d102      	bne.n	8009e78 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	e007      	b.n	8009e88 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	73fb      	strb	r3, [r7, #15]
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	2b0f      	cmp	r3, #15
 8009e82:	d9ec      	bls.n	8009e5e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009e84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009e98:	2201      	movs	r2, #1
 8009e9a:	490e      	ldr	r1, [pc, #56]	@ (8009ed4 <MX_USB_HOST_Init+0x40>)
 8009e9c:	480e      	ldr	r0, [pc, #56]	@ (8009ed8 <MX_USB_HOST_Init+0x44>)
 8009e9e:	f7fe fb15 	bl	80084cc <USBH_Init>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009ea8:	f7f7 fb28 	bl	80014fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009eac:	490b      	ldr	r1, [pc, #44]	@ (8009edc <MX_USB_HOST_Init+0x48>)
 8009eae:	480a      	ldr	r0, [pc, #40]	@ (8009ed8 <MX_USB_HOST_Init+0x44>)
 8009eb0:	f7fe fbb9 	bl	8008626 <USBH_RegisterClass>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009eba:	f7f7 fb1f 	bl	80014fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009ebe:	4806      	ldr	r0, [pc, #24]	@ (8009ed8 <MX_USB_HOST_Init+0x44>)
 8009ec0:	f7fe fc3d 	bl	800873e <USBH_Start>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009eca:	f7f7 fb17 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009ece:	bf00      	nop
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	08009ef5 	.word	0x08009ef5
 8009ed8:	200001e4 	.word	0x200001e4
 8009edc:	2000000c 	.word	0x2000000c

08009ee0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009ee4:	4802      	ldr	r0, [pc, #8]	@ (8009ef0 <MX_USB_HOST_Process+0x10>)
 8009ee6:	f7fe fc3b 	bl	8008760 <USBH_Process>
}
 8009eea:	bf00      	nop
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	200001e4 	.word	0x200001e4

08009ef4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	460b      	mov	r3, r1
 8009efe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009f00:	78fb      	ldrb	r3, [r7, #3]
 8009f02:	3b01      	subs	r3, #1
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d819      	bhi.n	8009f3c <USBH_UserProcess+0x48>
 8009f08:	a201      	add	r2, pc, #4	@ (adr r2, 8009f10 <USBH_UserProcess+0x1c>)
 8009f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0e:	bf00      	nop
 8009f10:	08009f3d 	.word	0x08009f3d
 8009f14:	08009f2d 	.word	0x08009f2d
 8009f18:	08009f3d 	.word	0x08009f3d
 8009f1c:	08009f35 	.word	0x08009f35
 8009f20:	08009f25 	.word	0x08009f25
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009f24:	4b09      	ldr	r3, [pc, #36]	@ (8009f4c <USBH_UserProcess+0x58>)
 8009f26:	2203      	movs	r2, #3
 8009f28:	701a      	strb	r2, [r3, #0]
  break;
 8009f2a:	e008      	b.n	8009f3e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009f2c:	4b07      	ldr	r3, [pc, #28]	@ (8009f4c <USBH_UserProcess+0x58>)
 8009f2e:	2202      	movs	r2, #2
 8009f30:	701a      	strb	r2, [r3, #0]
  break;
 8009f32:	e004      	b.n	8009f3e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009f34:	4b05      	ldr	r3, [pc, #20]	@ (8009f4c <USBH_UserProcess+0x58>)
 8009f36:	2201      	movs	r2, #1
 8009f38:	701a      	strb	r2, [r3, #0]
  break;
 8009f3a:	e000      	b.n	8009f3e <USBH_UserProcess+0x4a>

  default:
  break;
 8009f3c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009f3e:	bf00      	nop
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	200005bc 	.word	0x200005bc

08009f50 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08a      	sub	sp, #40	@ 0x28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f58:	f107 0314 	add.w	r3, r7, #20
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	605a      	str	r2, [r3, #4]
 8009f62:	609a      	str	r2, [r3, #8]
 8009f64:	60da      	str	r2, [r3, #12]
 8009f66:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f70:	d147      	bne.n	800a002 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f72:	2300      	movs	r3, #0
 8009f74:	613b      	str	r3, [r7, #16]
 8009f76:	4b25      	ldr	r3, [pc, #148]	@ (800a00c <HAL_HCD_MspInit+0xbc>)
 8009f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f7a:	4a24      	ldr	r2, [pc, #144]	@ (800a00c <HAL_HCD_MspInit+0xbc>)
 8009f7c:	f043 0301 	orr.w	r3, r3, #1
 8009f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8009f82:	4b22      	ldr	r3, [pc, #136]	@ (800a00c <HAL_HCD_MspInit+0xbc>)
 8009f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	613b      	str	r3, [r7, #16]
 8009f8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009f8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f94:	2300      	movs	r3, #0
 8009f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009f9c:	f107 0314 	add.w	r3, r7, #20
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	481b      	ldr	r0, [pc, #108]	@ (800a010 <HAL_HCD_MspInit+0xc0>)
 8009fa4:	f7f7 fea4 	bl	8001cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009fa8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fae:	2302      	movs	r3, #2
 8009fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009fba:	230a      	movs	r3, #10
 8009fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fbe:	f107 0314 	add.w	r3, r7, #20
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	4812      	ldr	r0, [pc, #72]	@ (800a010 <HAL_HCD_MspInit+0xc0>)
 8009fc6:	f7f7 fe93 	bl	8001cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009fca:	4b10      	ldr	r3, [pc, #64]	@ (800a00c <HAL_HCD_MspInit+0xbc>)
 8009fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fce:	4a0f      	ldr	r2, [pc, #60]	@ (800a00c <HAL_HCD_MspInit+0xbc>)
 8009fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fd4:	6353      	str	r3, [r2, #52]	@ 0x34
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	4b0c      	ldr	r3, [pc, #48]	@ (800a00c <HAL_HCD_MspInit+0xbc>)
 8009fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fde:	4a0b      	ldr	r2, [pc, #44]	@ (800a00c <HAL_HCD_MspInit+0xbc>)
 8009fe0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8009fe6:	4b09      	ldr	r3, [pc, #36]	@ (800a00c <HAL_HCD_MspInit+0xbc>)
 8009fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	2043      	movs	r0, #67	@ 0x43
 8009ff8:	f7f7 fe43 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ffc:	2043      	movs	r0, #67	@ 0x43
 8009ffe:	f7f7 fe5c 	bl	8001cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a002:	bf00      	nop
 800a004:	3728      	adds	r7, #40	@ 0x28
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	40023800 	.word	0x40023800
 800a010:	40020000 	.word	0x40020000

0800a014 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe ff73 	bl	8008f0e <USBH_LL_IncTimer>
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe ffab 	bl	8008f9a <USBH_LL_Connect>
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fe ffb4 	bl	8008fc8 <USBH_LL_Disconnect>
}
 800a060:	bf00      	nop
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
 800a074:	4613      	mov	r3, r2
 800a076:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe ff65 	bl	8008f62 <USBH_LL_PortEnabled>
}
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe ff65 	bl	8008f7e <USBH_LL_PortDisabled>
}
 800a0b4:	bf00      	nop
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d12a      	bne.n	800a124 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a0ce:	4a18      	ldr	r2, [pc, #96]	@ (800a130 <USBH_LL_Init+0x74>)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a15      	ldr	r2, [pc, #84]	@ (800a130 <USBH_LL_Init+0x74>)
 800a0da:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a0de:	4b14      	ldr	r3, [pc, #80]	@ (800a130 <USBH_LL_Init+0x74>)
 800a0e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a0e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a0e6:	4b12      	ldr	r3, [pc, #72]	@ (800a130 <USBH_LL_Init+0x74>)
 800a0e8:	2208      	movs	r2, #8
 800a0ea:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a0ec:	4b10      	ldr	r3, [pc, #64]	@ (800a130 <USBH_LL_Init+0x74>)
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a0f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a130 <USBH_LL_Init+0x74>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a0f8:	4b0d      	ldr	r3, [pc, #52]	@ (800a130 <USBH_LL_Init+0x74>)
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a130 <USBH_LL_Init+0x74>)
 800a100:	2200      	movs	r2, #0
 800a102:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a104:	480a      	ldr	r0, [pc, #40]	@ (800a130 <USBH_LL_Init+0x74>)
 800a106:	f7f7 ffc0 	bl	800208a <HAL_HCD_Init>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a110:	f7f7 f9f4 	bl	80014fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a114:	4806      	ldr	r0, [pc, #24]	@ (800a130 <USBH_LL_Init+0x74>)
 800a116:	f7f8 fc21 	bl	800295c <HAL_HCD_GetCurrentFrame>
 800a11a:	4603      	mov	r3, r0
 800a11c:	4619      	mov	r1, r3
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f7fe fee6 	bl	8008ef0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	200005c0 	.word	0x200005c0

0800a134 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7f8 fb8e 	bl	800286c <HAL_HCD_Start>
 800a150:	4603      	mov	r3, r0
 800a152:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	4618      	mov	r0, r3
 800a158:	f000 f95e 	bl	800a418 <USBH_Get_USB_Status>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a160:	7bbb      	ldrb	r3, [r7, #14]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a180:	4618      	mov	r0, r3
 800a182:	f7f8 fb96 	bl	80028b2 <HAL_HCD_Stop>
 800a186:	4603      	mov	r3, r0
 800a188:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f943 	bl	800a418 <USBH_Get_USB_Status>
 800a192:	4603      	mov	r3, r0
 800a194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a196:	7bbb      	ldrb	r3, [r7, #14]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7f8 fbe0 	bl	8002978 <HAL_HCD_GetCurrentSpeed>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d00c      	beq.n	800a1d8 <USBH_LL_GetSpeed+0x38>
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d80d      	bhi.n	800a1de <USBH_LL_GetSpeed+0x3e>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <USBH_LL_GetSpeed+0x2c>
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d003      	beq.n	800a1d2 <USBH_LL_GetSpeed+0x32>
 800a1ca:	e008      	b.n	800a1de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a1d0:	e008      	b.n	800a1e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a1d6:	e005      	b.n	800a1e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a1d8:	2302      	movs	r3, #2
 800a1da:	73fb      	strb	r3, [r7, #15]
    break;
 800a1dc:	e002      	b.n	800a1e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e2:	bf00      	nop
  }
  return  speed;
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a204:	4618      	mov	r0, r3
 800a206:	f7f8 fb71 	bl	80028ec <HAL_HCD_ResetPort>
 800a20a:	4603      	mov	r3, r0
 800a20c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	4618      	mov	r0, r3
 800a212:	f000 f901 	bl	800a418 <USBH_Get_USB_Status>
 800a216:	4603      	mov	r3, r0
 800a218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a236:	78fa      	ldrb	r2, [r7, #3]
 800a238:	4611      	mov	r1, r2
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7f8 fb79 	bl	8002932 <HAL_HCD_HC_GetXferCount>
 800a240:	4603      	mov	r3, r0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a24a:	b590      	push	{r4, r7, lr}
 800a24c:	b089      	sub	sp, #36	@ 0x24
 800a24e:	af04      	add	r7, sp, #16
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	4608      	mov	r0, r1
 800a254:	4611      	mov	r1, r2
 800a256:	461a      	mov	r2, r3
 800a258:	4603      	mov	r3, r0
 800a25a:	70fb      	strb	r3, [r7, #3]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70bb      	strb	r3, [r7, #2]
 800a260:	4613      	mov	r3, r2
 800a262:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a272:	787c      	ldrb	r4, [r7, #1]
 800a274:	78ba      	ldrb	r2, [r7, #2]
 800a276:	78f9      	ldrb	r1, [r7, #3]
 800a278:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a27a:	9302      	str	r3, [sp, #8]
 800a27c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a280:	9301      	str	r3, [sp, #4]
 800a282:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	4623      	mov	r3, r4
 800a28a:	f7f7 ff65 	bl	8002158 <HAL_HCD_HC_Init>
 800a28e:	4603      	mov	r3, r0
 800a290:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	4618      	mov	r0, r3
 800a296:	f000 f8bf 	bl	800a418 <USBH_Get_USB_Status>
 800a29a:	4603      	mov	r3, r0
 800a29c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a29e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd90      	pop	{r4, r7, pc}

0800a2a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2c2:	78fa      	ldrb	r2, [r7, #3]
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7f7 fffe 	bl	80022c8 <HAL_HCD_HC_Halt>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f000 f8a0 	bl	800a418 <USBH_Get_USB_Status>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a2e6:	b590      	push	{r4, r7, lr}
 800a2e8:	b089      	sub	sp, #36	@ 0x24
 800a2ea:	af04      	add	r7, sp, #16
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	70fb      	strb	r3, [r7, #3]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70bb      	strb	r3, [r7, #2]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a30e:	787c      	ldrb	r4, [r7, #1]
 800a310:	78ba      	ldrb	r2, [r7, #2]
 800a312:	78f9      	ldrb	r1, [r7, #3]
 800a314:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a318:	9303      	str	r3, [sp, #12]
 800a31a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a31c:	9302      	str	r3, [sp, #8]
 800a31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a320:	9301      	str	r3, [sp, #4]
 800a322:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	4623      	mov	r3, r4
 800a32a:	f7f7 fff1 	bl	8002310 <HAL_HCD_HC_SubmitRequest>
 800a32e:	4603      	mov	r3, r0
 800a330:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	4618      	mov	r0, r3
 800a336:	f000 f86f 	bl	800a418 <USBH_Get_USB_Status>
 800a33a:	4603      	mov	r3, r0
 800a33c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a33e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	bd90      	pop	{r4, r7, pc}

0800a348 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	460b      	mov	r3, r1
 800a352:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a35a:	78fa      	ldrb	r2, [r7, #3]
 800a35c:	4611      	mov	r1, r2
 800a35e:	4618      	mov	r0, r3
 800a360:	f7f8 fad2 	bl	8002908 <HAL_HCD_HC_GetURBState>
 800a364:	4603      	mov	r3, r0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b082      	sub	sp, #8
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	460b      	mov	r3, r1
 800a378:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a380:	2b01      	cmp	r3, #1
 800a382:	d103      	bne.n	800a38c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	4618      	mov	r0, r3
 800a388:	f000 f872 	bl	800a470 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a38c:	20c8      	movs	r0, #200	@ 0xc8
 800a38e:	f7f7 fb79 	bl	8001a84 <HAL_Delay>
  return USBH_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	70fb      	strb	r3, [r7, #3]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a3b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a3b4:	78fa      	ldrb	r2, [r7, #3]
 800a3b6:	68f9      	ldr	r1, [r7, #12]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	011b      	lsls	r3, r3, #4
 800a3bc:	1a9b      	subs	r3, r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	440b      	add	r3, r1
 800a3c2:	3317      	adds	r3, #23
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a3ca:	78fa      	ldrb	r2, [r7, #3]
 800a3cc:	68f9      	ldr	r1, [r7, #12]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	011b      	lsls	r3, r3, #4
 800a3d2:	1a9b      	subs	r3, r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	440b      	add	r3, r1
 800a3d8:	333c      	adds	r3, #60	@ 0x3c
 800a3da:	78ba      	ldrb	r2, [r7, #2]
 800a3dc:	701a      	strb	r2, [r3, #0]
 800a3de:	e009      	b.n	800a3f4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a3e0:	78fa      	ldrb	r2, [r7, #3]
 800a3e2:	68f9      	ldr	r1, [r7, #12]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	011b      	lsls	r3, r3, #4
 800a3e8:	1a9b      	subs	r3, r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	440b      	add	r3, r1
 800a3ee:	333d      	adds	r3, #61	@ 0x3d
 800a3f0:	78ba      	ldrb	r2, [r7, #2]
 800a3f2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7f7 fb3a 	bl	8001a84 <HAL_Delay>
}
 800a410:	bf00      	nop
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a426:	79fb      	ldrb	r3, [r7, #7]
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d817      	bhi.n	800a45c <USBH_Get_USB_Status+0x44>
 800a42c:	a201      	add	r2, pc, #4	@ (adr r2, 800a434 <USBH_Get_USB_Status+0x1c>)
 800a42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a432:	bf00      	nop
 800a434:	0800a445 	.word	0x0800a445
 800a438:	0800a44b 	.word	0x0800a44b
 800a43c:	0800a451 	.word	0x0800a451
 800a440:	0800a457 	.word	0x0800a457
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
    break;
 800a448:	e00b      	b.n	800a462 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a44a:	2302      	movs	r3, #2
 800a44c:	73fb      	strb	r3, [r7, #15]
    break;
 800a44e:	e008      	b.n	800a462 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a450:	2301      	movs	r3, #1
 800a452:	73fb      	strb	r3, [r7, #15]
    break;
 800a454:	e005      	b.n	800a462 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a456:	2302      	movs	r3, #2
 800a458:	73fb      	strb	r3, [r7, #15]
    break;
 800a45a:	e002      	b.n	800a462 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a45c:	2302      	movs	r3, #2
 800a45e:	73fb      	strb	r3, [r7, #15]
    break;
 800a460:	bf00      	nop
  }
  return usb_status;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	4603      	mov	r3, r0
 800a478:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a47e:	79fb      	ldrb	r3, [r7, #7]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d102      	bne.n	800a48a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a484:	2300      	movs	r3, #0
 800a486:	73fb      	strb	r3, [r7, #15]
 800a488:	e001      	b.n	800a48e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a48a:	2301      	movs	r3, #1
 800a48c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
 800a490:	461a      	mov	r2, r3
 800a492:	2101      	movs	r1, #1
 800a494:	4803      	ldr	r0, [pc, #12]	@ (800a4a4 <MX_DriverVbusFS+0x34>)
 800a496:	f7f7 fddf 	bl	8002058 <HAL_GPIO_WritePin>
}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	40020800 	.word	0x40020800

0800a4a8 <malloc>:
 800a4a8:	4b02      	ldr	r3, [pc, #8]	@ (800a4b4 <malloc+0xc>)
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	6818      	ldr	r0, [r3, #0]
 800a4ae:	f000 b82d 	b.w	800a50c <_malloc_r>
 800a4b2:	bf00      	nop
 800a4b4:	2000002c 	.word	0x2000002c

0800a4b8 <free>:
 800a4b8:	4b02      	ldr	r3, [pc, #8]	@ (800a4c4 <free+0xc>)
 800a4ba:	4601      	mov	r1, r0
 800a4bc:	6818      	ldr	r0, [r3, #0]
 800a4be:	f000 b8f5 	b.w	800a6ac <_free_r>
 800a4c2:	bf00      	nop
 800a4c4:	2000002c 	.word	0x2000002c

0800a4c8 <sbrk_aligned>:
 800a4c8:	b570      	push	{r4, r5, r6, lr}
 800a4ca:	4e0f      	ldr	r6, [pc, #60]	@ (800a508 <sbrk_aligned+0x40>)
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	6831      	ldr	r1, [r6, #0]
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	b911      	cbnz	r1, 800a4da <sbrk_aligned+0x12>
 800a4d4:	f000 f8ae 	bl	800a634 <_sbrk_r>
 800a4d8:	6030      	str	r0, [r6, #0]
 800a4da:	4621      	mov	r1, r4
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f000 f8a9 	bl	800a634 <_sbrk_r>
 800a4e2:	1c43      	adds	r3, r0, #1
 800a4e4:	d103      	bne.n	800a4ee <sbrk_aligned+0x26>
 800a4e6:	f04f 34ff 	mov.w	r4, #4294967295
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	bd70      	pop	{r4, r5, r6, pc}
 800a4ee:	1cc4      	adds	r4, r0, #3
 800a4f0:	f024 0403 	bic.w	r4, r4, #3
 800a4f4:	42a0      	cmp	r0, r4
 800a4f6:	d0f8      	beq.n	800a4ea <sbrk_aligned+0x22>
 800a4f8:	1a21      	subs	r1, r4, r0
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	f000 f89a 	bl	800a634 <_sbrk_r>
 800a500:	3001      	adds	r0, #1
 800a502:	d1f2      	bne.n	800a4ea <sbrk_aligned+0x22>
 800a504:	e7ef      	b.n	800a4e6 <sbrk_aligned+0x1e>
 800a506:	bf00      	nop
 800a508:	200009a0 	.word	0x200009a0

0800a50c <_malloc_r>:
 800a50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a510:	1ccd      	adds	r5, r1, #3
 800a512:	f025 0503 	bic.w	r5, r5, #3
 800a516:	3508      	adds	r5, #8
 800a518:	2d0c      	cmp	r5, #12
 800a51a:	bf38      	it	cc
 800a51c:	250c      	movcc	r5, #12
 800a51e:	2d00      	cmp	r5, #0
 800a520:	4606      	mov	r6, r0
 800a522:	db01      	blt.n	800a528 <_malloc_r+0x1c>
 800a524:	42a9      	cmp	r1, r5
 800a526:	d904      	bls.n	800a532 <_malloc_r+0x26>
 800a528:	230c      	movs	r3, #12
 800a52a:	6033      	str	r3, [r6, #0]
 800a52c:	2000      	movs	r0, #0
 800a52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a532:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a608 <_malloc_r+0xfc>
 800a536:	f000 f869 	bl	800a60c <__malloc_lock>
 800a53a:	f8d8 3000 	ldr.w	r3, [r8]
 800a53e:	461c      	mov	r4, r3
 800a540:	bb44      	cbnz	r4, 800a594 <_malloc_r+0x88>
 800a542:	4629      	mov	r1, r5
 800a544:	4630      	mov	r0, r6
 800a546:	f7ff ffbf 	bl	800a4c8 <sbrk_aligned>
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	4604      	mov	r4, r0
 800a54e:	d158      	bne.n	800a602 <_malloc_r+0xf6>
 800a550:	f8d8 4000 	ldr.w	r4, [r8]
 800a554:	4627      	mov	r7, r4
 800a556:	2f00      	cmp	r7, #0
 800a558:	d143      	bne.n	800a5e2 <_malloc_r+0xd6>
 800a55a:	2c00      	cmp	r4, #0
 800a55c:	d04b      	beq.n	800a5f6 <_malloc_r+0xea>
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	4639      	mov	r1, r7
 800a562:	4630      	mov	r0, r6
 800a564:	eb04 0903 	add.w	r9, r4, r3
 800a568:	f000 f864 	bl	800a634 <_sbrk_r>
 800a56c:	4581      	cmp	r9, r0
 800a56e:	d142      	bne.n	800a5f6 <_malloc_r+0xea>
 800a570:	6821      	ldr	r1, [r4, #0]
 800a572:	1a6d      	subs	r5, r5, r1
 800a574:	4629      	mov	r1, r5
 800a576:	4630      	mov	r0, r6
 800a578:	f7ff ffa6 	bl	800a4c8 <sbrk_aligned>
 800a57c:	3001      	adds	r0, #1
 800a57e:	d03a      	beq.n	800a5f6 <_malloc_r+0xea>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	442b      	add	r3, r5
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	f8d8 3000 	ldr.w	r3, [r8]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	bb62      	cbnz	r2, 800a5e8 <_malloc_r+0xdc>
 800a58e:	f8c8 7000 	str.w	r7, [r8]
 800a592:	e00f      	b.n	800a5b4 <_malloc_r+0xa8>
 800a594:	6822      	ldr	r2, [r4, #0]
 800a596:	1b52      	subs	r2, r2, r5
 800a598:	d420      	bmi.n	800a5dc <_malloc_r+0xd0>
 800a59a:	2a0b      	cmp	r2, #11
 800a59c:	d917      	bls.n	800a5ce <_malloc_r+0xc2>
 800a59e:	1961      	adds	r1, r4, r5
 800a5a0:	42a3      	cmp	r3, r4
 800a5a2:	6025      	str	r5, [r4, #0]
 800a5a4:	bf18      	it	ne
 800a5a6:	6059      	strne	r1, [r3, #4]
 800a5a8:	6863      	ldr	r3, [r4, #4]
 800a5aa:	bf08      	it	eq
 800a5ac:	f8c8 1000 	streq.w	r1, [r8]
 800a5b0:	5162      	str	r2, [r4, r5]
 800a5b2:	604b      	str	r3, [r1, #4]
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f000 f82f 	bl	800a618 <__malloc_unlock>
 800a5ba:	f104 000b 	add.w	r0, r4, #11
 800a5be:	1d23      	adds	r3, r4, #4
 800a5c0:	f020 0007 	bic.w	r0, r0, #7
 800a5c4:	1ac2      	subs	r2, r0, r3
 800a5c6:	bf1c      	itt	ne
 800a5c8:	1a1b      	subne	r3, r3, r0
 800a5ca:	50a3      	strne	r3, [r4, r2]
 800a5cc:	e7af      	b.n	800a52e <_malloc_r+0x22>
 800a5ce:	6862      	ldr	r2, [r4, #4]
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	bf0c      	ite	eq
 800a5d4:	f8c8 2000 	streq.w	r2, [r8]
 800a5d8:	605a      	strne	r2, [r3, #4]
 800a5da:	e7eb      	b.n	800a5b4 <_malloc_r+0xa8>
 800a5dc:	4623      	mov	r3, r4
 800a5de:	6864      	ldr	r4, [r4, #4]
 800a5e0:	e7ae      	b.n	800a540 <_malloc_r+0x34>
 800a5e2:	463c      	mov	r4, r7
 800a5e4:	687f      	ldr	r7, [r7, #4]
 800a5e6:	e7b6      	b.n	800a556 <_malloc_r+0x4a>
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	d1fb      	bne.n	800a5e8 <_malloc_r+0xdc>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	6053      	str	r3, [r2, #4]
 800a5f4:	e7de      	b.n	800a5b4 <_malloc_r+0xa8>
 800a5f6:	230c      	movs	r3, #12
 800a5f8:	6033      	str	r3, [r6, #0]
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f000 f80c 	bl	800a618 <__malloc_unlock>
 800a600:	e794      	b.n	800a52c <_malloc_r+0x20>
 800a602:	6005      	str	r5, [r0, #0]
 800a604:	e7d6      	b.n	800a5b4 <_malloc_r+0xa8>
 800a606:	bf00      	nop
 800a608:	200009a4 	.word	0x200009a4

0800a60c <__malloc_lock>:
 800a60c:	4801      	ldr	r0, [pc, #4]	@ (800a614 <__malloc_lock+0x8>)
 800a60e:	f000 b84b 	b.w	800a6a8 <__retarget_lock_acquire_recursive>
 800a612:	bf00      	nop
 800a614:	20000ae4 	.word	0x20000ae4

0800a618 <__malloc_unlock>:
 800a618:	4801      	ldr	r0, [pc, #4]	@ (800a620 <__malloc_unlock+0x8>)
 800a61a:	f000 b846 	b.w	800a6aa <__retarget_lock_release_recursive>
 800a61e:	bf00      	nop
 800a620:	20000ae4 	.word	0x20000ae4

0800a624 <memset>:
 800a624:	4402      	add	r2, r0
 800a626:	4603      	mov	r3, r0
 800a628:	4293      	cmp	r3, r2
 800a62a:	d100      	bne.n	800a62e <memset+0xa>
 800a62c:	4770      	bx	lr
 800a62e:	f803 1b01 	strb.w	r1, [r3], #1
 800a632:	e7f9      	b.n	800a628 <memset+0x4>

0800a634 <_sbrk_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4d06      	ldr	r5, [pc, #24]	@ (800a650 <_sbrk_r+0x1c>)
 800a638:	2300      	movs	r3, #0
 800a63a:	4604      	mov	r4, r0
 800a63c:	4608      	mov	r0, r1
 800a63e:	602b      	str	r3, [r5, #0]
 800a640:	f7f7 f93c 	bl	80018bc <_sbrk>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_sbrk_r+0x1a>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_sbrk_r+0x1a>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	20000ae0 	.word	0x20000ae0

0800a654 <__errno>:
 800a654:	4b01      	ldr	r3, [pc, #4]	@ (800a65c <__errno+0x8>)
 800a656:	6818      	ldr	r0, [r3, #0]
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	2000002c 	.word	0x2000002c

0800a660 <__libc_init_array>:
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	4d0d      	ldr	r5, [pc, #52]	@ (800a698 <__libc_init_array+0x38>)
 800a664:	4c0d      	ldr	r4, [pc, #52]	@ (800a69c <__libc_init_array+0x3c>)
 800a666:	1b64      	subs	r4, r4, r5
 800a668:	10a4      	asrs	r4, r4, #2
 800a66a:	2600      	movs	r6, #0
 800a66c:	42a6      	cmp	r6, r4
 800a66e:	d109      	bne.n	800a684 <__libc_init_array+0x24>
 800a670:	4d0b      	ldr	r5, [pc, #44]	@ (800a6a0 <__libc_init_array+0x40>)
 800a672:	4c0c      	ldr	r4, [pc, #48]	@ (800a6a4 <__libc_init_array+0x44>)
 800a674:	f000 f864 	bl	800a740 <_init>
 800a678:	1b64      	subs	r4, r4, r5
 800a67a:	10a4      	asrs	r4, r4, #2
 800a67c:	2600      	movs	r6, #0
 800a67e:	42a6      	cmp	r6, r4
 800a680:	d105      	bne.n	800a68e <__libc_init_array+0x2e>
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	f855 3b04 	ldr.w	r3, [r5], #4
 800a688:	4798      	blx	r3
 800a68a:	3601      	adds	r6, #1
 800a68c:	e7ee      	b.n	800a66c <__libc_init_array+0xc>
 800a68e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a692:	4798      	blx	r3
 800a694:	3601      	adds	r6, #1
 800a696:	e7f2      	b.n	800a67e <__libc_init_array+0x1e>
 800a698:	0800a77c 	.word	0x0800a77c
 800a69c:	0800a77c 	.word	0x0800a77c
 800a6a0:	0800a77c 	.word	0x0800a77c
 800a6a4:	0800a780 	.word	0x0800a780

0800a6a8 <__retarget_lock_acquire_recursive>:
 800a6a8:	4770      	bx	lr

0800a6aa <__retarget_lock_release_recursive>:
 800a6aa:	4770      	bx	lr

0800a6ac <_free_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	2900      	cmp	r1, #0
 800a6b2:	d041      	beq.n	800a738 <_free_r+0x8c>
 800a6b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6b8:	1f0c      	subs	r4, r1, #4
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	bfb8      	it	lt
 800a6be:	18e4      	addlt	r4, r4, r3
 800a6c0:	f7ff ffa4 	bl	800a60c <__malloc_lock>
 800a6c4:	4a1d      	ldr	r2, [pc, #116]	@ (800a73c <_free_r+0x90>)
 800a6c6:	6813      	ldr	r3, [r2, #0]
 800a6c8:	b933      	cbnz	r3, 800a6d8 <_free_r+0x2c>
 800a6ca:	6063      	str	r3, [r4, #4]
 800a6cc:	6014      	str	r4, [r2, #0]
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6d4:	f7ff bfa0 	b.w	800a618 <__malloc_unlock>
 800a6d8:	42a3      	cmp	r3, r4
 800a6da:	d908      	bls.n	800a6ee <_free_r+0x42>
 800a6dc:	6820      	ldr	r0, [r4, #0]
 800a6de:	1821      	adds	r1, r4, r0
 800a6e0:	428b      	cmp	r3, r1
 800a6e2:	bf01      	itttt	eq
 800a6e4:	6819      	ldreq	r1, [r3, #0]
 800a6e6:	685b      	ldreq	r3, [r3, #4]
 800a6e8:	1809      	addeq	r1, r1, r0
 800a6ea:	6021      	streq	r1, [r4, #0]
 800a6ec:	e7ed      	b.n	800a6ca <_free_r+0x1e>
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	b10b      	cbz	r3, 800a6f8 <_free_r+0x4c>
 800a6f4:	42a3      	cmp	r3, r4
 800a6f6:	d9fa      	bls.n	800a6ee <_free_r+0x42>
 800a6f8:	6811      	ldr	r1, [r2, #0]
 800a6fa:	1850      	adds	r0, r2, r1
 800a6fc:	42a0      	cmp	r0, r4
 800a6fe:	d10b      	bne.n	800a718 <_free_r+0x6c>
 800a700:	6820      	ldr	r0, [r4, #0]
 800a702:	4401      	add	r1, r0
 800a704:	1850      	adds	r0, r2, r1
 800a706:	4283      	cmp	r3, r0
 800a708:	6011      	str	r1, [r2, #0]
 800a70a:	d1e0      	bne.n	800a6ce <_free_r+0x22>
 800a70c:	6818      	ldr	r0, [r3, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	6053      	str	r3, [r2, #4]
 800a712:	4408      	add	r0, r1
 800a714:	6010      	str	r0, [r2, #0]
 800a716:	e7da      	b.n	800a6ce <_free_r+0x22>
 800a718:	d902      	bls.n	800a720 <_free_r+0x74>
 800a71a:	230c      	movs	r3, #12
 800a71c:	602b      	str	r3, [r5, #0]
 800a71e:	e7d6      	b.n	800a6ce <_free_r+0x22>
 800a720:	6820      	ldr	r0, [r4, #0]
 800a722:	1821      	adds	r1, r4, r0
 800a724:	428b      	cmp	r3, r1
 800a726:	bf04      	itt	eq
 800a728:	6819      	ldreq	r1, [r3, #0]
 800a72a:	685b      	ldreq	r3, [r3, #4]
 800a72c:	6063      	str	r3, [r4, #4]
 800a72e:	bf04      	itt	eq
 800a730:	1809      	addeq	r1, r1, r0
 800a732:	6021      	streq	r1, [r4, #0]
 800a734:	6054      	str	r4, [r2, #4]
 800a736:	e7ca      	b.n	800a6ce <_free_r+0x22>
 800a738:	bd38      	pop	{r3, r4, r5, pc}
 800a73a:	bf00      	nop
 800a73c:	200009a4 	.word	0x200009a4

0800a740 <_init>:
 800a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a742:	bf00      	nop
 800a744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a746:	bc08      	pop	{r3}
 800a748:	469e      	mov	lr, r3
 800a74a:	4770      	bx	lr

0800a74c <_fini>:
 800a74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74e:	bf00      	nop
 800a750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a752:	bc08      	pop	{r3}
 800a754:	469e      	mov	lr, r3
 800a756:	4770      	bx	lr
